<%@ jet package="CodeGenerator" class="ERU002Template" 
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>


/*CODE_BLOCK_BEGIN[ERU002.c]*/
/*******************************************************************************
 Copyright (c) 2011, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000 Series/XMC1000 series                          **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Mar 14, 2013                                             **
**                                                                            **
*******************************************************************************/
/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** NPJ        App Developer                                                   **
*******************************************************************************/
<% String AppBaseuri = "app/eru002/";%>
/**
 * @file   ERU002.c
 *
 * Revision History
 * 25 Jan 2013 v1.0.4 Initial Version
 * 14 Mar 2013 v1.0.6 Porting to XMC42xx and XMC44xx
 *
 * @brief  ERU002 App Implementation
 *
 */
/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/

/** Inclusion of header file */
#include <DAVE3.h>

<% boolean DBGApp = false; %> 
	 
<% if (!DBGApp) { %>  
/*****************************************************************************
              DUMMY DEFINTIONS OF DEBUG LOG MACROS
*****************************************************************************/
/*These definitions are included here to avoid compilation errors,
 since the DBG002 app is not part of the project. All the macros are defined
 as empty*/ 
#ifndef _DBG002_H_

#define DBG002_RegisterCallBack(A,B,C)
#define DBG002_I(e) 
#define DBG002_IG(e,g) 
#define DBG002_IH(e,h) 
#define DBG002_IP(e,p) 
#define DBG002_IGH(e,g,h) 
#define DBG002_IGP(e,g,p) 
#define DBG002_IHP(e,h,p) 
#define DBG002_IGHP(e,g,h,p) 
#define DBG002_N(e) 
#define DBG002_NG(e,g) 
#define DBG002_NH(e,h) 
#define DBG002_NP(e,p) 
#define DBG002_NGH(e,g,h) 
#define DBG002_NGP(e,g,p) 
#define DBG002_NHP(e,h,p) 
#define DBG002_NGHP(e,g,h,p) 
#define DBG002_ID(e) 
#define DBG002_IS(e) 
#define DBG002_ISG(e,g) 
#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
#define DBG002_CRITICAL(groupid,messageid,length,value)
#define DBG002_ERROR(groupid,messageid,length,value)
#define DBG002_WARNING(groupid,messageid,length,value)
#define DBG002_INFO(groupid,messageid,length,value)
#define DBG002_TRACE(groupid,messageid,length,value)
#define DBG002_FUNCTION_ENTRY(GID, Status) 
#define DBG002_FUNCTION_EXIT(GID, Status) 

#endif/* End of defintions of dummy Debug Log macros*/
	<% } %>     

#undef APP_GID
#define APP_GID DBG002_GID_ERU001	


<% int Is44Device = -1; %>

<% int Is42Device = -1; %>

<% int Is45Device = -1; %>

<% Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); %>

<% Is44Device = ((app.getSoftwareId().substring(0,2).compareTo("44")==0)?1:0); %>

<% Is42Device = ((app.getSoftwareId().substring(0,2).compareTo("42")==0)?1:0); %>	
	
	

/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/


#define ERU_INVALID_INPUT     0x0000000FU
#define ERU_INPUT_LEVEL_SET   0x00000001U
#define ERU_OGU_Y_MAX          (uint8_t)3


/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/

/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/


/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/



/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/


/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/



/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/



/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/


/** @addtogroup ERU002_app Func
 * @{
 */

void ERU002_Init(void)
{
 
    DBG002_FUNCTION_ENTRY(APP_GID,ERU002_FUNCTION_ENTRY);
  
  /* <<<DD_ERU001_API_1>>> */
  /* Configure the register as per user configuration */

<% String ERUuri = "http://www.infineon.com/0.1.28/peripheral/eru/"; %>
<% String MappedUri = null; %>
<% String appInst  = null; %>
<% String UnitInst = null; %>
<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/eru002/"));
 for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/ogu"); %>
<% if((MappedUri != null) && (MappedUri != "")) {  %>
<% UnitInst = MappedUri.substring(ERUuri.length(),MappedUri.indexOf("/ogu/")); %>
<% int Unit = Integer.parseInt(UnitInst);%>
<%if(Unit == 1) {%>
  /* Reset the ERU Unit 1*/
  if(RESET001_GetStatus(PER0_ERU1) == 1)
  {
    /* De-assert the module */
    RESET001_DeassertReset(PER0_ERU1);
  }
<%if ((Is44Device==1)||(Is42Device==1))
  {%>
   /* Deassert the clock gating under SCU module to enable the WDT peripheral
  */
  
  WR_REG(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_ERU1_Msk, SCU_CLK_CGATCLR0_ERU1_Pos, 1U);
  <%}%>
<%}%>  
  ERU002_Handle<%=appInst%>.ERURegs->EXOCON[ERU002_Handle<%=appInst%>.OutputChannel] |=  (((uint32_t)((uint32_t)<%= app.getIntegerValue(AppBaseuri + appInst + "/ogu/exocon/gp") %>  << ERU_EXOCON_GP_Pos) & \
	ERU_EXOCON_GP_Msk) | \
	((uint32_t)(<%= app.getIntegerValue(AppBaseuri + appInst + "/ogu/exocon/geen") %>  << ERU_EXOCON_GEEN_Pos) & \
			ERU_EXOCON_GEEN_Msk));	  
<% } %>
<% else { %>
/* OUTPUT CHANNEL IS NOT MAPPED */
<% } %>

<%} %>
								 
 
    DBG002_FUNCTION_EXIT(APP_GID,ERU002_FUNCTION_EXIT);
  
}


	
/*  Function to Select peripheral trigger input Source 
 *  ERU_OGU_y = SIGNAL_ERU_OGU_y3 for signal 1
 *  ERU_OGU_y = SIGNAL_ERU_OGU_y1 for signal 0
 */

uint32_t  ERU002_SetPeripheralTrigInputSrc(const ERU002_HandleType *handle, uint8_t ERU_OGU_y)
{
	 
	uint32_t status = 0;
	ERU_GLOBAL_TypeDef *ERURegs = handle->ERURegs;
	/* Check the OGU_y value */
	if( ( ERU_OGU_y <= ERU_OGU_Y_MAX ) && ( ERURegs != NULL) )
	{
		/* ERUx_EXOCON[y]_ISS x =0 and 1, y = 0, 1, 2 and 3 */
		WR_REG(ERURegs->EXOCON[handle->OutputChannel], ERU_EXOCON_ISS_Msk, ERU_EXOCON_ISS_Pos, ERU_OGU_y);
		status = ERU_INPUT_LEVEL_SET;
	}
	else
	{
		status = ERU_INVALID_INPUT;
	}
	return status;
	
}

	

/**
 *@}
 */



/*CODE_BLOCK_END*/
