<%@ jet package="CodeGenerator" class="io002_confc_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[IO002_Conf.c]*/
/*******************************************************************************
 Copyright (c) 2013, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Jan 1, 2014                                           **
**                                                                            **
**                                                                            **
*******************************************************************************/
/**
 * @file   IO002_Conf.c
 *
 * @brief  Configuration file generated based on UI settings 
 *         of IO002 App
 */
/* Revision History 
 * 1. Jan 2013 v1.0.12  Ported to XMC1000 Devices, MISRA errors fixed.
 * 2. Oct 2013 v1.0.24  Updated for separating static and dynamic code.
 * 3. Jan1,2014 v1.0.26 Updated the file to fix the instance removal numbering issue
 * 4. Jan06,2014 v1.0.28 Updated the issue with port 14 pad register access.
 */

/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
#include "../../inc/IO002/IO002.h"

<% String P = "http://www.infineon.com/0.1.28/port/p/"; %>
<% String AppBaseuri = "app/io002/"; %>
<% String appInst  = null; %>

<% int IsXMC1000Device = -1; %>
<% IsXMC1000Device = ((app.getSoftwareId().substring(0,1).compareTo("1")==0)?1:0);
%>

<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/io002/"));
 for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% String pinUri = app.getMappedUri(AppBaseuri + appInst +"/pin"); %>
<% if ((pinUri != null) && (pinUri.trim() != "")) { %>
<% String portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
<% String pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %> 
<% int OMR_PS = app.getIntegerValue(AppBaseuri + appInst +"/pin/omr_ps");
int PDR_PD = app.getIntegerValue(AppBaseuri + appInst +"/pin/pdr_pd");
int HW_SEL = app.getIntegerValue(AppBaseuri + appInst +"IO002_irwHWControl");
int IOCR_PCR = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_pcr");
int IOCR_PCR2 = app.getIntegerValue(AppBaseuri + appInst +"/IO002_inputchardummy");
int IOCR_PO = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_po");
int IOCR_OE = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_oe"); 
int PHCR_EN = app.getIntegerValue(AppBaseuri + appInst +"/IO002_erwPadHysteresis");
int IOCR    = (IOCR_PO << 3 );%>
<% int Pin = Integer.parseInt(pinNo);%> 
<% int PortNum = Integer.parseInt(portNo);%> 
<% if(HW_SEL == -1 ) {%>
<%HW_SEL = 0;%>
<%}%>

const IO002_HandleType IO002_Handle<%=appInst%> = {
  .PortNr   = <%=portNo%>U , /* Mapped Port */
  .PortPin  = <%=pinNo%>U,   /* Mapped Pin */
  .OMR_PS = <%= app.getIntegerValue(AppBaseuri + appInst +"/pin/omr_ps")%>U,/* omr_ps value*/
  .PDR_PD = <%= app.getIntegerValue(AppBaseuri + appInst +"/pin/pdr_pd")%>U,/* pdr_pd value*/
  .HW_SEL = <%= HW_SEL%>U,/* IO002_irwHWControl value */
  .IOCR_PCR = <%= app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_pcr")%>U,/* iocr_pcr value*/
  .IOCR_PCR2 = <%= app.getIntegerValue(AppBaseuri + appInst +"/IO002_inputchardummy")%>U,/* IO002_inputchardummy value*/
  .IOCR_PO = <%= app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_po")%>U,/* iocr_po value*/
  .IOCR = <%= IOCR%>U,/* iocr_po value left shifted by 3*/
  .IOCR_OE = <%= app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_oe")%>U,/* iocr_oe value*/
  .PHCR_EN = <%= app.getIntegerValue(AppBaseuri + appInst +"/IO002_erwPadHysteresis")%>U,/* IO002_erwPadHysteresis value*/  
  <% if(IsXMC1000Device == 0){%>
  <%if(PortNum != 14){%><% if(Pin < 8) {%>
  .PDR0_MSK = PORT<%=portNo%>_PDR0_PD<%=pinNo%>_Msk,/* pad driver 0 mask*/
  .PDR0_POS = PORT<%=portNo%>_PDR0_PD<%=pinNo%>_Pos,/* pad driver 0 position*/
	<% } else {%>
	.PDR1_MSK = PORT<%=portNo%>_PDR1_PD<%=pinNo%>_Msk,/* pad driver 1 mask*/
	.PDR1_POS = PORT<%=portNo%>_PDR1_PD<%=pinNo%>_Pos,/* pad driver 1 position*/
	<%}}}%>  
  <% if(IOCR_OE == 0 ) {%> <% if (IsXMC1000Device == 1){%> <% if (Pin < 8) {%>
  .PHCR0_MSK = PORT<%=portNo%>_PHCR0_PH<%=pinNo%>_Msk,/*Hysteresis control 0 mask*/
	<%} else if ((Pin >= 8) && (Pin <= 15)) {%>  
  .PHCR1_MSK = PORT<%=portNo%>_PHCR1_PH<%=pinNo%>_Msk,/*Hysteresis control 1 mask*/
	<%}%><%}}%>    
  .PortRegs = (PORTS_TypeDef*)PORT<%= portNo%>_BASE, /* Port Base Address*/ 
	<% if (IsXMC1000Device == 0){%><%if(PortNum != 14){%><% if(Pin < 8) {%>
  .pdr0_ptr = (__IO uint32_t*)&(((PORTS_TypeDef*)PORT<%= portNo%>_BASE)->PDR0)
	<% }else{%>
	.pdr1_ptr = (__IO uint32_t*)&(((PORTS_TypeDef*)PORT<%= portNo%>_BASE)->PDR1)
	<%}}%><%else{%>
  .pdr0_ptr = 0,
  .pdr1_ptr = 0
	<%}%><%}%><%else{%>
  .pdr0_ptr = 0,
  .pdr1_ptr = 0
	<%}%>
      
};
<% } else { %>
/* IO002 App instance (no.<%= appInst %>) is not mapped to any Port Pad. */
<% }} %>



const IO002_HandleType * IO002_HandleArr[IO002_NUM_INSTANCES] =
{
<% int instance = 0; %>
<% int last_instance = 0; %>
<% for (String appIns : appsList ) { %>
<% appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% instance++; %> 
<%}%>

<% last_instance = instance;%>
<% instance = 0;%>
<% for (String appIns : appsList ) { %>
<% appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
	&IO002_Handle<%=appInst%><% if(instance+1 != (last_instance)) {%>,<%} %>
<% instance++; %> 
<%}%>
};

  
/*CODE_BLOCK_END*/
