<%@ jet package="CodeGenerator" class="IO002Template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[IO002.c]*/
/*******************************************************************************
 Copyright (c) 2012, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without**
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : July 15, 2013                                           **
**                                                                            **
*******************************************************************************/
/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** PAE        App Developer                                                   **
*******************************************************************************/
/**
 * @file   IO002.c
 *
 * @brief  IO_Digital _IO002 App
 */
/* Revision History 
 *
 * 01 Jan 2013 v1.0.12  Added constraint for Pad driver to skip the 
 *                      configuration for XMC1000 devices.
 * 16 Mar 2013 v1.0.14  1.Modified OMR register configuration (Direct assignment 
 *                      without reading) to upgrade performance.                       
 * 19 Jun 2013 v1.0.18  1.Conditional code generation for OMR & PDR registers 
 *                      configuration if Output Driver is enabled.
 *                      2. Removed IO002_DisableOutputDriver() & 
 *                      IO002_EnableOutputDriver() API definitions, as output 
 *                      port pin configuration shall be done by higher level 
 *                      APP connections.
 * 15 Jul 2013 v1.0.20  1. Pad Hysteresis Control register configuration added
 *                      for XMC1000 devices to configure Standard/Large 
 *                      Hysteresis on user selection basis.                    
 */
/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/

/** Inclusion of header file */
#include <DAVE3.h>

/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/

/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/

/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/

/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/
<% int IsTIMM1Device = -1; %>
<% IsTIMM1Device = ((app.getSoftwareId().substring(0,1).compareTo("1")==0)?1:0);
%>

/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/
/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/
/** @ingroup IO002_Func
 * @{
 */
/* Function to configure Port Pins based on user configuration & Higher App 
 * configurations.
 */
void IO002_Init(void)
{
   /* <<<DD_IO002_API_1>>> */
  <% String AppBaseuri = "app/io002/"; %>
  <% String appInst  = null; %>
  <% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/io002/"));
   for (String appIns : appsList ) {
   appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
  <% String pinUri = app.getMappedUri(AppBaseuri + appInst +"/pin"); %>
  <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
  <% String portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
  <% String pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %>   
  <% int OMR_PS = app.getIntegerValue(AppBaseuri + appInst +"/pin/omr_ps");
  int PDR_PD = app.getIntegerValue(AppBaseuri + appInst +"/pin/pdr_pd");
  int HW_SEL = app.getIntegerValue(AppBaseuri + appInst +"IO002_irwHWControl");
  int IOCR_PCR = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_pcr");
  int IOCR_PCR2 = app.getIntegerValue(AppBaseuri + appInst +"/IO002_inputchardummy");
  int IOCR_PO = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_po");
  int IOCR_OE = app.getIntegerValue(AppBaseuri + appInst +"/pin/iocr_oe"); 
  int PHCR_EN = app.getIntegerValue(AppBaseuri + appInst +"/IO002_erwPadHysteresis");
  int IOCR    = (IOCR_PO << 3 );%>
  <% int Pin = Integer.parseInt(pinNo);%>
  /* Configuration of <%=portNo%> Port <%=pinNo%> based on User configuration */
  <%if(IOCR_OE == 1 ){%>
  IO002_Handle<%=appInst%>.PortRegs->OMR = <%=OMR_PS%>U << <%=pinNo%>;  
  <%}%>
 <% if((IsTIMM1Device !=1) && (IOCR_OE == 1 )){%>
 <% if(Pin < 8) {%>
  IO002_Handle<%=appInst%>.PortRegs->PDR0   &= (uint32_t)(~(PORT<%=portNo%>_PDR0_PD<%=pinNo%>_Msk));
  IO002_Handle<%=appInst%>.PortRegs->PDR0   |= (uint32_t)((<%=PDR_PD%>UL << PORT<%=portNo%>_PDR0_PD<%=pinNo%>_Pos) & \
                                          PORT<%=portNo%>_PDR0_PD<%=pinNo%>_Msk);
 <% } else {%>
  IO002_Handle<%=appInst%>.PortRegs->PDR1  &= (uint32_t)(~(PORT<%=portNo%>_PDR1_PD<%=pinNo%>_Msk));
  IO002_Handle<%=appInst%>.PortRegs->PDR1  |= (uint32_t)((<%=PDR_PD%>UL << PORT<%=portNo%>_PDR1_PD<%=pinNo%>_Pos) & \
                                     PORT<%=portNo%>_PDR1_PD<%=pinNo%>_Msk);
 <%}}%>
  <% if(HW_SEL == 1 ) {%>
  IO002_Handle<%=appInst%>.PortRegs->HWSEL  |= (2U << <%=Pin%>);
  <% }
  if(IOCR_OE == 1 ) {
  if(Pin < 4) { %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR0 |= (<%=IOCR%>U << <%=(3+(Pin*8))%>);
  <%}else if (Pin >= 4 && Pin <= 7) {  
    Pin = Pin - 4; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR4 |= (<%=IOCR%>U << <%=(3+(Pin*8))%>);
  <%} else if (Pin >= 8 && Pin <= 11) { 
	Pin = Pin - 8; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR8 |= (<%=IOCR%>U << <%=(3+(Pin*8))%>);
  <%} else if (Pin >= 12 && Pin <= 15) { 
    Pin = Pin - 12; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR12 |= (<%=IOCR%>U << <%=(3+(Pin*8))%>);
  <%}}%>
  <% if(IOCR_OE == 0 ) {%>
  <% if (IsTIMM1Device == 1){%>
  <% if (PHCR_EN == 1){%>
  <% if (Pin < 8) {%>
  PORT<%=portNo%>->PHCR0 |= PORT<%=portNo%>_PHCR0_PH<%=pinNo%>_Msk;
  <%} else if ((Pin >= 8) && (Pin <= 15)) {%>
  PORT<%=portNo%>->PHCR1 |= PORT<%=portNo%>_PHCR1_PH<%=pinNo%>_Msk;	  
  <%}}%>
  <%else {%>
  <% if (Pin < 8) {%>
  PORT<%=portNo%>->PHCR0 &= ~(PORT<%=portNo%>_PHCR0_PH<%=pinNo%>_Msk);
  <%} else if ((Pin >= 8) && (Pin <= 15)) {%>
  PORT<%=portNo%>->PHCR1 &= ~(PORT<%=portNo%>_PHCR1_PH<%=pinNo%>_Msk);	  
 <%}%>
 <%}}%>
  <%if(Pin < 4) { %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR0 |= (<%=IOCR_PCR2%>U << <%=(3+(Pin*8))%>);
  <%}else if (Pin >= 4 && Pin <= 7) {  
    Pin = Pin - 4; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR4 |= (<%=IOCR_PCR2%>U << <%=(3+(Pin*8))%>);
  <%} else if (Pin >= 8 && Pin <= 11) { 
	Pin = Pin - 8; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR8 |= (<%=IOCR_PCR2%>U << <%=(3+(Pin*8))%>);
  <%} else if (Pin >= 12 && Pin <= 15) { 
    Pin = Pin - 12; %>
  IO002_Handle<%=appInst%>.PortRegs->IOCR12 |= (<%=IOCR_PCR2%>U << <%=(3+(Pin*8))%>);
  <%}}%>
  <%} else { %>
  /* PIN App instance (no.<%= appInst %>) is not mapped to any port pin. */
  <%}} %>
}

void IO002_DisableOutputDriver(const IO002_HandleType* Handle,IO002_InputModeType Mode)
{
   /* Removed the definition of this API in v1.0.18 Release, as output port pin 
      configuration shall be done by higher level App */
}

void IO002_EnableOutputDriver(const IO002_HandleType* Handle,IO002_OutputModeType Mode)
{
   /* Removed the definition of this API in v1.0.18 Release, as output port pin 
	  configuration shall be done by higher level App */
}

/**
*@}
*/	

/*CODE_BLOCK_END*/

