<%@ jet package= "CodeGenerator" class="mux_h_template"
imports= "com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>
<% int xmc4Device = -1; %>
<% xmc4Device = ((app.getSoftwareId().substring(0,1).compareTo("4")==0)?1:0); %>

/**************************************************************************//**
 *
 * Copyright (C) 2011 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with
 * Infineon's microcontrollers.
 * This file can be freely distributed within development tools that are
 * supporting such microcontrollers.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon <Microcontroller name, step>                           **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** MODIFICATION DATE : Jan 22, 2014                                          **
**                                                                            **
*******************************************************************************/

/**
 * @file  MULTIPLEXER.h
 *
 * @brief This file contains all public data structures,enums and function
 *        prototypes.
 * 06 sep 2013 v1.0.36 Initial Version
 *                     Mirror Register Status check statements are updated.
 * 22 Jan 2014 v1.0.40 C++ macro inserted.
 *
 */

#ifndef _MULTIPLEXER_H_
#define _MULTIPLEXER_H_

#ifdef __cplusplus
extern "C" {
#endif

/* Defines	*/
<%if (xmc4Device==1){%>
/** Macro to write new value to the bits in Hibernate domain register */
#define WR_REGHIB(reg, mask, pos, val, pollmask) {  \
           while (SCU_GENERAL->MIRRSTS & (uint32_t)pollmask){}; \
	       reg = (((uint32_t)val << (uint32_t)pos) & (uint32_t)mask) | \
	       (reg & ((uint32_t)~((uint32_t)mask))); \
	    } 

           
/* VALUE : ON / OFF */
<% for (int i=0; i<8; i++) { %>
#define VALUE<%= i%> <%= i%>
<%} %>
<%} %>

/* ERU : ERU_xA signals	*/ 
<% for (int i=0; i<4; i++) { %>
#define SIGNAL_ERU_xA<%= i%> <%= i%>
<%} %>

/* ERU : ERU_xB signals	*/ 
<% for (int i=0; i<4; i++) { %>
#define SIGNAL_ERU_xB<%= i%> <%= i%>
<%} %>

/* ERU : TR signals	*/ 
<% for (int i=0; i<2; i++) { %>
#define SIGNAL_TR<%= i%> <%= i%>
<%} %>

/* ERU : TRx signals	*/ 
<% for (int i=0; i<4; i++) { %>
#define SIGNAL_TRx<%= i%> <%= i%>
<%} %>

/* ERU : ERS_ETL_FL signals	*/ 
<% for (int i=0; i<4; i++) { %>
#define SIGNAL_ERS_ETL_FL<%= i%> <%= i%>
<%} %>

/* ERU : ERU_OGU_y signals	*/ 
<% for (int i=0; i<4; i++) { %>
#define SIGNAL_ERU_OGU_y<%= i%> <%= i%>
<%} %>

/****************************************************************************************
 *  PORTS : The IOCR Register bit field PC split into 3 bit fields namely
 *  PCx_PCR, PCx_PO, PCx_PCR to support the Mux/User configuration based on 
 *  the functionality of the bit fields. For more details please refer the 
 *  Port visio file prepared by Infineon Technologies.
 ****************************************************************************************/
<% for (int i=0; i<=0; i=i+4) { %>
/* PORT_IOCR  =  Port x Input/Output Control Register */
<% for (int j=0; j<=3; j++) { %>
#define   PORT_IOCR_PC<%= j+i%>_PCR_Pos  	(<%= 3+(j*8)%>U)
#define   PORT_IOCR_PC<%= j+i%>_PCR_Msk  	(0x00000007U  << PORT_IOCR_PC<%= j+i%>_PCR_Pos)

#define   PORT_IOCR_PC<%= j+i%>_PO_Pos   	(<%= 6+(j*8)%>U)
#define   PORT_IOCR_PC<%= j+i%>_PO_Msk   	(0x00000001U  << PORT_IOCR_PC<%= j+i%>_PO_Pos)

#define   PORT_IOCR_PC<%= j+i%>_OE_Pos   	(<%= 7+(j*8)%>U)
#define   PORT_IOCR_PC<%= j+i%>_OE_Msk   	(0x00000001U  << PORT_IOCR_PC<%= j+i%>_OE_Pos)

<%}} %>

// IOCR_OE : INPUT / OUTPUT
<% for (int i=0; i<2; i++) { %>
#define PORT_IOCR_OE<%= i%> <%= i%>
<%} %>

// IOCR_PCR : PULLUP/PULLDOWN / ALT 
<% for (int i=0; i<8; i++) { %>
#define PORT_IOCR_PCR<%= i%> <%= i%>
<%} %>

// HWSEL_HW : HW0 / HW1
#define PORT_HWSEL_SW 0
<% for (int i=0; i<2; i++) { %>
#define PORT_HWSEL_HW<%= i%> <%= i+1 %>
<%} %>

// PDISC_PDIS : PDIS0 / PDIS1
<% for (int i=0; i<2; i++) { %>
#define PORT_PDISC_PDIS<%= i%> <%= i %>
<%} %>

<%if (xmc4Device==1){%> 
// HCU
#define   SCU_HIBERNATE_HDCR_HIBIO0SEL_PCR_Pos  	(16U)
#define   SCU_HIBERNATE_HDCR_HIBIO0SEL_PCR_Msk  	(0x00000007U  << SCU_HIBERNATE_HDCR_HIBIO0SEL_PCR_Pos)

#define   SCU_HIBERNATE_HDCR_HIBIO0SEL_OE_Pos  		(19U)
#define   SCU_HIBERNATE_HDCR_HIBIO0SEL_OE_Msk  		(0x00000001U  << SCU_HIBERNATE_HDCR_HIBIO0SEL_OE_Pos)

#define   SCU_HIBERNATE_HDCR_HIBIO1SEL_PCR_Pos  	(20U)
#define   SCU_HIBERNATE_HDCR_HIBIO1SEL_PCR_Msk  	(0x00000007U  << SCU_HIBERNATE_HDCR_HIBIO1SEL_PCR_Pos)

#define   SCU_HIBERNATE_HDCR_HIBIO1SEL_OE_Pos  		(23U)
#define   SCU_HIBERNATE_HDCR_HIBIO1SEL_OE_Msk  		(0x00000001U  << SCU_HIBERNATE_HDCR_HIBIO1SEL_OE_Pos)

//CAN
#define RXD_SIGNAL0 0 //RXDxA
#define RXD_SIGNAL1 1 //RXDxB
#define RXD_SIGNAL2 2 //RXDxC
#define RXD_SIGNAL3 3 //RXDxD
#define RXD_SIGNAL4 4 //RXDxE
#define RXD_SIGNAL5 5 //RXDxF
#define SRN0 0
#define SRN1 1
#define SRN2 2
#define SRN3 3
#define SRN4 4
#define SRN5 5
#define SRN6 6
#define SRN7 7
<%}%>

//POSIF
#define INSIGNAL0 0 //INxA
#define INSIGNAL1 1 //INxB
#define INSIGNAL2 2 //INxC
#define INSIGNAL3 3 //INxD
#define INSIGNAL4 4 //INxE
#define INSIGNAL5 5 //INxF
#define SET_1 1 //enable
#define SET_0 0 //disable
#define SR0 0
#define SR1 1

// CCU4 
// CC4yINS Input Selector Configuration
<% for (int i=0; i<16; i++) { %>
#define CCU4xINy<%= (char)(i + 65)%>  <%= i%> // CCU4xINy[<%=Character.toChars(65+i)%>]
<%} %>

// CCU8 
// CC8yINS Input Selector Configuration
<% for (int i=0; i<12; i++) { %>
#define CCU8xINy<%= (char)(i + 65)%>  <%= i%> // CCU8xINy[<%=Character.toChars(65+i)%>]
<%} %>
<% for (int i=12; i<16; i++) { %>
#define CCU8xINy<%= (char)(i + 65)%>  <%= i%> // CCU8xST<%=i-12%>
<%} %>

// CCUySRS Service Request Selector
<% for (int i=0; i<4; i++) { %>
#define CCU_SR<%= i%>  <%= i%> // CCU_SR<%=i%>
<%} %>

<%if (xmc4Device==1){%>
// Ethernet MAC

#define ETH_RXDxA 0 	// ETH0_RXDxA
#define ETH_RXDxB 1 	// ETH0_RXDxB
#define ETH_RXDxC 2 	// ETH0_RXDxC
#define ETH_RXDxD 3 	// ETH0_RXDxD

#define ETH_RMIIA 0 	// ETH_RMIIA
#define ETH_RMIIB 1 	// ETH_RMIIB
#define ETH_RMIIC 2 	// ETH_RMIIC
#define ETH_RMIID 3 	// ETH_RMIID

#define ETH_CRS_DVA 0 	// ETH_CRS_DVA
#define ETH_CRS_DVB 1 	// ETH_CRS_DVB
#define ETH_CRS_DVC 2 	// ETH_CRS_DVC
#define ETH_CRS_DVD 3 	// ETH_CRS_DVD

#define ETH_CRSA 0 	// ETH_CRSA
#define ETH_CRSB 1 	// ETH_CRSB
#define ETH_CRSC 2 	// ETH_CRSC
#define ETH_CRSD 3 	// ETH_CRSD

#define ETH_RXERA 0 	// ETH_RXERA
#define ETH_RXERB 1 	// ETH_RXERB
#define ETH_RXERC 2 	// ETH_RXERC
#define ETH_RXERD 3 	// ETH_RXERD

#define ETH_COLA 0 	// ETH_COLA
#define ETH_COLB 1 	// ETH_COLB
#define ETH_COLC 2 	// ETH_COLC
#define ETH_COLD 3 	// ETH_COLD

#define ETH_CLK_TXA 0 	// ETH_CLK_TXA
#define ETH_CLK_TXB 1 	// ETH_CLK_TXB
#define ETH_CLK_TXC 2 	// ETH_CLK_TXC
#define ETH_CLK_TXD 3 	// ETH_CLK_TXD

#define ETH_MDIOA 0 	// ETH_MDIOA
#define ETH_MDIOB 1 	// ETH_MDIOB
#define ETH_MDIOC 2 	// ETH_MDIOC
#define ETH_MDIOD 3 	// ETH_MDIOD
<%}%>

// VADC
#define VADC_G_QCTRL0_XTWC_XTSEL_Msk        (0x000000EFU  << VADC_G_QCTRL0_XTSEL_Pos)
#define VADC_G_QCTRL0_GTWC_GTSEL_Msk        (0x0000008FU  << VADC_G_QCTRL0_GTSEL_Pos)
#define VADC_G_ASCTRL_XTWC_XTSEL_Msk        (0x000000EFU  << VADC_G_ASCTRL_XTSEL_Pos)
#define VADC_G_ASCTRL_GTWC_GTSEL_Msk        (0x0000008FU  << VADC_G_ASCTRL_GTSEL_Pos)
#define VADC_BRSCTRL_XTWC_XTSEL_Msk        (0x000000EFU  << VADC_BRSCTRL_XTSEL_Pos)
#define VADC_BRSCTRL_GTWC_GTSEL_Msk        (0x0000008FU  << VADC_BRSCTRL_GTSEL_Pos)

<%if (xmc4Device==1){%>
// Delta-Sigma Demodulator (DSD)

/* DSD_CH_DICFGx  =  Demodulator Input Configuration Register 0*/

#define   DSD_CH_DICFG_DSRCSEL_Pos  	(1U)
#define   DSD_CH_DICFG_DSRCSEL_Msk  	(0x00000007U  << DSD_CH_DICFG_DSRCSEL_Pos)

#define DSD_CH_DICFG_DSWC_DSRCSEL_Msk      (0x0000008FU  << DSD_CH_DICFG_DSRC_Pos)
#define DSD_CH_DICFG_SCWC_STROBE_CSRC_Msk  (0x000080FFU  << DSD_CH_DICFG_CSRC_Pos)
#define DSD_CH_DICFG_TRWC_TRSEL_Msk        (0x000000FFU  << DSD_CH_DICFG_ITRMODE_Pos)

// Demodulator Input Configuration Register x
#define DINxA	    1 // input A
#define DINxB	    2 // input B

#define MCLKxA 1  // MCLKxA
#define MCLKxB 2  // MCLKxB
#define MCLKxINTERNAL 15  // MCLK_INTERNAL
<% for (int i=0; i<4; i++) { %>
#define ITRx<%= (char)(i+65)%>  <%= i%> // Integration trigger, channel x, input <%= (char)(i+65)%>
<%} %>

// Rectification Configuration Register x
<% for (int i=0; i<4; i++) { %>
#define SSRC<%= i%>  <%= i%> // SSRC<%=i%>
<%} %>
<%}%>

/* USIC : FIFO DPTR & SIZE MASK and POS Values */ 
#define   USIC_CH_TBCTR_DPTRSIZE_Pos  	(0U)
#define   USIC_CH_TBCTR_DPTRSIZE_Msk  	(0x0700003FU << USIC_CH_TBCTR_DPTRSIZE_Pos)

#define   USIC_CH_RBCTR_DPTRSIZE_Pos  	(0U)
#define   USIC_CH_RBCTR_DPTRSIZE_Msk  	(0x0700003FU << USIC_CH_RBCTR_DPTRSIZE_Pos)
    
	

// Initializes Multiplexer configurations
void DAVE_MUX_Init(void);
void DAVE_MUX_PreInit(void);

#ifdef __cplusplus
}
#endif

#endif  // ifndef _MULTIPLEXER_H_
