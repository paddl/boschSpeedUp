<%@ jet package="CodeGenerator" class="clk002c_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>
<% String AppBaseuri = "app/clk002/0";%>
<% String MappedUri = null; %>
/*CODE_BLOCK_BEGIN[CLK002.c]*/

/*******************************************************************************
 Copyright (c) 2013, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC1xxx Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Oct 30, 2013                                           **
**                                                                            **
*******************************************************************************/
/* Revision History
 *****************************************************************************
 *
*/
/**
 * @file   CLK002.c
 *
 * @brief  SCU_Clock_CLK002 App
 *         
 *  CLK002 App is a singleton app which is used by all applications to configure 
 *  the PLL as well as enable the Clock of Peripheral Units.
 
 * Revision History
 * 18 Jan 2013   v1.0.0  Initial Version
 * 04 Sep 2013   v1.0.4  Added support for XMC1201, XMC1202, XMC1301 devices
 * 30 Oct 2013   v1.0.6  SystemCoreClockUpdate API called at end of CLK002_Init API
 */

/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** Yogesh       App Developer                                                 **
*******************************************************************************/

/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
/** Inclusion of header file */
#include <DAVE3.h>

/*******************************************************************************
**  0                    Private Macro Definitions                             **
*******************************************************************************/
/* Master Clock setup parameters */  
<%int pclksel = app.getIntegerValue(AppBaseuri + "/clk_uri/clkcr/pclksel");%>
<%int idiv = app.getIntegerValue(AppBaseuri + "/clk_uri/clkcr/idiv");%>
<%int fdiv =app.getIntegerValue(AppBaseuri + "/clk_uri/clkcr/fdiv");%>
#define   CLK002_CLKCR_PCLKSEL           (<%=pclksel%>U)
#define   CLK002_CLKCR_IDIV              (<%=idiv%>U)      
#define   CLK002_CLKCR_FDIV              (<%=fdiv%>U)    
#define   CLK002_DIRECT_ACCESS_ALLOW     (0xC0U)
#define   CLK002_DIRECT_ACCESS_DISALLOW  (0xC3U)


/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/

/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/
static void     CLK002_lFrequencyUpScaling(void);
static void     CLK002_lFrequencyDownScaling(void);
static void     CLK002_lDivUpdate(void);

/*******************************************************************************
**                      Extern Declarations                                   **
*******************************************************************************/
extern void SystemCoreClockUpdate(void);

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/
/**
  * @brief  Function to initialise the Clock Tree based on UI configuration.
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;

    /* Update the clock variable */
    SystemCoreClockUpdate();
}

/**
* @brief  This routine is called by CMSIS startup to find out if clock tree
*         setup should be done by it.This routine is WEAKLY defined in CStart.
*         In the absence of clock app, the weak definition takes precedence
*         which always permits clock tree setup by CStart. When clock app is
*         defined, this function overrides the CStart definition. Clock tree
*         setup is launched and upon completion, control is ceded back to
*         CStart.CStart abstains from setting up clock tree and instead
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
}
/*******************************************************************************
**                 Private Function definition:
*******************************************************************************/

/**
  * @brief  Function to update idiv in steps of quard.
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 lTargetidiv = CLK002_CLKCR_IDIV;

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
  SCU_CLK->CLKCR = lCLKCR;

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
  {
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
  {
    CLK002_lFrequencyDownScaling();
  }
  else
   {
     CLK002_lFrequencyUpScaling();
   }

}

/**
  * @brief  Function to provide frequency up scaling.
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
  TargetIdiv = CLK002_CLKCR_IDIV;
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
        SCU_CLK->CLKCR = lCLKCR;

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
        {
            ;
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
        SCU_CLK->CLKCR = lCLKCR;
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
        {
            ;
        }
        break;
    }

  }

}

/**
  * @brief  Function to provide frequency up scaling.
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
    TargetIdiv = CLK002_CLKCR_IDIV;
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
            SCU_CLK->CLKCR = lCLKCR;
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
            {
                ;
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
            SCU_CLK->CLKCR = lCLKCR;
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
            {
                ;
            }
             break;
        }

	  }
}

/*CODE_BLOCK_END*/
