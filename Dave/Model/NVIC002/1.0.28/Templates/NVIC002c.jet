<%@ jet package="CodeGenerator" class="NVIC002Template" 
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[NVIC002.c]*/
<% String AppBaseuri = "app/nvic002/";%>
<% String MappedUri = null; %>
<% String NodeID = null; %>

/*******************************************************************************
 Copyright (c) 2011, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series   			                  **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : March 25 , 2013                                        **
**                                                                            **
*******************************************************************************/
/**
 * @file   NVIC002.c
 *
 * @App    Version NVIC002 <<%= app.getAppVersion(AppBaseuri)%>>
 *
 * @brief  NVIC_Empty_Handler_NVIC002 App
 *         
 *  NVIC002 App is used by top level Apps when a user defined interrupt handler 
 *  needs to be reassigned to the actual mapped interrupt node
 *	(based on App connectivity).
 *
 *	The use case is as follows: 
 *	Interrupt handler has to be provided by the user and function name is defined
 *  by user in the App GUI. 
 *
 *	NVIC002 App creates a header file (NVIC002.h) with a #define to reassign the
 *  interrupt function name defined by the user to the fixed name based on the
 *	node number.
 *	Note: 
 *	Preemption priority for NVIC  interrupt is fixed to 64.
 *	The App GUI provides lowest priority level as default value.      
 *	It is also possible for top level App to be self-contained(by consuming NVIC
 *  node directly instead of requiring an NVIC App for defining the interrupt
 *  handler.)
 *
 */

/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** AKW      App Developer                                                   **
*******************************************************************************/
/* Revision History	
 * 18-Feb-13 V1.0.12  1. Porting to XMC1000 Devices.
 *                    2. Conditional Codes are added to support both XMC1000 
 *                    and XMC4000 devices.
 *                    3. Debug related dummy Macros are added. 
 * 25-Mar-13 V1.0.14  1. Interrupt mapping bug fixing. 
 *                    2. Removed Array of irq_numbers. 
 */


/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
/* Inclusion of header file */
#include <DAVE3.h>

<% String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null; 
   boolean DBGApp = false;   
   apps=(ArrayList<String>)(app.getApps());
   for (int k = 0; k < apps.size(); k++) {
   TempApps = apps.get(k);
// if(app.isAppInitProvider(apps.get(k)) == true) {
   MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
  TempLowerApps = MyAppName.toLowerCase();
   if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}   
 //  }  
  } %>

<% if (!DBGApp) { %>  
/*****************************************************************************
              DUMMY DEFINTIONS OF DEBUG LOG MACROS
*****************************************************************************/
/*These definitions are included here to avoid compilation errors,
 since the DBG002 app is not part of the project. All the macros are defined
 as empty*/ 
#ifndef _DBG002_H_

#define DBG002_RegisterCallBack(A,B,C)
#define DBG002_I(e) 
#define DBG002_IG(e,g) 
#define DBG002_IH(e,h) 
#define DBG002_IP(e,p) 
#define DBG002_IGH(e,g,h) 
#define DBG002_IGP(e,g,p) 
#define DBG002_IHP(e,h,p) 
#define DBG002_IGHP(e,g,h,p) 
#define DBG002_N(e) 
#define DBG002_NG(e,g) 
#define DBG002_NH(e,h) 
#define DBG002_NP(e,p) 
#define DBG002_NGH(e,g,h) 
#define DBG002_NGP(e,g,p) 
#define DBG002_NHP(e,h,p) 
#define DBG002_NGHP(e,g,h,p) 
#define DBG002_ID(e) 
#define DBG002_IS(e) 
#define DBG002_ISG(e,g) 
#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
#define DBG002_CRITICAL(groupid,messageid,length,value)
#define DBG002_ERROR(groupid,messageid,length,value)
#define DBG002_WARNING(groupid,messageid,length,value)
#define DBG002_INFO(groupid,messageid,length,value)
#define DBG002_TRACE(groupid,messageid,length,value)
#define DBG002_FUNCTION_ENTRY(GID, Status) 
#define DBG002_FUNCTION_EXIT(GID, Status) 

#endif/* End of defintions of dummy Debug Log macros*/
<% } %>                  

/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/

<% int IsTIMM1Device = -1; %>
<% IsTIMM1Device = ((app.getSoftwareId().substring(0,1).compareTo("1")==0)?1:0); %>
/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/
#define APP_GID DBG002_GID_NVIC002
/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/

/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/
/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/

/**  Function to initialize the NVIC node parameters based on 
 *  UI configuration.
 */
void NVIC002_Init(void)
{
  /*<<<DD_NVIC002_API_1>>>*/  
   DBG002_FUNCTION_ENTRY(APP_GID,NVIC002_FUNC_ENTRY);	
  <% String appInst  = null; %>
  <% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/nvic002/"));
  for (String appIns : appsList ) {
  appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
  <% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/nvicnode"); %>
  <% if((MappedUri != null) && (MappedUri != "")) { %>
  <% NodeID = MappedUri.substring(MappedUri.lastIndexOf('/')+ 1 );
  int Offset = Integer.parseInt(NodeID); 
  int Priority = 0;
  int SubPriority=0;
  if(IsTIMM1Device ==1)
  {
  Priority = app.getIntegerValue(AppBaseuri + appInst +"/NVIC002_TIMMirwInterruptPriority");
  }
  else
  {
  Priority = app.getIntegerValue(AppBaseuri + appInst +"/NVIC002_irwInterruptPriority");
  SubPriority = app.getIntegerValue(AppBaseuri + appInst +"/NVIC002_irwInterruptSubPriority");
  }
 
  int IntEnable = app.getIntegerValue(AppBaseuri + appInst +"/NVIC002_erwEnableInt/0");%>
  /* Set Interrupt Priority for NVIC <%=NodeID%> Node App Instance <%=appInst%>  */
  <% if(IsTIMM1Device ==1) %>
  <%{ %>
   NVIC_SetPriority((IRQn_Type)<%=NodeID%>, <%=Priority%>);
  <%} %>
<% else %>
  <%{ %>
   NVIC_SetPriority((IRQn_Type)<%=NodeID%>, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),<%=Priority%>,<%=SubPriority%>));
   <%} %>
  <%   if(IntEnable ==1) { %>   
  /* Enable Interrupt */
   NVIC_EnableIRQ((IRQn_Type)<%=NodeID%>);
  <% }}} %>
   DBG002_FUNCTION_EXIT(APP_GID,NVIC002_FUNC_EXIT);
}

/**  Function to enable Interrupt
 * 
 */
void NVIC002_EnableIRQ(const NVIC002_HandleType* Handle)
{
  /*<<<DD_NVIC002_API_2>>>*/
   DBG002_FUNCTION_ENTRY(APP_GID,NVIC002_FUNC_ENTRY);
  /* Enable Interrupt */
   NVIC_EnableIRQ((IRQn_Type)Handle->NodeID);
   DBG002_FUNCTION_EXIT(APP_GID,NVIC002_FUNC_EXIT);
	
}

/**  Function to disable Interrupt
 * 
 */
void NVIC002_DisableIRQ(const NVIC002_HandleType* Handle)
{
  /*<<<DD_NVIC002_API_3>>>*/
  DBG002_FUNCTION_ENTRY(APP_GID,NVIC002_FUNC_ENTRY);
  /* Disable Interrupt */
  NVIC_DisableIRQ((IRQn_Type)Handle->NodeID);
  DBG002_FUNCTION_EXIT(APP_GID,NVIC002_FUNC_EXIT);
}

/*CODE_BLOCK_END*/
