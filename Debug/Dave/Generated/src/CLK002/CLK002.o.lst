   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CLK002.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CLK002_Init,"ax",%progbits
  18              		.align	2
  19              		.global	CLK002_Init
  20              		.code	16
  21              		.thumb_func
  23              	CLK002_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/CLK002/CLK002.c"
   1:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
   2:../Dave/Generated/src/CLK002/CLK002.c **** **  DAVE App Name : CLK002       App Version: 1.0.8               
   3:../Dave/Generated/src/CLK002/CLK002.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/CLK002/CLK002.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
   6:../Dave/Generated/src/CLK002/CLK002.c **** 
   7:../Dave/Generated/src/CLK002/CLK002.c **** /*CODE_BLOCK_BEGIN[CLK002.c]*/
   8:../Dave/Generated/src/CLK002/CLK002.c **** 
   9:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  10:../Dave/Generated/src/CLK002/CLK002.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  11:../Dave/Generated/src/CLK002/CLK002.c ****  All rights reserved.                                                         **
  12:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  13:../Dave/Generated/src/CLK002/CLK002.c ****  Redistribution and use in source and binary forms, with or without           **
  14:../Dave/Generated/src/CLK002/CLK002.c ****  modification,are permitted provided that the following conditions are met:   **
  15:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  16:../Dave/Generated/src/CLK002/CLK002.c ****  *Redistributions of source code must retain the above copyright notice,      **
  17:../Dave/Generated/src/CLK002/CLK002.c ****  this list of conditions and the following disclaimer.                        **
  18:../Dave/Generated/src/CLK002/CLK002.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  19:../Dave/Generated/src/CLK002/CLK002.c ****  this list of conditions and the following disclaimer in the documentation    **
  20:../Dave/Generated/src/CLK002/CLK002.c ****  and/or other materials provided with the distribution.                       **
  21:../Dave/Generated/src/CLK002/CLK002.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  22:../Dave/Generated/src/CLK002/CLK002.c ****  may be used to endorse or promote products derived from this software without** 
  23:../Dave/Generated/src/CLK002/CLK002.c ****  specific prior written permission.                                           **
  24:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  25:../Dave/Generated/src/CLK002/CLK002.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  26:../Dave/Generated/src/CLK002/CLK002.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  27:../Dave/Generated/src/CLK002/CLK002.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  28:../Dave/Generated/src/CLK002/CLK002.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  29:../Dave/Generated/src/CLK002/CLK002.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  30:../Dave/Generated/src/CLK002/CLK002.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  31:../Dave/Generated/src/CLK002/CLK002.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  32:../Dave/Generated/src/CLK002/CLK002.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  33:../Dave/Generated/src/CLK002/CLK002.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  34:../Dave/Generated/src/CLK002/CLK002.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  35:../Dave/Generated/src/CLK002/CLK002.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  36:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  37:../Dave/Generated/src/CLK002/CLK002.c ****  To improve the quality of the software, users are encouraged to share        **
  38:../Dave/Generated/src/CLK002/CLK002.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  39:../Dave/Generated/src/CLK002/CLK002.c ****  dave@infineon.com).                                                          **
  40:../Dave/Generated/src/CLK002/CLK002.c ****                                                                               **
  41:../Dave/Generated/src/CLK002/CLK002.c **** ********************************************************************************
  42:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  43:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  44:../Dave/Generated/src/CLK002/CLK002.c **** ** PLATFORM : Infineon XMC1xxx Series                                         **
  45:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  46:../Dave/Generated/src/CLK002/CLK002.c **** ** COMPILER : Compiler Independent                                            **
  47:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  48:../Dave/Generated/src/CLK002/CLK002.c **** ** AUTHOR   : App Developer                                                   **
  49:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  50:../Dave/Generated/src/CLK002/CLK002.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  51:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  52:../Dave/Generated/src/CLK002/CLK002.c **** ** MODIFICATION DATE : Oct 30, 2013                                           **
  53:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  54:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  55:../Dave/Generated/src/CLK002/CLK002.c **** /* Revision History
  56:../Dave/Generated/src/CLK002/CLK002.c ****  *****************************************************************************
  57:../Dave/Generated/src/CLK002/CLK002.c ****  *
  58:../Dave/Generated/src/CLK002/CLK002.c **** */
  59:../Dave/Generated/src/CLK002/CLK002.c **** /**
  60:../Dave/Generated/src/CLK002/CLK002.c ****  * @file   CLK002.c
  61:../Dave/Generated/src/CLK002/CLK002.c ****  *
  62:../Dave/Generated/src/CLK002/CLK002.c ****  * @brief  SCU_Clock_CLK002 App
  63:../Dave/Generated/src/CLK002/CLK002.c ****  *         
  64:../Dave/Generated/src/CLK002/CLK002.c ****  *  CLK002 App is a singleton app which is used by all applications to configure 
  65:../Dave/Generated/src/CLK002/CLK002.c ****  *  the PLL as well as enable the Clock of Peripheral Units.
  66:../Dave/Generated/src/CLK002/CLK002.c ****  
  67:../Dave/Generated/src/CLK002/CLK002.c ****  * Revision History
  68:../Dave/Generated/src/CLK002/CLK002.c ****  * 18 Jan 2013   v1.0.0  Initial Version
  69:../Dave/Generated/src/CLK002/CLK002.c ****  * 04 Sep 2013   v1.0.4  Added support for XMC1201, XMC1202, XMC1301 devices
  70:../Dave/Generated/src/CLK002/CLK002.c ****  * 30 Oct 2013   v1.0.6  SystemCoreClockUpdate API called at end of CLK002_Init API
  71:../Dave/Generated/src/CLK002/CLK002.c ****  */
  72:../Dave/Generated/src/CLK002/CLK002.c **** 
  73:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  74:../Dave/Generated/src/CLK002/CLK002.c **** **                      Author(s) Identity                                    **
  75:../Dave/Generated/src/CLK002/CLK002.c **** ********************************************************************************
  76:../Dave/Generated/src/CLK002/CLK002.c **** **                                                                            **
  77:../Dave/Generated/src/CLK002/CLK002.c **** ** Initials     Name                                                          **
  78:../Dave/Generated/src/CLK002/CLK002.c **** ** ---------------------------------------------------------------------------**
  79:../Dave/Generated/src/CLK002/CLK002.c **** ** Yogesh       App Developer                                                 **
  80:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  81:../Dave/Generated/src/CLK002/CLK002.c **** 
  82:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  83:../Dave/Generated/src/CLK002/CLK002.c ****  ** INCLUDE FILES                                                             **
  84:../Dave/Generated/src/CLK002/CLK002.c ****  ******************************************************************************/
  85:../Dave/Generated/src/CLK002/CLK002.c **** /** Inclusion of header file */
  86:../Dave/Generated/src/CLK002/CLK002.c **** #include <DAVE3.h>
  87:../Dave/Generated/src/CLK002/CLK002.c **** 
  88:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
  89:../Dave/Generated/src/CLK002/CLK002.c **** **  0                    Private Macro Definitions                             **
  90:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
  91:../Dave/Generated/src/CLK002/CLK002.c **** /* Master Clock setup parameters */  
  92:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_PCLKSEL           (0U)
  93:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_IDIV              (1U)      
  94:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_CLKCR_FDIV              (0U)    
  95:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_DIRECT_ACCESS_ALLOW     (0xC0U)
  96:../Dave/Generated/src/CLK002/CLK002.c **** #define   CLK002_DIRECT_ACCESS_DISALLOW  (0xC3U)
  97:../Dave/Generated/src/CLK002/CLK002.c **** 
  98:../Dave/Generated/src/CLK002/CLK002.c **** 
  99:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 100:../Dave/Generated/src/CLK002/CLK002.c **** **                      Private Type Definitions                              **
 101:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 102:../Dave/Generated/src/CLK002/CLK002.c **** 
 103:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 104:../Dave/Generated/src/CLK002/CLK002.c **** **                 Private Function Declarations:
 105:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 106:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyUpScaling(void);
 107:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyDownScaling(void);
 108:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lDivUpdate(void);
 109:../Dave/Generated/src/CLK002/CLK002.c **** 
 110:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 111:../Dave/Generated/src/CLK002/CLK002.c **** **                      Extern Declarations                                   **
 112:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 113:../Dave/Generated/src/CLK002/CLK002.c **** extern void SystemCoreClockUpdate(void);
 114:../Dave/Generated/src/CLK002/CLK002.c **** 
 115:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 116:../Dave/Generated/src/CLK002/CLK002.c **** **                      Public Function Definitions                           **
 117:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 118:../Dave/Generated/src/CLK002/CLK002.c **** /**
 119:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to initialise the Clock Tree based on UI configuration.
 120:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 121:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 122:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 123:../Dave/Generated/src/CLK002/CLK002.c ****   */
 124:../Dave/Generated/src/CLK002/CLK002.c **** void CLK002_Init(void)
 125:../Dave/Generated/src/CLK002/CLK002.c **** {
  26              		.loc 1 125 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              	.LCFI1:
  35              		.cfi_def_cfa_register 7
 126:../Dave/Generated/src/CLK002/CLK002.c ****     /* Open the lock that protects privileged bits. */
 127:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
  36              		.loc 1 127 0
  37 0004 0A4B     		ldr	r3, .L3
  38 0006 C022     		mov	r2, #192
  39 0008 5A62     		str	r2, [r3, #36]
 128:../Dave/Generated/src/CLK002/CLK002.c **** 
 129:../Dave/Generated/src/CLK002/CLK002.c ****     /* Loop until protection is removed. */
 130:../Dave/Generated/src/CLK002/CLK002.c ****     while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
  40              		.loc 1 130 0
  41 000a C046     		mov	r8, r8
  42              	.L2:
  43              		.loc 1 130 0 is_stmt 0 discriminator 1
  44 000c 084B     		ldr	r3, .L3
  45 000e 5A6A     		ldr	r2, [r3, #36]
  46 0010 0423     		mov	r3, #4
  47 0012 1340     		and	r3, r2
  48 0014 FAD1     		bne	.L2
 131:../Dave/Generated/src/CLK002/CLK002.c ****     {
 132:../Dave/Generated/src/CLK002/CLK002.c **** 	    ;
 133:../Dave/Generated/src/CLK002/CLK002.c ****     }
 134:../Dave/Generated/src/CLK002/CLK002.c **** 
 135:../Dave/Generated/src/CLK002/CLK002.c ****     /* Update PCLK selection mux. */
 136:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
  49              		.loc 1 136 0 is_stmt 1
  50 0016 074B     		ldr	r3, .L3+4
  51 0018 064A     		ldr	r2, .L3+4
  52 001a 1268     		ldr	r2, [r2]
  53 001c 1A60     		str	r2, [r3]
 137:../Dave/Generated/src/CLK002/CLK002.c **** 	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);
 138:../Dave/Generated/src/CLK002/CLK002.c **** 
 139:../Dave/Generated/src/CLK002/CLK002.c ****     CLK002_lDivUpdate();
  54              		.loc 1 139 0
  55 001e FFF7FEFF 		bl	CLK002_lDivUpdate
 140:../Dave/Generated/src/CLK002/CLK002.c **** 
 141:../Dave/Generated/src/CLK002/CLK002.c ****     /*Close the lock opened above. */
 142:../Dave/Generated/src/CLK002/CLK002.c ****     SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
  56              		.loc 1 142 0
  57 0022 034B     		ldr	r3, .L3
  58 0024 C322     		mov	r2, #195
  59 0026 5A62     		str	r2, [r3, #36]
 143:../Dave/Generated/src/CLK002/CLK002.c **** 
 144:../Dave/Generated/src/CLK002/CLK002.c ****     /* Update the clock variable */
 145:../Dave/Generated/src/CLK002/CLK002.c ****     SystemCoreClockUpdate();
  60              		.loc 1 145 0
  61 0028 FFF7FEFF 		bl	SystemCoreClockUpdate
 146:../Dave/Generated/src/CLK002/CLK002.c **** }
  62              		.loc 1 146 0
  63 002c BD46     		mov	sp, r7
  64              		@ sp needed for prologue
  65 002e 80BD     		pop	{r7, pc}
  66              	.L4:
  67              		.align	2
  68              	.L3:
  69 0030 00000140 		.word	1073807360
  70 0034 00030140 		.word	1073808128
  71              		.cfi_endproc
  72              	.LFE38:
  74              		.section	.text.AllowClkInitByStartup,"ax",%progbits
  75              		.align	2
  76              		.global	AllowClkInitByStartup
  77              		.code	16
  78              		.thumb_func
  80              	AllowClkInitByStartup:
  81              	.LFB39:
 147:../Dave/Generated/src/CLK002/CLK002.c **** 
 148:../Dave/Generated/src/CLK002/CLK002.c **** /**
 149:../Dave/Generated/src/CLK002/CLK002.c **** * @brief  This routine is called by CMSIS startup to find out if clock tree
 150:../Dave/Generated/src/CLK002/CLK002.c **** *         setup should be done by it.This routine is WEAKLY defined in CStart.
 151:../Dave/Generated/src/CLK002/CLK002.c **** *         In the absence of clock app, the weak definition takes precedence
 152:../Dave/Generated/src/CLK002/CLK002.c **** *         which always permits clock tree setup by CStart. When clock app is
 153:../Dave/Generated/src/CLK002/CLK002.c **** *         defined, this function overrides the CStart definition. Clock tree
 154:../Dave/Generated/src/CLK002/CLK002.c **** *         setup is launched and upon completion, control is ceded back to
 155:../Dave/Generated/src/CLK002/CLK002.c **** *         CStart.CStart abstains from setting up clock tree and instead
 156:../Dave/Generated/src/CLK002/CLK002.c **** *         proceeds with program  loading. Return 0 to disallow CStart from
 157:../Dave/Generated/src/CLK002/CLK002.c **** *         performing clock tree setup.
 158:../Dave/Generated/src/CLK002/CLK002.c **** */
 159:../Dave/Generated/src/CLK002/CLK002.c **** 
 160:../Dave/Generated/src/CLK002/CLK002.c **** uint32_t AllowClkInitByStartup(void)
 161:../Dave/Generated/src/CLK002/CLK002.c **** {
  82              		.loc 1 161 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI2:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 00AF     		add	r7, sp, #0
  90              	.LCFI3:
  91              		.cfi_def_cfa_register 7
 162:../Dave/Generated/src/CLK002/CLK002.c ****     /* Return FALSE - Do not allow any initialisation by startup code. */
 163:../Dave/Generated/src/CLK002/CLK002.c ****     return ((uint32_t)0);
  92              		.loc 1 163 0
  93 0004 0023     		mov	r3, #0
 164:../Dave/Generated/src/CLK002/CLK002.c **** }
  94              		.loc 1 164 0
  95 0006 181C     		mov	r0, r3
  96 0008 BD46     		mov	sp, r7
  97              		@ sp needed for prologue
  98 000a 80BD     		pop	{r7, pc}
  99              		.cfi_endproc
 100              	.LFE39:
 102              		.section	.text.CLK002_lDivUpdate,"ax",%progbits
 103              		.align	2
 104              		.code	16
 105              		.thumb_func
 107              	CLK002_lDivUpdate:
 108              	.LFB40:
 165:../Dave/Generated/src/CLK002/CLK002.c **** /*******************************************************************************
 166:../Dave/Generated/src/CLK002/CLK002.c **** **                 Private Function definition:
 167:../Dave/Generated/src/CLK002/CLK002.c **** *******************************************************************************/
 168:../Dave/Generated/src/CLK002/CLK002.c **** 
 169:../Dave/Generated/src/CLK002/CLK002.c **** /**
 170:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to update idiv in steps of quard.
 171:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 172:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 173:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 174:../Dave/Generated/src/CLK002/CLK002.c ****   */
 175:../Dave/Generated/src/CLK002/CLK002.c **** static void CLK002_lDivUpdate(void)
 176:../Dave/Generated/src/CLK002/CLK002.c **** {
 109              		.loc 1 176 0
 110              		.cfi_startproc
 111 0000 80B5     		push	{r7, lr}
 112              	.LCFI4:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 7, -8
 115              		.cfi_offset 14, -4
 116 0002 84B0     		sub	sp, sp, #16
 117              	.LCFI5:
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              	.LCFI6:
 121              		.cfi_def_cfa_register 7
 177:../Dave/Generated/src/CLK002/CLK002.c ****  /*  Find out current and target value of idiv */
 178:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
 122              		.loc 1 178 0
 123 0006 0023     		mov	r3, #0
 124 0008 FB60     		str	r3, [r7, #12]
 179:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
 125              		.loc 1 179 0
 126 000a 0023     		mov	r3, #0
 127 000c BB60     		str	r3, [r7, #8]
 180:../Dave/Generated/src/CLK002/CLK002.c ****  uint32_t lCLKCR;
 181:../Dave/Generated/src/CLK002/CLK002.c ****  lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 128              		.loc 1 181 0
 129 000e 184B     		ldr	r3, .L11
 130 0010 1A68     		ldr	r2, [r3]
 131 0012 FF23     		mov	r3, #255
 132 0014 1B02     		lsl	r3, r3, #8
 133 0016 1340     		and	r3, r2
 134 0018 1B0A     		lsr	r3, r3, #8
 135 001a FB60     		str	r3, [r7, #12]
 182:../Dave/Generated/src/CLK002/CLK002.c ****  lTargetidiv = CLK002_CLKCR_IDIV;
 136              		.loc 1 182 0
 137 001c 0123     		mov	r3, #1
 138 001e BB60     		str	r3, [r7, #8]
 183:../Dave/Generated/src/CLK002/CLK002.c **** 
 184:../Dave/Generated/src/CLK002/CLK002.c ****  /* Update FDIV here, unconditionally. */
 185:../Dave/Generated/src/CLK002/CLK002.c **** 
 186:../Dave/Generated/src/CLK002/CLK002.c ****   lCLKCR = SCU_CLK->CLKCR;
 139              		.loc 1 186 0
 140 0020 134B     		ldr	r3, .L11
 141 0022 1B68     		ldr	r3, [r3]
 142 0024 7B60     		str	r3, [r7, #4]
 187:../Dave/Generated/src/CLK002/CLK002.c ****   WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
 143              		.loc 1 187 0
 144 0026 7B68     		ldr	r3, [r7, #4]
 145 0028 FF22     		mov	r2, #255
 146 002a 9343     		bic	r3, r2
 147 002c 7B60     		str	r3, [r7, #4]
 188:../Dave/Generated/src/CLK002/CLK002.c ****   SCU_CLK->CLKCR = lCLKCR;
 148              		.loc 1 188 0
 149 002e 104B     		ldr	r3, .L11
 150 0030 7A68     		ldr	r2, [r7, #4]
 151 0032 1A60     		str	r2, [r3]
 189:../Dave/Generated/src/CLK002/CLK002.c **** 
 190:../Dave/Generated/src/CLK002/CLK002.c ****      /* Delay, till frequency stable, appox. 15us. */
 191:../Dave/Generated/src/CLK002/CLK002.c **** 
 192:../Dave/Generated/src/CLK002/CLK002.c **** 
 193:../Dave/Generated/src/CLK002/CLK002.c ****   WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 152              		.loc 1 193 0
 153 0034 0E4B     		ldr	r3, .L11
 154 0036 0E4A     		ldr	r2, .L11
 155 0038 1268     		ldr	r2, [r2]
 156 003a 0E49     		ldr	r1, .L11+4
 157 003c 0A43     		orr	r2, r1
 158 003e 1A60     		str	r2, [r3]
 194:../Dave/Generated/src/CLK002/CLK002.c ****   while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 159              		.loc 1 194 0
 160 0040 C046     		mov	r8, r8
 161              	.L8:
 162              		.loc 1 194 0 is_stmt 0 discriminator 1
 163 0042 0B4B     		ldr	r3, .L11
 164 0044 1A68     		ldr	r2, [r3]
 165 0046 8023     		mov	r3, #128
 166 0048 DB05     		lsl	r3, r3, #23
 167 004a 1340     		and	r3, r2
 168 004c F9D1     		bne	.L8
 195:../Dave/Generated/src/CLK002/CLK002.c ****   {
 196:../Dave/Generated/src/CLK002/CLK002.c ****     ;
 197:../Dave/Generated/src/CLK002/CLK002.c ****   }
 198:../Dave/Generated/src/CLK002/CLK002.c **** 
 199:../Dave/Generated/src/CLK002/CLK002.c **** 
 200:../Dave/Generated/src/CLK002/CLK002.c ****     /* Find out current value of direction in which idiv has to update. */
 201:../Dave/Generated/src/CLK002/CLK002.c ****  if (lCurrIdiv==lTargetidiv)
 169              		.loc 1 201 0 is_stmt 1
 170 004e FA68     		ldr	r2, [r7, #12]
 171 0050 BB68     		ldr	r3, [r7, #8]
 172 0052 9A42     		cmp	r2, r3
 173 0054 08D0     		beq	.L7
 202:../Dave/Generated/src/CLK002/CLK002.c ****   {
 203:../Dave/Generated/src/CLK002/CLK002.c ****    /*No change in IDIV. */
 204:../Dave/Generated/src/CLK002/CLK002.c ****   }
 205:../Dave/Generated/src/CLK002/CLK002.c ****  else if(lCurrIdiv < lTargetidiv)
 174              		.loc 1 205 0
 175 0056 FA68     		ldr	r2, [r7, #12]
 176 0058 BB68     		ldr	r3, [r7, #8]
 177 005a 9A42     		cmp	r2, r3
 178 005c 02D2     		bcs	.L10
 206:../Dave/Generated/src/CLK002/CLK002.c ****   {
 207:../Dave/Generated/src/CLK002/CLK002.c ****     CLK002_lFrequencyDownScaling();
 179              		.loc 1 207 0
 180 005e FFF7FEFF 		bl	CLK002_lFrequencyDownScaling
 181 0062 01E0     		b	.L7
 182              	.L10:
 208:../Dave/Generated/src/CLK002/CLK002.c ****   }
 209:../Dave/Generated/src/CLK002/CLK002.c ****   else
 210:../Dave/Generated/src/CLK002/CLK002.c ****    {
 211:../Dave/Generated/src/CLK002/CLK002.c ****      CLK002_lFrequencyUpScaling();
 183              		.loc 1 211 0
 184 0064 FFF7FEFF 		bl	CLK002_lFrequencyUpScaling
 185              	.L7:
 212:../Dave/Generated/src/CLK002/CLK002.c ****    }
 213:../Dave/Generated/src/CLK002/CLK002.c **** 
 214:../Dave/Generated/src/CLK002/CLK002.c **** }
 186              		.loc 1 214 0
 187 0068 BD46     		mov	sp, r7
 188 006a 04B0     		add	sp, sp, #16
 189              		@ sp needed for prologue
 190 006c 80BD     		pop	{r7, pc}
 191              	.L12:
 192 006e C046     		.align	2
 193              	.L11:
 194 0070 00030140 		.word	1073808128
 195 0074 0000F03F 		.word	1072693248
 196              		.cfi_endproc
 197              	.LFE40:
 199              		.section	.text.CLK002_lFrequencyUpScaling,"ax",%progbits
 200              		.align	2
 201              		.code	16
 202              		.thumb_func
 204              	CLK002_lFrequencyUpScaling:
 205              	.LFB41:
 215:../Dave/Generated/src/CLK002/CLK002.c **** 
 216:../Dave/Generated/src/CLK002/CLK002.c **** /**
 217:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to provide frequency up scaling.
 218:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 219:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 220:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 221:../Dave/Generated/src/CLK002/CLK002.c ****   */
 222:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyUpScaling()
 223:../Dave/Generated/src/CLK002/CLK002.c **** {
 206              		.loc 1 223 0
 207              		.cfi_startproc
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI7:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 84B0     		sub	sp, sp, #16
 214              	.LCFI8:
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              	.LCFI9:
 218              		.cfi_def_cfa_register 7
 224:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t CurrIdiv;
 225:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t TargetIdiv;
 226:../Dave/Generated/src/CLK002/CLK002.c ****   uint32_t lCLKCR;
 227:../Dave/Generated/src/CLK002/CLK002.c ****   CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 219              		.loc 1 227 0
 220 0006 2A4B     		ldr	r3, .L22
 221 0008 1A68     		ldr	r2, [r3]
 222 000a FF23     		mov	r3, #255
 223 000c 1B02     		lsl	r3, r3, #8
 224 000e 1340     		and	r3, r2
 225 0010 1B0A     		lsr	r3, r3, #8
 226 0012 FB60     		str	r3, [r7, #12]
 228:../Dave/Generated/src/CLK002/CLK002.c ****   TargetIdiv = CLK002_CLKCR_IDIV;
 227              		.loc 1 228 0
 228 0014 0123     		mov	r3, #1
 229 0016 BB60     		str	r3, [r7, #8]
 230              	.L19:
 229:../Dave/Generated/src/CLK002/CLK002.c ****   while(1)
 230:../Dave/Generated/src/CLK002/CLK002.c ****   {
 231:../Dave/Generated/src/CLK002/CLK002.c ****     if(CurrIdiv > (TargetIdiv * 4UL))
 231              		.loc 1 231 0
 232 0018 BB68     		ldr	r3, [r7, #8]
 233 001a 9A00     		lsl	r2, r3, #2
 234 001c FB68     		ldr	r3, [r7, #12]
 235 001e 9A42     		cmp	r2, r3
 236 0020 24D2     		bcs	.L14
 232:../Dave/Generated/src/CLK002/CLK002.c ****     {
 233:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
 237              		.loc 1 233 0
 238 0022 FB68     		ldr	r3, [r7, #12]
 239 0024 0322     		mov	r2, #3
 240 0026 9343     		bic	r3, r2
 241 0028 0433     		add	r3, r3, #4
 242 002a FB60     		str	r3, [r7, #12]
 234:../Dave/Generated/src/CLK002/CLK002.c ****         CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
 243              		.loc 1 234 0
 244 002c FB68     		ldr	r3, [r7, #12]
 245 002e 9B08     		lsr	r3, r3, #2
 246 0030 FB60     		str	r3, [r7, #12]
 235:../Dave/Generated/src/CLK002/CLK002.c ****         /* Program interim value of IDIV. */
 236:../Dave/Generated/src/CLK002/CLK002.c **** 
 237:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 247              		.loc 1 237 0
 248 0032 1F4B     		ldr	r3, .L22
 249 0034 1B68     		ldr	r3, [r3]
 250 0036 7B60     		str	r3, [r7, #4]
 238:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
 251              		.loc 1 238 0
 252 0038 FB68     		ldr	r3, [r7, #12]
 253 003a 1B02     		lsl	r3, r3, #8
 254 003c 1B04     		lsl	r3, r3, #16
 255 003e 1A0C     		lsr	r2, r3, #16
 256 0040 7968     		ldr	r1, [r7, #4]
 257 0042 1C4B     		ldr	r3, .L22+4
 258 0044 0B40     		and	r3, r1
 259 0046 1343     		orr	r3, r2
 260 0048 7B60     		str	r3, [r7, #4]
 239:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 261              		.loc 1 239 0
 262 004a 194B     		ldr	r3, .L22
 263 004c 7A68     		ldr	r2, [r7, #4]
 264 004e 1A60     		str	r2, [r3]
 240:../Dave/Generated/src/CLK002/CLK002.c **** 
 241:../Dave/Generated/src/CLK002/CLK002.c ****         /* Wait till frequency stable. */
 242:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 265              		.loc 1 242 0
 266 0050 174B     		ldr	r3, .L22
 267 0052 174A     		ldr	r2, .L22
 268 0054 1268     		ldr	r2, [r2]
 269 0056 1849     		ldr	r1, .L22+8
 270 0058 0A43     		orr	r2, r1
 271 005a 1A60     		str	r2, [r3]
 243:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 272              		.loc 1 243 0
 273 005c C046     		mov	r8, r8
 274              	.L15:
 275              		.loc 1 243 0 is_stmt 0 discriminator 1
 276 005e 144B     		ldr	r3, .L22
 277 0060 1A68     		ldr	r2, [r3]
 278 0062 8023     		mov	r3, #128
 279 0064 DB05     		lsl	r3, r3, #23
 280 0066 1340     		and	r3, r2
 281 0068 F9D1     		bne	.L15
 282              		.loc 1 243 0
 283 006a 1CE0     		b	.L20
 284              	.L14:
 244:../Dave/Generated/src/CLK002/CLK002.c ****         {
 245:../Dave/Generated/src/CLK002/CLK002.c ****             ;
 246:../Dave/Generated/src/CLK002/CLK002.c ****         }
 247:../Dave/Generated/src/CLK002/CLK002.c ****     }
 248:../Dave/Generated/src/CLK002/CLK002.c ****     else
 249:../Dave/Generated/src/CLK002/CLK002.c ****     {
 250:../Dave/Generated/src/CLK002/CLK002.c ****         /* Program TargetIDiv into IDIV bitfield of CLKCR. */
 251:../Dave/Generated/src/CLK002/CLK002.c ****         lCLKCR = SCU_CLK->CLKCR;
 285              		.loc 1 251 0 is_stmt 1
 286 006c 104B     		ldr	r3, .L22
 287 006e 1B68     		ldr	r3, [r3]
 288 0070 7B60     		str	r3, [r7, #4]
 252:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
 289              		.loc 1 252 0
 290 0072 BB68     		ldr	r3, [r7, #8]
 291 0074 1B02     		lsl	r3, r3, #8
 292 0076 1B04     		lsl	r3, r3, #16
 293 0078 1A0C     		lsr	r2, r3, #16
 294 007a 7968     		ldr	r1, [r7, #4]
 295 007c 0D4B     		ldr	r3, .L22+4
 296 007e 0B40     		and	r3, r1
 297 0080 1343     		orr	r3, r2
 298 0082 7B60     		str	r3, [r7, #4]
 253:../Dave/Generated/src/CLK002/CLK002.c ****         SCU_CLK->CLKCR = lCLKCR;
 299              		.loc 1 253 0
 300 0084 0A4B     		ldr	r3, .L22
 301 0086 7A68     		ldr	r2, [r7, #4]
 302 0088 1A60     		str	r2, [r3]
 254:../Dave/Generated/src/CLK002/CLK002.c ****         /* Wait till frequency stable. */
 255:../Dave/Generated/src/CLK002/CLK002.c ****         WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
 303              		.loc 1 255 0
 304 008a 094B     		ldr	r3, .L22
 305 008c 084A     		ldr	r2, .L22
 306 008e 1268     		ldr	r2, [r2]
 307 0090 0949     		ldr	r1, .L22+8
 308 0092 0A43     		orr	r2, r1
 309 0094 1A60     		str	r2, [r3]
 256:../Dave/Generated/src/CLK002/CLK002.c ****         while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 310              		.loc 1 256 0
 311 0096 C046     		mov	r8, r8
 312              	.L17:
 313              		.loc 1 256 0 is_stmt 0 discriminator 1
 314 0098 054B     		ldr	r3, .L22
 315 009a 1A68     		ldr	r2, [r3]
 316 009c 8023     		mov	r3, #128
 317 009e DB05     		lsl	r3, r3, #23
 318 00a0 1340     		and	r3, r2
 319 00a2 F9D1     		bne	.L17
 257:../Dave/Generated/src/CLK002/CLK002.c ****         {
 258:../Dave/Generated/src/CLK002/CLK002.c ****             ;
 259:../Dave/Generated/src/CLK002/CLK002.c ****         }
 260:../Dave/Generated/src/CLK002/CLK002.c ****         break;
 320              		.loc 1 260 0 is_stmt 1
 321 00a4 00E0     		b	.L21
 322              	.L20:
 261:../Dave/Generated/src/CLK002/CLK002.c ****     }
 262:../Dave/Generated/src/CLK002/CLK002.c **** 
 263:../Dave/Generated/src/CLK002/CLK002.c ****   }
 323              		.loc 1 263 0
 324 00a6 B7E7     		b	.L19
 325              	.L21:
 264:../Dave/Generated/src/CLK002/CLK002.c **** 
 265:../Dave/Generated/src/CLK002/CLK002.c **** }
 326              		.loc 1 265 0
 327 00a8 BD46     		mov	sp, r7
 328 00aa 04B0     		add	sp, sp, #16
 329              		@ sp needed for prologue
 330 00ac 80BD     		pop	{r7, pc}
 331              	.L23:
 332 00ae C046     		.align	2
 333              	.L22:
 334 00b0 00030140 		.word	1073808128
 335 00b4 FF00FFFF 		.word	-65281
 336 00b8 0000F03F 		.word	1072693248
 337              		.cfi_endproc
 338              	.LFE41:
 340              		.section	.text.CLK002_lFrequencyDownScaling,"ax",%progbits
 341              		.align	2
 342              		.code	16
 343              		.thumb_func
 345              	CLK002_lFrequencyDownScaling:
 346              	.LFB42:
 266:../Dave/Generated/src/CLK002/CLK002.c **** 
 267:../Dave/Generated/src/CLK002/CLK002.c **** /**
 268:../Dave/Generated/src/CLK002/CLK002.c ****   * @brief  Function to provide frequency up scaling.
 269:../Dave/Generated/src/CLK002/CLK002.c ****   * @note   -
 270:../Dave/Generated/src/CLK002/CLK002.c ****   * @param  None
 271:../Dave/Generated/src/CLK002/CLK002.c ****   * @retval None
 272:../Dave/Generated/src/CLK002/CLK002.c ****   */
 273:../Dave/Generated/src/CLK002/CLK002.c **** static void     CLK002_lFrequencyDownScaling()
 274:../Dave/Generated/src/CLK002/CLK002.c **** {
 347              		.loc 1 274 0
 348              		.cfi_startproc
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI10:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 84B0     		sub	sp, sp, #16
 355              	.LCFI11:
 356              		.cfi_def_cfa_offset 24
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI12:
 359              		.cfi_def_cfa_register 7
 275:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t CurrIdiv;
 276:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t TargetIdiv;
 277:../Dave/Generated/src/CLK002/CLK002.c ****     uint32_t lCLKCR;
 278:../Dave/Generated/src/CLK002/CLK002.c ****     CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
 360              		.loc 1 278 0
 361 0006 274B     		ldr	r3, .L33
 362 0008 1A68     		ldr	r2, [r3]
 363 000a FF23     		mov	r3, #255
 364 000c 1B02     		lsl	r3, r3, #8
 365 000e 1340     		and	r3, r2
 366 0010 1B0A     		lsr	r3, r3, #8
 367 0012 FB60     		str	r3, [r7, #12]
 279:../Dave/Generated/src/CLK002/CLK002.c ****     TargetIdiv = CLK002_CLKCR_IDIV;
 368              		.loc 1 279 0
 369 0014 0123     		mov	r3, #1
 370 0016 BB60     		str	r3, [r7, #8]
 371              	.L30:
 280:../Dave/Generated/src/CLK002/CLK002.c ****     while(1)
 281:../Dave/Generated/src/CLK002/CLK002.c ****     {
 282:../Dave/Generated/src/CLK002/CLK002.c ****         if((CurrIdiv * 4UL) < TargetIdiv )
 372              		.loc 1 282 0
 373 0018 FB68     		ldr	r3, [r7, #12]
 374 001a 9A00     		lsl	r2, r3, #2
 375 001c BB68     		ldr	r3, [r7, #8]
 376 001e 9A42     		cmp	r2, r3
 377 0020 1FD2     		bcs	.L25
 283:../Dave/Generated/src/CLK002/CLK002.c ****         {
 284:../Dave/Generated/src/CLK002/CLK002.c ****             CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
 378              		.loc 1 284 0
 379 0022 FB68     		ldr	r3, [r7, #12]
 380 0024 9B00     		lsl	r3, r3, #2
 381 0026 FB60     		str	r3, [r7, #12]
 285:../Dave/Generated/src/CLK002/CLK002.c ****             /* Program interim value of IDIV */
 286:../Dave/Generated/src/CLK002/CLK002.c ****             lCLKCR = SCU_CLK->CLKCR;
 382              		.loc 1 286 0
 383 0028 1E4B     		ldr	r3, .L33
 384 002a 1B68     		ldr	r3, [r3]
 385 002c 7B60     		str	r3, [r7, #4]
 287:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
 386              		.loc 1 287 0
 387 002e FB68     		ldr	r3, [r7, #12]
 388 0030 1B02     		lsl	r3, r3, #8
 389 0032 1B04     		lsl	r3, r3, #16
 390 0034 1A0C     		lsr	r2, r3, #16
 391 0036 7968     		ldr	r1, [r7, #4]
 392 0038 1B4B     		ldr	r3, .L33+4
 393 003a 0B40     		and	r3, r1
 394 003c 1343     		orr	r3, r2
 395 003e 7B60     		str	r3, [r7, #4]
 288:../Dave/Generated/src/CLK002/CLK002.c ****             SCU_CLK->CLKCR = lCLKCR;
 396              		.loc 1 288 0
 397 0040 184B     		ldr	r3, .L33
 398 0042 7A68     		ldr	r2, [r7, #4]
 399 0044 1A60     		str	r2, [r3]
 289:../Dave/Generated/src/CLK002/CLK002.c ****             /* Wait till frequency stable. */
 290:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYC
 400              		.loc 1 290 0
 401 0046 174B     		ldr	r3, .L33
 402 0048 164A     		ldr	r2, .L33
 403 004a 1268     		ldr	r2, [r2]
 404 004c 1749     		ldr	r1, .L33+8
 405 004e 0A43     		orr	r2, r1
 406 0050 1A60     		str	r2, [r3]
 291:../Dave/Generated/src/CLK002/CLK002.c ****             while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 407              		.loc 1 291 0
 408 0052 C046     		mov	r8, r8
 409              	.L26:
 410              		.loc 1 291 0 is_stmt 0 discriminator 1
 411 0054 134B     		ldr	r3, .L33
 412 0056 1A68     		ldr	r2, [r3]
 413 0058 8023     		mov	r3, #128
 414 005a DB05     		lsl	r3, r3, #23
 415 005c 1340     		and	r3, r2
 416 005e F9D1     		bne	.L26
 417              		.loc 1 291 0
 418 0060 1CE0     		b	.L31
 419              	.L25:
 292:../Dave/Generated/src/CLK002/CLK002.c ****             {
 293:../Dave/Generated/src/CLK002/CLK002.c ****                 ;
 294:../Dave/Generated/src/CLK002/CLK002.c ****             }
 295:../Dave/Generated/src/CLK002/CLK002.c ****         }
 296:../Dave/Generated/src/CLK002/CLK002.c ****         else
 297:../Dave/Generated/src/CLK002/CLK002.c ****         {
 298:../Dave/Generated/src/CLK002/CLK002.c ****             /* Program TargetIDiv into IDIV bitfield of CLKCR */
 299:../Dave/Generated/src/CLK002/CLK002.c ****             lCLKCR = SCU_CLK->CLKCR;
 420              		.loc 1 299 0 is_stmt 1
 421 0062 104B     		ldr	r3, .L33
 422 0064 1B68     		ldr	r3, [r3]
 423 0066 7B60     		str	r3, [r7, #4]
 300:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
 424              		.loc 1 300 0
 425 0068 BB68     		ldr	r3, [r7, #8]
 426 006a 1B02     		lsl	r3, r3, #8
 427 006c 1B04     		lsl	r3, r3, #16
 428 006e 1A0C     		lsr	r2, r3, #16
 429 0070 7968     		ldr	r1, [r7, #4]
 430 0072 0D4B     		ldr	r3, .L33+4
 431 0074 0B40     		and	r3, r1
 432 0076 1343     		orr	r3, r2
 433 0078 7B60     		str	r3, [r7, #4]
 301:../Dave/Generated/src/CLK002/CLK002.c ****             SCU_CLK->CLKCR = lCLKCR;
 434              		.loc 1 301 0
 435 007a 0A4B     		ldr	r3, .L33
 436 007c 7A68     		ldr	r2, [r7, #4]
 437 007e 1A60     		str	r2, [r3]
 302:../Dave/Generated/src/CLK002/CLK002.c ****             /* Wait till frequency stable. */
 303:../Dave/Generated/src/CLK002/CLK002.c ****            
 304:../Dave/Generated/src/CLK002/CLK002.c ****             WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYC
 438              		.loc 1 304 0
 439 0080 084B     		ldr	r3, .L33
 440 0082 084A     		ldr	r2, .L33
 441 0084 1268     		ldr	r2, [r2]
 442 0086 0949     		ldr	r1, .L33+8
 443 0088 0A43     		orr	r2, r1
 444 008a 1A60     		str	r2, [r3]
 305:../Dave/Generated/src/CLK002/CLK002.c ****             while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
 445              		.loc 1 305 0
 446 008c C046     		mov	r8, r8
 447              	.L28:
 448              		.loc 1 305 0 is_stmt 0 discriminator 1
 449 008e 054B     		ldr	r3, .L33
 450 0090 1A68     		ldr	r2, [r3]
 451 0092 8023     		mov	r3, #128
 452 0094 DB05     		lsl	r3, r3, #23
 453 0096 1340     		and	r3, r2
 454 0098 F9D1     		bne	.L28
 306:../Dave/Generated/src/CLK002/CLK002.c ****             {
 307:../Dave/Generated/src/CLK002/CLK002.c ****                 ;
 308:../Dave/Generated/src/CLK002/CLK002.c ****             }
 309:../Dave/Generated/src/CLK002/CLK002.c ****              break;
 455              		.loc 1 309 0 is_stmt 1
 456 009a 00E0     		b	.L32
 457              	.L31:
 310:../Dave/Generated/src/CLK002/CLK002.c ****         }
 311:../Dave/Generated/src/CLK002/CLK002.c **** 
 312:../Dave/Generated/src/CLK002/CLK002.c **** 	  }
 458              		.loc 1 312 0
 459 009c BCE7     		b	.L30
 460              	.L32:
 313:../Dave/Generated/src/CLK002/CLK002.c **** }
 461              		.loc 1 313 0
 462 009e BD46     		mov	sp, r7
 463 00a0 04B0     		add	sp, sp, #16
 464              		@ sp needed for prologue
 465 00a2 80BD     		pop	{r7, pc}
 466              	.L34:
 467              		.align	2
 468              	.L33:
 469 00a4 00030140 		.word	1073808128
 470 00a8 FF00FFFF 		.word	-65281
 471 00ac 0000F03F 		.word	1072693248
 472              		.cfi_endproc
 473              	.LFE42:
 475              		.text
 476              	.Letext0:
 477              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 478              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
DEFINED SYMBOLS
                            *ABS*:00000000 CLK002.c
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:18     .text.CLK002_Init:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:23     .text.CLK002_Init:00000000 CLK002_Init
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:107    .text.CLK002_lDivUpdate:00000000 CLK002_lDivUpdate
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:69     .text.CLK002_Init:00000030 $d
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:75     .text.AllowClkInitByStartup:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:80     .text.AllowClkInitByStartup:00000000 AllowClkInitByStartup
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:103    .text.CLK002_lDivUpdate:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:345    .text.CLK002_lFrequencyDownScaling:00000000 CLK002_lFrequencyDownScaling
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:204    .text.CLK002_lFrequencyUpScaling:00000000 CLK002_lFrequencyUpScaling
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:194    .text.CLK002_lDivUpdate:00000070 $d
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:200    .text.CLK002_lFrequencyUpScaling:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:334    .text.CLK002_lFrequencyUpScaling:000000b0 $d
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:341    .text.CLK002_lFrequencyDownScaling:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccsjLMHo.s:469    .text.CLK002_lFrequencyDownScaling:000000a4 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.63d3e0297d6e9004e0e37a0840833abd
                           .group:00000000 wm4.XMC1100.h.45.7a7cd799d7738130fcda8b83b0aa37d4
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1100.h.114.be3711f71ee045884346be801053f4c0
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.47f40be5760de9fc3332688f9e95febc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.NVIC002_Conf.h.62.18166a449b9ed77d0131aa9be7c23c90

UNDEFINED SYMBOLS
SystemCoreClockUpdate
