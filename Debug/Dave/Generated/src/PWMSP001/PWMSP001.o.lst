   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWMSP001.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWMSP001_Init,"ax",%progbits
  18              		.align	2
  19              		.global	PWMSP001_Init
  20              		.code	16
  21              		.thumb_func
  23              	PWMSP001_Init:
  24              	.LFB38:
  25              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  26              		.loc 1 275 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  39              		.loc 1 276 0
  40 0006 0123     		mov	r3, #1
  41 0008 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  42              		.loc 1 277 0
  43 000a FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  44              		.loc 1 278 0
  45 000e 104B     		ldr	r3, .L3
  46 0010 181C     		mov	r0, r3
  47 0012 FFF7FEFF 		bl	PWMSP001_lInit
  48 0016 031C     		mov	r3, r0
  49 0018 7B60     		str	r3, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  50              		.loc 1 280 0
  51 001a 7B68     		ldr	r3, [r7, #4]
  52 001c 002B     		cmp	r3, #0
  53 001e 09D1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  54              		.loc 1 282 0
  55 0020 0B4B     		ldr	r3, .L3
  56 0022 5B78     		ldrb	r3, [r3, #1]
  57 0024 012B     		cmp	r3, #1
  58 0026 05D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  59              		.loc 1 284 0
  60 0028 094B     		ldr	r3, .L3
  61 002a 181C     		mov	r0, r3
  62 002c FFF7FEFF 		bl	PWMSP001_Start
  63 0030 031C     		mov	r3, r0
  64 0032 7B60     		str	r3, [r7, #4]
  65              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
  66              		.loc 1 289 0
  67 0034 074B     		ldr	r3, .L3+4
  68 0036 074A     		ldr	r2, .L3+4
  69 0038 5169     		ldr	r1, [r2, #20]
  70 003a 074A     		ldr	r2, .L3+8
  71 003c 0A40     		and	r2, r1
  72 003e 5A61     		str	r2, [r3, #20]
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT0->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
  73              		.loc 1 290 0
  74 0040 044B     		ldr	r3, .L3+4
  75 0042 044A     		ldr	r2, .L3+4
  76 0044 5269     		ldr	r2, [r2, #20]
  77 0046 5A61     		str	r2, [r3, #20]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
  78              		.loc 1 292 0
  79 0048 BD46     		mov	sp, r7
  80 004a 02B0     		add	sp, sp, #8
  81              		@ sp needed for prologue
  82 004c 80BD     		pop	{r7, pc}
  83              	.L4:
  84 004e C046     		.align	2
  85              	.L3:
  86 0050 00000000 		.word	PWMSP001_Handle0
  87 0054 00000440 		.word	1074003968
  88 0058 FFBFFFFF 		.word	-16385
  89              		.cfi_endproc
  90              	.LFE38:
  92              		.section	.text.PWMSP001_lInit,"ax",%progbits
  93              		.align	2
  94              		.global	PWMSP001_lInit
  95              		.code	16
  96              		.thumb_func
  98              	PWMSP001_lInit:
  99              	.LFB39:
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 100              		.loc 1 297 0
 101              		.cfi_startproc
 102 0000 B0B5     		push	{r4, r5, r7, lr}
 103              	.LCFI3:
 104              		.cfi_def_cfa_offset 16
 105              		.cfi_offset 4, -16
 106              		.cfi_offset 5, -12
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 84B0     		sub	sp, sp, #16
 110              	.LCFI4:
 111              		.cfi_def_cfa_offset 32
 112 0004 00AF     		add	r7, sp, #0
 113              	.LCFI5:
 114              		.cfi_def_cfa_register 7
 115 0006 7860     		str	r0, [r7, #4]
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 116              		.loc 1 298 0
 117 0008 0123     		mov	r3, #1
 118 000a FB60     		str	r3, [r7, #12]
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 119              		.loc 1 303 0
 120 000c 7B68     		ldr	r3, [r7, #4]
 121 000e DB6B     		ldr	r3, [r3, #60]
 122 0010 1B78     		ldrb	r3, [r3]
 123 0012 002B     		cmp	r3, #0
 124 0014 00D0     		beq	.LCB88
 125 0016 56E1     		b	.L15	@long jump
 126              	.LCB88:
 127              	.L6:
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 128              		.loc 1 307 0
 129 0018 7B68     		ldr	r3, [r7, #4]
 130 001a 9B69     		ldr	r3, [r3, #24]
 131 001c 0722     		mov	r2, #7
 132 001e 1A61     		str	r2, [r3, #16]
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 133              		.loc 1 311 0
 134 0020 7B68     		ldr	r3, [r7, #4]
 135 0022 DB7B     		ldrb	r3, [r3, #15]
 136 0024 012B     		cmp	r3, #1
 137 0026 25D1     		bne	.L8
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 138              		.loc 1 313 0
 139 0028 7B68     		ldr	r3, [r7, #4]
 140 002a 9B69     		ldr	r3, [r3, #24]
 141 002c 7A68     		ldr	r2, [r7, #4]
 142 002e 9269     		ldr	r2, [r2, #24]
 143 0030 1168     		ldr	r1, [r2]
 144 0032 A84A     		ldr	r2, .L16
 145 0034 0A40     		and	r2, r1
 146 0036 1A60     		str	r2, [r3]
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 147              		.loc 1 314 0
 148 0038 7B68     		ldr	r3, [r7, #4]
 149 003a 9B69     		ldr	r3, [r3, #24]
 150 003c 7A68     		ldr	r2, [r7, #4]
 151 003e 9269     		ldr	r2, [r2, #24]
 152 0040 5268     		ldr	r2, [r2, #4]
 153 0042 0C21     		mov	r1, #12
 154 0044 8A43     		bic	r2, r1
 155 0046 5A60     		str	r2, [r3, #4]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 156              		.loc 1 315 0
 157 0048 7B68     		ldr	r3, [r7, #4]
 158 004a 9B69     		ldr	r3, [r3, #24]
 159 004c 7A68     		ldr	r2, [r7, #4]
 160 004e 9269     		ldr	r2, [r2, #24]
 161 0050 1168     		ldr	r1, [r2]
 162 0052 7868     		ldr	r0, [r7, #4]
 163 0054 2422     		mov	r2, #36
 164 0056 825C     		ldrb	r2, [r0, r2]
 165 0058 9004     		lsl	r0, r2, #18
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 166              		.loc 1 316 0
 167 005a C022     		mov	r2, #192
 168 005c 1203     		lsl	r2, r2, #12
 169 005e 0240     		and	r2, r0
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 170              		.loc 1 315 0
 171 0060 0A43     		orr	r2, r1
 172 0062 1A60     		str	r2, [r3]
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 173              		.loc 1 319 0
 174 0064 7B68     		ldr	r3, [r7, #4]
 175 0066 9B69     		ldr	r3, [r3, #24]
 176 0068 7A68     		ldr	r2, [r7, #4]
 177 006a 9269     		ldr	r2, [r2, #24]
 178 006c 5268     		ldr	r2, [r2, #4]
 179 006e 0821     		mov	r1, #8
 180 0070 0A43     		orr	r2, r1
 181 0072 5A60     		str	r2, [r3, #4]
 182              	.L8:
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 183              		.loc 1 325 0
 184 0074 7B68     		ldr	r3, [r7, #4]
 185 0076 5B7C     		ldrb	r3, [r3, #17]
 186 0078 012B     		cmp	r3, #1
 187 007a 2AD1     		bne	.L9
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 188              		.loc 1 326 0 discriminator 1
 189 007c 7A68     		ldr	r2, [r7, #4]
 190 007e 2023     		mov	r3, #32
 191 0080 D35C     		ldrb	r3, [r2, r3]
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 192              		.loc 1 325 0 discriminator 1
 193 0082 012B     		cmp	r3, #1
 194 0084 25D0     		beq	.L9
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 195              		.loc 1 329 0
 196 0086 7B68     		ldr	r3, [r7, #4]
 197 0088 9B69     		ldr	r3, [r3, #24]
 198 008a 7A68     		ldr	r2, [r7, #4]
 199 008c 9269     		ldr	r2, [r2, #24]
 200 008e 1168     		ldr	r1, [r2]
 201 0090 914A     		ldr	r2, .L16+4
 202 0092 0A40     		and	r2, r1
 203 0094 1A60     		str	r2, [r3]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 204              		.loc 1 331 0
 205 0096 7B68     		ldr	r3, [r7, #4]
 206 0098 9B69     		ldr	r3, [r3, #24]
 207 009a 7A68     		ldr	r2, [r7, #4]
 208 009c 9269     		ldr	r2, [r2, #24]
 209 009e 5168     		ldr	r1, [r2, #4]
 210 00a0 8E4A     		ldr	r2, .L16+8
 211 00a2 0A40     		and	r2, r1
 212 00a4 5A60     		str	r2, [r3, #4]
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 213              		.loc 1 332 0
 214 00a6 7B68     		ldr	r3, [r7, #4]
 215 00a8 9B69     		ldr	r3, [r3, #24]
 216 00aa 7A68     		ldr	r2, [r7, #4]
 217 00ac 9269     		ldr	r2, [r2, #24]
 218 00ae 1168     		ldr	r1, [r2]
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 219              		.loc 1 333 0
 220 00b0 7A68     		ldr	r2, [r7, #4]
 221 00b2 1278     		ldrb	r2, [r2]
 222 00b4 1006     		lsl	r0, r2, #24
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 223              		.loc 1 334 0
 224 00b6 8022     		mov	r2, #128
 225 00b8 5204     		lsl	r2, r2, #17
 226 00ba 0240     		and	r2, r0
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 227              		.loc 1 332 0
 228 00bc 0A43     		orr	r2, r1
 229 00be 1A60     		str	r2, [r3]
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 230              		.loc 1 338 0
 231 00c0 7B68     		ldr	r3, [r7, #4]
 232 00c2 9B69     		ldr	r3, [r3, #24]
 233 00c4 7A68     		ldr	r2, [r7, #4]
 234 00c6 9269     		ldr	r2, [r2, #24]
 235 00c8 5268     		ldr	r2, [r2, #4]
 236 00ca 8021     		mov	r1, #128
 237 00cc 8902     		lsl	r1, r1, #10
 238 00ce 0A43     		orr	r2, r1
 239 00d0 5A60     		str	r2, [r3, #4]
 240              	.L9:
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 241              		.loc 1 341 0
 242 00d2 7B68     		ldr	r3, [r7, #4]
 243 00d4 9B69     		ldr	r3, [r3, #24]
 244 00d6 7A68     		ldr	r2, [r7, #4]
 245 00d8 9269     		ldr	r2, [r2, #24]
 246 00da 5169     		ldr	r1, [r2, #20]
 247 00dc 804A     		ldr	r2, .L16+12
 248 00de 0A40     		and	r2, r1
 249 00e0 5A61     		str	r2, [r3, #20]
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 250              		.loc 1 345 0
 251 00e2 7B68     		ldr	r3, [r7, #4]
 252 00e4 9B69     		ldr	r3, [r3, #24]
 253 00e6 7A68     		ldr	r2, [r7, #4]
 254 00e8 9269     		ldr	r2, [r2, #24]
 255 00ea 5169     		ldr	r1, [r2, #20]
 256 00ec 7868     		ldr	r0, [r7, #4]
 257 00ee 3622     		mov	r2, #54
 258 00f0 825C     		ldrb	r2, [r0, r2]
 259 00f2 101C     		mov	r0, r2
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 260              		.loc 1 346 0
 261 00f4 0122     		mov	r2, #1
 262 00f6 1040     		and	r0, r2
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 263              		.loc 1 349 0
 264 00f8 7C68     		ldr	r4, [r7, #4]
 265 00fa 3422     		mov	r2, #52
 266 00fc A25C     		ldrb	r2, [r4, r2]
 267 00fe 9402     		lsl	r4, r2, #10
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 268              		.loc 1 350 0
 269 0100 8022     		mov	r2, #128
 270 0102 D200     		lsl	r2, r2, #3
 271 0104 2240     		and	r2, r4
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 272              		.loc 1 348 0
 273 0106 1043     		orr	r0, r2
 274              		.loc 1 350 0
 275 0108 7C68     		ldr	r4, [r7, #4]
 276 010a 3522     		mov	r2, #53
 277 010c A25C     		ldrb	r2, [r4, r2]
 278 010e 1402     		lsl	r4, r2, #8
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 279              		.loc 1 351 0
 280 0110 C022     		mov	r2, #192
 281 0112 9200     		lsl	r2, r2, #2
 282 0114 2240     		and	r2, r4
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 283              		.loc 1 350 0
 284 0116 0243     		orr	r2, r0
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 285              		.loc 1 345 0
 286 0118 0A43     		orr	r2, r1
 287 011a 5A61     		str	r2, [r3, #20]
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 288              		.loc 1 356 0
 289 011c 7A68     		ldr	r2, [r7, #4]
 290 011e 2023     		mov	r3, #32
 291 0120 D35C     		ldrb	r3, [r2, r3]
 292 0122 012B     		cmp	r3, #1
 293 0124 0DD0     		beq	.L10
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 294              		.loc 1 358 0
 295 0126 7B68     		ldr	r3, [r7, #4]
 296 0128 9B69     		ldr	r3, [r3, #24]
 297 012a 7A68     		ldr	r2, [r7, #4]
 298 012c 127B     		ldrb	r2, [r2, #12]
 299 012e 5100     		lsl	r1, r2, #1
 300 0130 0222     		mov	r2, #2
 301 0132 1140     		and	r1, r2
 302 0134 7A68     		ldr	r2, [r7, #4]
 303 0136 9269     		ldr	r2, [r2, #24]
 304 0138 5269     		ldr	r2, [r2, #20]
 305 013a 0220     		mov	r0, #2
 306 013c 8243     		bic	r2, r0
 307 013e 0A43     		orr	r2, r1
 308 0140 5A61     		str	r2, [r3, #20]
 309              	.L10:
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 310              		.loc 1 363 0
 311 0142 7B68     		ldr	r3, [r7, #4]
 312 0144 9B69     		ldr	r3, [r3, #24]
 313 0146 7A68     		ldr	r2, [r7, #4]
 314 0148 9269     		ldr	r2, [r2, #24]
 315 014a 5169     		ldr	r1, [r2, #20]
 316 014c 7868     		ldr	r0, [r7, #4]
 317 014e 2122     		mov	r2, #33
 318 0150 825C     		ldrb	r2, [r0, r2]
 319 0152 5003     		lsl	r0, r2, #13
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 320              		.loc 1 364 0
 321 0154 C022     		mov	r2, #192
 322 0156 D201     		lsl	r2, r2, #7
 323 0158 0240     		and	r2, r0
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 324              		.loc 1 363 0
 325 015a 0A43     		orr	r2, r1
 326 015c 5A61     		str	r2, [r3, #20]
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 327              		.loc 1 366 0
 328 015e 7B68     		ldr	r3, [r7, #4]
 329 0160 9B69     		ldr	r3, [r3, #24]
 330 0162 7A68     		ldr	r2, [r7, #4]
 331 0164 527B     		ldrb	r2, [r2, #13]
 332 0166 111C     		mov	r1, r2
 333 0168 0F22     		mov	r2, #15
 334 016a 1140     		and	r1, r2
 335 016c 7A68     		ldr	r2, [r7, #4]
 336 016e 9269     		ldr	r2, [r2, #24]
 337 0170 126A     		ldr	r2, [r2, #32]
 338 0172 0F20     		mov	r0, #15
 339 0174 8243     		bic	r2, r0
 340 0176 0A43     		orr	r2, r1
 341 0178 1A62     		str	r2, [r3, #32]
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 342              		.loc 1 370 0
 343 017a 7A68     		ldr	r2, [r7, #4]
 344 017c 2023     		mov	r3, #32
 345 017e D35C     		ldrb	r3, [r2, r3]
 346 0180 012B     		cmp	r3, #1
 347 0182 2CD0     		beq	.L11
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 348              		.loc 1 373 0
 349 0184 7B68     		ldr	r3, [r7, #4]
 350 0186 9B69     		ldr	r3, [r3, #24]
 351 0188 7A68     		ldr	r2, [r7, #4]
 352 018a 927C     		ldrb	r2, [r2, #18]
 353 018c 5105     		lsl	r1, r2, #21
 354 018e 8022     		mov	r2, #128
 355 0190 9203     		lsl	r2, r2, #14
 356 0192 1140     		and	r1, r2
 357 0194 7A68     		ldr	r2, [r7, #4]
 358 0196 9269     		ldr	r2, [r2, #24]
 359 0198 5069     		ldr	r0, [r2, #20]
 360 019a 524A     		ldr	r2, .L16+16
 361 019c 0240     		and	r2, r0
 362 019e 0A43     		orr	r2, r1
 363 01a0 5A61     		str	r2, [r3, #20]
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 364              		.loc 1 376 0
 365 01a2 7B68     		ldr	r3, [r7, #4]
 366 01a4 9B69     		ldr	r3, [r3, #24]
 367 01a6 7A68     		ldr	r2, [r7, #4]
 368 01a8 D27C     		ldrb	r2, [r2, #19]
 369 01aa 9105     		lsl	r1, r2, #22
 370 01ac 8022     		mov	r2, #128
 371 01ae D203     		lsl	r2, r2, #15
 372 01b0 1140     		and	r1, r2
 373 01b2 7A68     		ldr	r2, [r7, #4]
 374 01b4 9269     		ldr	r2, [r2, #24]
 375 01b6 5069     		ldr	r0, [r2, #20]
 376 01b8 4B4A     		ldr	r2, .L16+20
 377 01ba 0240     		and	r2, r0
 378 01bc 0A43     		orr	r2, r1
 379 01be 5A61     		str	r2, [r3, #20]
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 380              		.loc 1 379 0
 381 01c0 7B68     		ldr	r3, [r7, #4]
 382 01c2 9B69     		ldr	r3, [r3, #24]
 383 01c4 7A68     		ldr	r2, [r7, #4]
 384 01c6 527C     		ldrb	r2, [r2, #17]
 385 01c8 5104     		lsl	r1, r2, #17
 386 01ca 8022     		mov	r2, #128
 387 01cc 9202     		lsl	r2, r2, #10
 388 01ce 1140     		and	r1, r2
 389 01d0 7A68     		ldr	r2, [r7, #4]
 390 01d2 9269     		ldr	r2, [r2, #24]
 391 01d4 5069     		ldr	r0, [r2, #20]
 392 01d6 414A     		ldr	r2, .L16+8
 393 01d8 0240     		and	r2, r0
 394 01da 0A43     		orr	r2, r1
 395 01dc 5A61     		str	r2, [r3, #20]
 396              	.L11:
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 397              		.loc 1 383 0
 398 01de 7B68     		ldr	r3, [r7, #4]
 399 01e0 9B69     		ldr	r3, [r3, #24]
 400 01e2 7968     		ldr	r1, [r7, #4]
 401 01e4 2222     		mov	r2, #34
 402 01e6 8A5C     		ldrb	r2, [r1, r2]
 403 01e8 111C     		mov	r1, r2
 404 01ea 0F22     		mov	r2, #15
 405 01ec 1140     		and	r1, r2
 406 01ee 7A68     		ldr	r2, [r7, #4]
 407 01f0 9269     		ldr	r2, [r2, #24]
 408 01f2 526A     		ldr	r2, [r2, #36]
 409 01f4 0F20     		mov	r0, #15
 410 01f6 8243     		bic	r2, r0
 411 01f8 0A43     		orr	r2, r1
 412 01fa 5A62     		str	r2, [r3, #36]
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 413              		.loc 1 385 0
 414 01fc 7B68     		ldr	r3, [r7, #4]
 415 01fe 9B69     		ldr	r3, [r3, #24]
 416 0200 7A68     		ldr	r2, [r7, #4]
 417 0202 127C     		ldrb	r2, [r2, #16]
 418 0204 9A61     		str	r2, [r3, #24]
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 419              		.loc 1 389 0
 420 0206 7B68     		ldr	r3, [r7, #4]
 421 0208 9B69     		ldr	r3, [r3, #24]
 422 020a 7A68     		ldr	r2, [r7, #4]
 423 020c 926A     		ldr	r2, [r2, #40]
 424 020e 1204     		lsl	r2, r2, #16
 425 0210 120C     		lsr	r2, r2, #16
 426 0212 5A63     		str	r2, [r3, #52]
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 427              		.loc 1 391 0
 428 0214 7B68     		ldr	r3, [r7, #4]
 429 0216 9B69     		ldr	r3, [r3, #24]
 430 0218 7A68     		ldr	r2, [r7, #4]
 431 021a 9268     		ldr	r2, [r2, #8]
 432 021c 1204     		lsl	r2, r2, #16
 433 021e 120C     		lsr	r2, r2, #16
 434 0220 DA63     		str	r2, [r3, #60]
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 435              		.loc 1 392 0
 436 0222 7B68     		ldr	r3, [r7, #4]
 437 0224 9A69     		ldr	r2, [r3, #24]
 438 0226 7B68     		ldr	r3, [r7, #4]
 439 0228 9969     		ldr	r1, [r3, #24]
 440 022a B023     		mov	r3, #176
 441 022c CB58     		ldr	r3, [r1, r3]
 442 022e 2F49     		ldr	r1, .L16+24
 443 0230 1943     		orr	r1, r3
 444 0232 B023     		mov	r3, #176
 445 0234 D150     		str	r1, [r2, r3]
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 446              		.loc 1 396 0
 447 0236 7A68     		ldr	r2, [r7, #4]
 448 0238 2023     		mov	r3, #32
 449 023a D35C     		ldrb	r3, [r2, r3]
 450 023c 012B     		cmp	r3, #1
 451 023e 0FD1     		bne	.L12
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 452              		.loc 1 398 0
 453 0240 7B68     		ldr	r3, [r7, #4]
 454 0242 181C     		mov	r0, r3
 455 0244 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 456              		.loc 1 399 0
 457 0248 7B68     		ldr	r3, [r7, #4]
 458 024a DA69     		ldr	r2, [r3, #28]
 459 024c 7B68     		ldr	r3, [r7, #4]
 460 024e D969     		ldr	r1, [r3, #28]
 461 0250 A423     		mov	r3, #164
 462 0252 C958     		ldr	r1, [r1, r3]
 463 0254 7B68     		ldr	r3, [r7, #4]
 464 0256 1B6B     		ldr	r3, [r3, #48]
 465 0258 1943     		orr	r1, r3
 466 025a A423     		mov	r3, #164
 467 025c D150     		str	r1, [r2, r3]
 468 025e 0AE0     		b	.L13
 469              	.L12:
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 470              		.loc 1 404 0
 471 0260 7B68     		ldr	r3, [r7, #4]
 472 0262 9A69     		ldr	r2, [r3, #24]
 473 0264 7B68     		ldr	r3, [r7, #4]
 474 0266 9969     		ldr	r1, [r3, #24]
 475 0268 A423     		mov	r3, #164
 476 026a C958     		ldr	r1, [r1, r3]
 477 026c 7B68     		ldr	r3, [r7, #4]
 478 026e 1B6B     		ldr	r3, [r3, #48]
 479 0270 1943     		orr	r1, r3
 480 0272 A423     		mov	r3, #164
 481 0274 D150     		str	r1, [r2, r3]
 482              	.L13:
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 483              		.loc 1 409 0
 484 0276 7B68     		ldr	r3, [r7, #4]
 485 0278 5B69     		ldr	r3, [r3, #20]
 486 027a 7A68     		ldr	r2, [r7, #4]
 487 027c 5269     		ldr	r2, [r2, #20]
 488 027e 1169     		ldr	r1, [r2, #16]
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 489              		.loc 1 410 0
 490 0280 7868     		ldr	r0, [r7, #4]
 491 0282 3722     		mov	r2, #55
 492 0284 825C     		ldrb	r2, [r0, r2]
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 493              		.loc 1 409 0
 494 0286 9200     		lsl	r2, r2, #2
 495 0288 0120     		mov	r0, #1
 496 028a 9040     		lsl	r0, r0, r2
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 497              		.loc 1 411 0
 498 028c 7C68     		ldr	r4, [r7, #4]
 499 028e 3722     		mov	r2, #55
 500 0290 A25C     		ldrb	r2, [r4, r2]
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 501              		.loc 1 410 0
 502 0292 9200     		lsl	r2, r2, #2
 503              		.loc 1 411 0
 504 0294 0132     		add	r2, r2, #1
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 505              		.loc 1 410 0
 506 0296 0124     		mov	r4, #1
 507 0298 251C     		mov	r5, r4
 508 029a 9540     		lsl	r5, r5, r2
 509 029c 2A1C     		mov	r2, r5
 510 029e 1043     		orr	r0, r2
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 511              		.loc 1 412 0
 512 02a0 7C68     		ldr	r4, [r7, #4]
 513 02a2 3722     		mov	r2, #55
 514 02a4 A25C     		ldrb	r2, [r4, r2]
 515 02a6 9200     		lsl	r2, r2, #2
 516 02a8 0232     		add	r2, r2, #2
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 517              		.loc 1 411 0
 518 02aa 0124     		mov	r4, #1
 519 02ac 251C     		mov	r5, r4
 520 02ae 9540     		lsl	r5, r5, r2
 521 02b0 2A1C     		mov	r2, r5
 522 02b2 0243     		orr	r2, r0
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 523              		.loc 1 409 0
 524 02b4 0A43     		orr	r2, r1
 525 02b6 1A61     		str	r2, [r3, #16]
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 526              		.loc 1 414 0
 527 02b8 0023     		mov	r3, #0
 528 02ba FB60     		str	r3, [r7, #12]
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 529              		.loc 1 415 0
 530 02bc 7B68     		ldr	r3, [r7, #4]
 531 02be DB6B     		ldr	r3, [r3, #60]
 532 02c0 0122     		mov	r2, #1
 533 02c2 1A70     		strb	r2, [r3]
 534 02c4 00E0     		b	.L7
 535              	.L15:
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 536              		.loc 1 305 0
 537 02c6 C046     		mov	r8, r8
 538              	.L7:
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 539              		.loc 1 422 0
 540 02c8 FB68     		ldr	r3, [r7, #12]
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 541              		.loc 1 423 0
 542 02ca 181C     		mov	r0, r3
 543 02cc BD46     		mov	sp, r7
 544 02ce 04B0     		add	sp, sp, #16
 545              		@ sp needed for prologue
 546 02d0 B0BD     		pop	{r4, r5, r7, pc}
 547              	.L17:
 548 02d2 C046     		.align	2
 549              	.L16:
 550 02d4 FFFFF3E7 		.word	-403439617
 551 02d8 FFFFCF9E 		.word	-1630535681
 552 02dc FFFFFDFF 		.word	-131073
 553 02e0 F698FFFF 		.word	-26378
 554 02e4 FFFFDFFF 		.word	-2097153
 555 02e8 FFFFBFFF 		.word	-4194305
 556 02ec 0F0F0000 		.word	3855
 557              		.cfi_endproc
 558              	.LFE39:
 560              		.section	.text.PWMSP001_Deinit,"ax",%progbits
 561              		.align	2
 562              		.global	PWMSP001_Deinit
 563              		.code	16
 564              		.thumb_func
 566              	PWMSP001_Deinit:
 567              	.LFB40:
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 568              		.loc 1 428 0
 569              		.cfi_startproc
 570 0000 90B5     		push	{r4, r7, lr}
 571              	.LCFI6:
 572              		.cfi_def_cfa_offset 12
 573              		.cfi_offset 4, -12
 574              		.cfi_offset 7, -8
 575              		.cfi_offset 14, -4
 576 0002 89B0     		sub	sp, sp, #36
 577              	.LCFI7:
 578              		.cfi_def_cfa_offset 48
 579 0004 00AF     		add	r7, sp, #0
 580              	.LCFI8:
 581              		.cfi_def_cfa_register 7
 582 0006 7860     		str	r0, [r7, #4]
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 583              		.loc 1 429 0
 584 0008 0123     		mov	r3, #1
 585 000a FB61     		str	r3, [r7, #28]
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 586              		.loc 1 436 0
 587 000c 7B68     		ldr	r3, [r7, #4]
 588 000e DB6B     		ldr	r3, [r3, #60]
 589 0010 1B78     		ldrb	r3, [r3]
 590 0012 002B     		cmp	r3, #0
 591 0014 00D1     		bne	.LCB500
 592 0016 91E0     		b	.L19	@long jump
 593              	.LCB500:
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 594              		.loc 1 439 0
 595 0018 7B68     		ldr	r3, [r7, #4]
 596 001a 9B69     		ldr	r3, [r3, #24]
 597 001c 0722     		mov	r2, #7
 598 001e 1A61     		str	r2, [r3, #16]
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 599              		.loc 1 440 0
 600 0020 7B68     		ldr	r3, [r7, #4]
 601 0022 9A69     		ldr	r2, [r3, #24]
 602 0024 B023     		mov	r3, #176
 603 0026 4849     		ldr	r1, .L22
 604 0028 D150     		str	r1, [r2, r3]
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 605              		.loc 1 441 0
 606 002a 7B68     		ldr	r3, [r7, #4]
 607 002c 9A69     		ldr	r2, [r3, #24]
 608 002e A423     		mov	r3, #164
 609 0030 0021     		mov	r1, #0
 610 0032 D150     		str	r1, [r2, r3]
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 611              		.loc 1 444 0
 612 0034 7B68     		ldr	r3, [r7, #4]
 613 0036 5B69     		ldr	r3, [r3, #20]
 614 0038 7A68     		ldr	r2, [r7, #4]
 615 003a 5269     		ldr	r2, [r2, #20]
 616 003c 9168     		ldr	r1, [r2, #8]
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 617              		.loc 1 445 0
 618 003e 7868     		ldr	r0, [r7, #4]
 619 0040 3722     		mov	r2, #55
 620 0042 825C     		ldrb	r2, [r0, r2]
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 621              		.loc 1 444 0
 622 0044 0120     		mov	r0, #1
 623 0046 041C     		mov	r4, r0
 624 0048 9440     		lsl	r4, r4, r2
 625 004a 221C     		mov	r2, r4
 626 004c 0A43     		orr	r2, r1
 627 004e C021     		mov	r1, #192
 628 0050 8900     		lsl	r1, r1, #2
 629 0052 0A43     		orr	r2, r1
 630 0054 9A60     		str	r2, [r3, #8]
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 631              		.loc 1 449 0
 632 0056 7B68     		ldr	r3, [r7, #4]
 633 0058 9B69     		ldr	r3, [r3, #24]
 634 005a 0022     		mov	r2, #0
 635 005c 1A60     		str	r2, [r3]
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 636              		.loc 1 450 0
 637 005e 7B68     		ldr	r3, [r7, #4]
 638 0060 9B69     		ldr	r3, [r3, #24]
 639 0062 0022     		mov	r2, #0
 640 0064 5A60     		str	r2, [r3, #4]
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 641              		.loc 1 451 0
 642 0066 7B68     		ldr	r3, [r7, #4]
 643 0068 9B69     		ldr	r3, [r3, #24]
 644 006a 0022     		mov	r2, #0
 645 006c 5A61     		str	r2, [r3, #20]
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 646              		.loc 1 452 0
 647 006e 7B68     		ldr	r3, [r7, #4]
 648 0070 9B69     		ldr	r3, [r3, #24]
 649 0072 0022     		mov	r2, #0
 650 0074 5A62     		str	r2, [r3, #36]
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 651              		.loc 1 453 0
 652 0076 7B68     		ldr	r3, [r7, #4]
 653 0078 9B69     		ldr	r3, [r3, #24]
 654 007a 0022     		mov	r2, #0
 655 007c 9A61     		str	r2, [r3, #24]
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 656              		.loc 1 454 0
 657 007e 7B68     		ldr	r3, [r7, #4]
 658 0080 9B69     		ldr	r3, [r3, #24]
 659 0082 0022     		mov	r2, #0
 660 0084 1A62     		str	r2, [r3, #32]
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 661              		.loc 1 455 0
 662 0086 7B68     		ldr	r3, [r7, #4]
 663 0088 9B69     		ldr	r3, [r3, #24]
 664 008a 0022     		mov	r2, #0
 665 008c DA63     		str	r2, [r3, #60]
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 666              		.loc 1 456 0
 667 008e 7B68     		ldr	r3, [r7, #4]
 668 0090 9B69     		ldr	r3, [r3, #24]
 669 0092 0022     		mov	r2, #0
 670 0094 5A63     		str	r2, [r3, #52]
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 671              		.loc 1 459 0
 672 0096 7A68     		ldr	r2, [r7, #4]
 673 0098 2023     		mov	r3, #32
 674 009a D35C     		ldrb	r3, [r2, r3]
 675 009c 012B     		cmp	r3, #1
 676 009e 47D1     		bne	.L20
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 677              		.loc 1 462 0
 678 00a0 7B68     		ldr	r3, [r7, #4]
 679 00a2 DB69     		ldr	r3, [r3, #28]
 680 00a4 0722     		mov	r2, #7
 681 00a6 1A61     		str	r2, [r3, #16]
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 682              		.loc 1 463 0
 683 00a8 7B68     		ldr	r3, [r7, #4]
 684 00aa DA69     		ldr	r2, [r3, #28]
 685 00ac B023     		mov	r3, #176
 686 00ae 2649     		ldr	r1, .L22
 687 00b0 D150     		str	r1, [r2, r3]
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 688              		.loc 1 464 0
 689 00b2 7B68     		ldr	r3, [r7, #4]
 690 00b4 DA69     		ldr	r2, [r3, #28]
 691 00b6 A423     		mov	r3, #164
 692 00b8 0021     		mov	r1, #0
 693 00ba D150     		str	r1, [r2, r3]
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 694              		.loc 1 467 0
 695 00bc 8023     		mov	r3, #128
 696 00be 9B00     		lsl	r3, r3, #2
 697 00c0 BB61     		str	r3, [r7, #24]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 698              		.loc 1 468 0
 699 00c2 8023     		mov	r3, #128
 700 00c4 5B00     		lsl	r3, r3, #1
 701 00c6 7B61     		str	r3, [r7, #20]
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 702              		.loc 1 469 0
 703 00c8 7A68     		ldr	r2, [r7, #4]
 704 00ca 3823     		mov	r3, #56
 705 00cc D35C     		ldrb	r3, [r2, r3]
 706 00ce 3B61     		str	r3, [r7, #16]
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 707              		.loc 1 470 0
 708 00d0 7A69     		ldr	r2, [r7, #20]
 709 00d2 BB69     		ldr	r3, [r7, #24]
 710 00d4 1343     		orr	r3, r2
 711 00d6 FB60     		str	r3, [r7, #12]
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 712              		.loc 1 471 0
 713 00d8 7B68     		ldr	r3, [r7, #4]
 714 00da 5B69     		ldr	r3, [r3, #20]
 715 00dc 7A68     		ldr	r2, [r7, #4]
 716 00de 5269     		ldr	r2, [r2, #20]
 717 00e0 9168     		ldr	r1, [r2, #8]
 718 00e2 3A69     		ldr	r2, [r7, #16]
 719 00e4 0120     		mov	r0, #1
 720 00e6 9040     		lsl	r0, r0, r2
 721 00e8 FA68     		ldr	r2, [r7, #12]
 722 00ea 0243     		orr	r2, r0
 723 00ec 0A43     		orr	r2, r1
 724 00ee 9A60     		str	r2, [r3, #8]
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 725              		.loc 1 475 0
 726 00f0 7B68     		ldr	r3, [r7, #4]
 727 00f2 DB69     		ldr	r3, [r3, #28]
 728 00f4 0022     		mov	r2, #0
 729 00f6 1A60     		str	r2, [r3]
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 730              		.loc 1 476 0
 731 00f8 7B68     		ldr	r3, [r7, #4]
 732 00fa DB69     		ldr	r3, [r3, #28]
 733 00fc 0022     		mov	r2, #0
 734 00fe 5A60     		str	r2, [r3, #4]
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 735              		.loc 1 477 0
 736 0100 7B68     		ldr	r3, [r7, #4]
 737 0102 DB69     		ldr	r3, [r3, #28]
 738 0104 0022     		mov	r2, #0
 739 0106 5A61     		str	r2, [r3, #20]
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 740              		.loc 1 478 0
 741 0108 7B68     		ldr	r3, [r7, #4]
 742 010a DB69     		ldr	r3, [r3, #28]
 743 010c 0022     		mov	r2, #0
 744 010e 5A62     		str	r2, [r3, #36]
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 745              		.loc 1 479 0
 746 0110 7B68     		ldr	r3, [r7, #4]
 747 0112 DB69     		ldr	r3, [r3, #28]
 748 0114 0022     		mov	r2, #0
 749 0116 9A61     		str	r2, [r3, #24]
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 750              		.loc 1 480 0
 751 0118 7B68     		ldr	r3, [r7, #4]
 752 011a DB69     		ldr	r3, [r3, #28]
 753 011c 0022     		mov	r2, #0
 754 011e 1A62     		str	r2, [r3, #32]
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 755              		.loc 1 481 0
 756 0120 7B68     		ldr	r3, [r7, #4]
 757 0122 DB69     		ldr	r3, [r3, #28]
 758 0124 0022     		mov	r2, #0
 759 0126 DA63     		str	r2, [r3, #60]
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 760              		.loc 1 482 0
 761 0128 7B68     		ldr	r3, [r7, #4]
 762 012a DB69     		ldr	r3, [r3, #28]
 763 012c 0022     		mov	r2, #0
 764 012e 5A63     		str	r2, [r3, #52]
 765              	.L20:
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 766              		.loc 1 485 0
 767 0130 7B68     		ldr	r3, [r7, #4]
 768 0132 DB6B     		ldr	r3, [r3, #60]
 769 0134 0022     		mov	r2, #0
 770 0136 1A70     		strb	r2, [r3]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 771              		.loc 1 487 0
 772 0138 0023     		mov	r3, #0
 773 013a FB61     		str	r3, [r7, #28]
 774              	.L19:
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 775              		.loc 1 494 0
 776 013c FB69     		ldr	r3, [r7, #28]
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 777              		.loc 1 495 0
 778 013e 181C     		mov	r0, r3
 779 0140 BD46     		mov	sp, r7
 780 0142 09B0     		add	sp, sp, #36
 781              		@ sp needed for prologue
 782 0144 90BD     		pop	{r4, r7, pc}
 783              	.L23:
 784 0146 C046     		.align	2
 785              	.L22:
 786 0148 0F0F0000 		.word	3855
 787              		.cfi_endproc
 788              	.LFE40:
 790              		.section	.text.PWMSP001_Start,"ax",%progbits
 791              		.align	2
 792              		.global	PWMSP001_Start
 793              		.code	16
 794              		.thumb_func
 796              	PWMSP001_Start:
 797              	.LFB41:
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 798              		.loc 1 501 0
 799              		.cfi_startproc
 800 0000 90B5     		push	{r4, r7, lr}
 801              	.LCFI9:
 802              		.cfi_def_cfa_offset 12
 803              		.cfi_offset 4, -12
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 85B0     		sub	sp, sp, #20
 807              	.LCFI10:
 808              		.cfi_def_cfa_offset 32
 809 0004 00AF     		add	r7, sp, #0
 810              	.LCFI11:
 811              		.cfi_def_cfa_register 7
 812 0006 7860     		str	r0, [r7, #4]
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 813              		.loc 1 502 0
 814 0008 0123     		mov	r3, #1
 815 000a FB60     		str	r3, [r7, #12]
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 816              		.loc 1 507 0
 817 000c 7B68     		ldr	r3, [r7, #4]
 818 000e DB6B     		ldr	r3, [r3, #60]
 819 0010 1B78     		ldrb	r3, [r3]
 820 0012 012B     		cmp	r3, #1
 821 0014 05D0     		beq	.L25
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 822              		.loc 1 508 0 discriminator 1
 823 0016 7B68     		ldr	r3, [r7, #4]
 824 0018 DB6B     		ldr	r3, [r3, #60]
 825 001a 1B78     		ldrb	r3, [r3]
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 826              		.loc 1 507 0 discriminator 1
 827 001c 032B     		cmp	r3, #3
 828 001e 00D0     		beq	.LCB699
 829 0020 9FE0     		b	.L32	@long jump
 830              	.LCB699:
 831              	.L25:
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 832              		.loc 1 514 0
 833 0022 7B68     		ldr	r3, [r7, #4]
 834 0024 9A69     		ldr	r2, [r3, #24]
 835 0026 B023     		mov	r3, #176
 836 0028 5149     		ldr	r1, .L33
 837 002a D150     		str	r1, [r2, r3]
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 838              		.loc 1 517 0
 839 002c 7B68     		ldr	r3, [r7, #4]
 840 002e 5B69     		ldr	r3, [r3, #20]
 841 0030 7A68     		ldr	r2, [r7, #4]
 842 0032 5269     		ldr	r2, [r2, #20]
 843 0034 D168     		ldr	r1, [r2, #12]
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 844              		.loc 1 519 0
 845 0036 7868     		ldr	r0, [r7, #4]
 846 0038 3722     		mov	r2, #55
 847 003a 825C     		ldrb	r2, [r0, r2]
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 848              		.loc 1 518 0
 849 003c 0120     		mov	r0, #1
 850 003e 041C     		mov	r4, r0
 851 0040 9440     		lsl	r4, r4, r2
 852 0042 221C     		mov	r2, r4
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 853              		.loc 1 517 0
 854 0044 0A43     		orr	r2, r1
 855 0046 DA60     		str	r2, [r3, #12]
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 856              		.loc 1 520 0
 857 0048 7A68     		ldr	r2, [r7, #4]
 858 004a 2023     		mov	r3, #32
 859 004c D35C     		ldrb	r3, [r2, r3]
 860 004e 012B     		cmp	r3, #1
 861 0050 0DD1     		bne	.L27
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 862              		.loc 1 522 0
 863 0052 7B68     		ldr	r3, [r7, #4]
 864 0054 5B69     		ldr	r3, [r3, #20]
 865 0056 7A68     		ldr	r2, [r7, #4]
 866 0058 5269     		ldr	r2, [r2, #20]
 867 005a D168     		ldr	r1, [r2, #12]
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 868              		.loc 1 524 0
 869 005c 7868     		ldr	r0, [r7, #4]
 870 005e 3822     		mov	r2, #56
 871 0060 825C     		ldrb	r2, [r0, r2]
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 872              		.loc 1 523 0
 873 0062 0120     		mov	r0, #1
 874 0064 041C     		mov	r4, r0
 875 0066 9440     		lsl	r4, r4, r2
 876 0068 221C     		mov	r2, r4
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 877              		.loc 1 522 0
 878 006a 0A43     		orr	r2, r1
 879 006c DA60     		str	r2, [r3, #12]
 880              	.L27:
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 881              		.loc 1 528 0
 882 006e 7B68     		ldr	r3, [r7, #4]
 883 0070 9B7B     		ldrb	r3, [r3, #14]
 884 0072 002B     		cmp	r3, #0
 885 0074 15D1     		bne	.L28
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 886              		.loc 1 530 0
 887 0076 7B68     		ldr	r3, [r7, #4]
 888 0078 9B69     		ldr	r3, [r3, #24]
 889 007a 7A68     		ldr	r2, [r7, #4]
 890 007c 9269     		ldr	r2, [r2, #24]
 891 007e D268     		ldr	r2, [r2, #12]
 892 0080 0121     		mov	r1, #1
 893 0082 0A43     		orr	r2, r1
 894 0084 DA60     		str	r2, [r3, #12]
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 895              		.loc 1 531 0
 896 0086 7A68     		ldr	r2, [r7, #4]
 897 0088 2023     		mov	r3, #32
 898 008a D35C     		ldrb	r3, [r2, r3]
 899 008c 012B     		cmp	r3, #1
 900 008e 61D1     		bne	.L29
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 901              		.loc 1 533 0
 902 0090 7B68     		ldr	r3, [r7, #4]
 903 0092 DB69     		ldr	r3, [r3, #28]
 904 0094 7A68     		ldr	r2, [r7, #4]
 905 0096 D269     		ldr	r2, [r2, #28]
 906 0098 D268     		ldr	r2, [r2, #12]
 907 009a 0121     		mov	r1, #1
 908 009c 0A43     		orr	r2, r1
 909 009e DA60     		str	r2, [r3, #12]
 910 00a0 58E0     		b	.L29
 911              	.L28:
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 912              		.loc 1 539 0
 913 00a2 7B68     		ldr	r3, [r7, #4]
 914 00a4 9B7B     		ldrb	r3, [r3, #14]
 915 00a6 012B     		cmp	r3, #1
 916 00a8 25D1     		bne	.L30
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 917              		.loc 1 541 0
 918 00aa 7B68     		ldr	r3, [r7, #4]
 919 00ac 9B69     		ldr	r3, [r3, #24]
 920 00ae 7A68     		ldr	r2, [r7, #4]
 921 00b0 9269     		ldr	r2, [r2, #24]
 922 00b2 1168     		ldr	r1, [r2]
 923 00b4 2F4A     		ldr	r2, .L33+4
 924 00b6 0A40     		and	r2, r1
 925 00b8 1A60     		str	r2, [r3]
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 926              		.loc 1 543 0
 927 00ba 7B68     		ldr	r3, [r7, #4]
 928 00bc 9B69     		ldr	r3, [r3, #24]
 929 00be 7A68     		ldr	r2, [r7, #4]
 930 00c0 9269     		ldr	r2, [r2, #24]
 931 00c2 5268     		ldr	r2, [r2, #4]
 932 00c4 0321     		mov	r1, #3
 933 00c6 8A43     		bic	r2, r1
 934 00c8 5A60     		str	r2, [r3, #4]
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 935              		.loc 1 544 0
 936 00ca 7B68     		ldr	r3, [r7, #4]
 937 00cc 9B69     		ldr	r3, [r3, #24]
 938 00ce 7A68     		ldr	r2, [r7, #4]
 939 00d0 9269     		ldr	r2, [r2, #24]
 940 00d2 1168     		ldr	r1, [r2]
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 941              		.loc 1 545 0
 942 00d4 7868     		ldr	r0, [r7, #4]
 943 00d6 2322     		mov	r2, #35
 944 00d8 825C     		ldrb	r2, [r0, r2]
 945 00da 1004     		lsl	r0, r2, #16
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 946              		.loc 1 546 0
 947 00dc C022     		mov	r2, #192
 948 00de 9202     		lsl	r2, r2, #10
 949 00e0 0240     		and	r2, r0
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 950              		.loc 1 544 0
 951 00e2 0A43     		orr	r2, r1
 952 00e4 1A60     		str	r2, [r3]
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 953              		.loc 1 548 0
 954 00e6 7B68     		ldr	r3, [r7, #4]
 955 00e8 9B69     		ldr	r3, [r3, #24]
 956 00ea 7A68     		ldr	r2, [r7, #4]
 957 00ec 9269     		ldr	r2, [r2, #24]
 958 00ee 5268     		ldr	r2, [r2, #4]
 959 00f0 0121     		mov	r1, #1
 960 00f2 0A43     		orr	r2, r1
 961 00f4 5A60     		str	r2, [r3, #4]
 962              	.L30:
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 963              		.loc 1 552 0
 964 00f6 7B68     		ldr	r3, [r7, #4]
 965 00f8 9B7B     		ldrb	r3, [r3, #14]
 966 00fa 012B     		cmp	r3, #1
 967 00fc 2AD1     		bne	.L29
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 968              		.loc 1 553 0 discriminator 1
 969 00fe 7A68     		ldr	r2, [r7, #4]
 970 0100 2023     		mov	r3, #32
 971 0102 D35C     		ldrb	r3, [r2, r3]
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 972              		.loc 1 552 0 discriminator 1
 973 0104 012B     		cmp	r3, #1
 974 0106 25D1     		bne	.L29
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 975              		.loc 1 556 0
 976 0108 7B68     		ldr	r3, [r7, #4]
 977 010a DB69     		ldr	r3, [r3, #28]
 978 010c 7A68     		ldr	r2, [r7, #4]
 979 010e D269     		ldr	r2, [r2, #28]
 980 0110 1168     		ldr	r1, [r2]
 981 0112 184A     		ldr	r2, .L33+4
 982 0114 0A40     		and	r2, r1
 983 0116 1A60     		str	r2, [r3]
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 984              		.loc 1 557 0
 985 0118 7B68     		ldr	r3, [r7, #4]
 986 011a DB69     		ldr	r3, [r3, #28]
 987 011c 7A68     		ldr	r2, [r7, #4]
 988 011e D269     		ldr	r2, [r2, #28]
 989 0120 5268     		ldr	r2, [r2, #4]
 990 0122 0321     		mov	r1, #3
 991 0124 8A43     		bic	r2, r1
 992 0126 5A60     		str	r2, [r3, #4]
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 993              		.loc 1 558 0
 994 0128 7B68     		ldr	r3, [r7, #4]
 995 012a DB69     		ldr	r3, [r3, #28]
 996 012c 7A68     		ldr	r2, [r7, #4]
 997 012e D269     		ldr	r2, [r2, #28]
 998 0130 1168     		ldr	r1, [r2]
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 999              		.loc 1 559 0
 1000 0132 7868     		ldr	r0, [r7, #4]
 1001 0134 2322     		mov	r2, #35
 1002 0136 825C     		ldrb	r2, [r0, r2]
 1003 0138 1004     		lsl	r0, r2, #16
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1004              		.loc 1 560 0
 1005 013a C022     		mov	r2, #192
 1006 013c 9202     		lsl	r2, r2, #10
 1007 013e 0240     		and	r2, r0
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1008              		.loc 1 558 0
 1009 0140 0A43     		orr	r2, r1
 1010 0142 1A60     		str	r2, [r3]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1011              		.loc 1 562 0
 1012 0144 7B68     		ldr	r3, [r7, #4]
 1013 0146 DB69     		ldr	r3, [r3, #28]
 1014 0148 7A68     		ldr	r2, [r7, #4]
 1015 014a D269     		ldr	r2, [r2, #28]
 1016 014c 5268     		ldr	r2, [r2, #4]
 1017 014e 0121     		mov	r1, #1
 1018 0150 0A43     		orr	r2, r1
 1019 0152 5A60     		str	r2, [r3, #4]
 1020              	.L29:
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1021              		.loc 1 567 0
 1022 0154 7B68     		ldr	r3, [r7, #4]
 1023 0156 DB6B     		ldr	r3, [r3, #60]
 1024 0158 0222     		mov	r2, #2
 1025 015a 1A70     		strb	r2, [r3]
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1026              		.loc 1 568 0
 1027 015c 0023     		mov	r3, #0
 1028 015e FB60     		str	r3, [r7, #12]
 1029 0160 00E0     		b	.L26
 1030              	.L32:
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1031              		.loc 1 511 0
 1032 0162 C046     		mov	r8, r8
 1033              	.L26:
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1034              		.loc 1 570 0
 1035 0164 FB68     		ldr	r3, [r7, #12]
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1036              		.loc 1 571 0
 1037 0166 181C     		mov	r0, r3
 1038 0168 BD46     		mov	sp, r7
 1039 016a 05B0     		add	sp, sp, #20
 1040              		@ sp needed for prologue
 1041 016c 90BD     		pop	{r4, r7, pc}
 1042              	.L34:
 1043 016e C046     		.align	2
 1044              	.L33:
 1045 0170 0F0F0000 		.word	3855
 1046 0174 FFFFFCF9 		.word	-100859905
 1047              		.cfi_endproc
 1048              	.LFE41:
 1050              		.section	.text.PWMSP001_Stop,"ax",%progbits
 1051              		.align	2
 1052              		.global	PWMSP001_Stop
 1053              		.code	16
 1054              		.thumb_func
 1056              	PWMSP001_Stop:
 1057              	.LFB42:
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1058              		.loc 1 576 0
 1059              		.cfi_startproc
 1060 0000 80B5     		push	{r7, lr}
 1061              	.LCFI12:
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 86B0     		sub	sp, sp, #24
 1066              	.LCFI13:
 1067              		.cfi_def_cfa_offset 32
 1068 0004 00AF     		add	r7, sp, #0
 1069              	.LCFI14:
 1070              		.cfi_def_cfa_register 7
 1071 0006 7860     		str	r0, [r7, #4]
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1072              		.loc 1 577 0
 1073 0008 0123     		mov	r3, #1
 1074 000a 7B61     		str	r3, [r7, #20]
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1075              		.loc 1 584 0
 1076 000c 7B68     		ldr	r3, [r7, #4]
 1077 000e DB6B     		ldr	r3, [r3, #60]
 1078 0010 1B78     		ldrb	r3, [r3]
 1079 0012 022B     		cmp	r3, #2
 1080 0014 39D1     		bne	.L40
 1081              	.L36:
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1082              		.loc 1 590 0
 1083 0016 7A68     		ldr	r2, [r7, #4]
 1084 0018 3723     		mov	r3, #55
 1085 001a D35C     		ldrb	r3, [r2, r3]
 1086 001c 3B61     		str	r3, [r7, #16]
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1087              		.loc 1 591 0
 1088 001e 8023     		mov	r3, #128
 1089 0020 9B00     		lsl	r3, r3, #2
 1090 0022 FB60     		str	r3, [r7, #12]
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1091              		.loc 1 592 0
 1092 0024 7B68     		ldr	r3, [r7, #4]
 1093 0026 9B69     		ldr	r3, [r3, #24]
 1094 0028 0722     		mov	r2, #7
 1095 002a 1A61     		str	r2, [r3, #16]
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1096              		.loc 1 593 0
 1097 002c 7B68     		ldr	r3, [r7, #4]
 1098 002e 5B69     		ldr	r3, [r3, #20]
 1099 0030 7A68     		ldr	r2, [r7, #4]
 1100 0032 5269     		ldr	r2, [r2, #20]
 1101 0034 9168     		ldr	r1, [r2, #8]
 1102 0036 3A69     		ldr	r2, [r7, #16]
 1103 0038 0120     		mov	r0, #1
 1104 003a 9040     		lsl	r0, r0, r2
 1105 003c FA68     		ldr	r2, [r7, #12]
 1106 003e 0243     		orr	r2, r0
 1107 0040 0A43     		orr	r2, r1
 1108 0042 9A60     		str	r2, [r3, #8]
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1109              		.loc 1 595 0
 1110 0044 7A68     		ldr	r2, [r7, #4]
 1111 0046 2023     		mov	r3, #32
 1112 0048 D35C     		ldrb	r3, [r2, r3]
 1113 004a 012B     		cmp	r3, #1
 1114 004c 16D1     		bne	.L38
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1115              		.loc 1 597 0
 1116 004e 7B68     		ldr	r3, [r7, #4]
 1117 0050 DB69     		ldr	r3, [r3, #28]
 1118 0052 0722     		mov	r2, #7
 1119 0054 1A61     		str	r2, [r3, #16]
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1120              		.loc 1 598 0
 1121 0056 7A68     		ldr	r2, [r7, #4]
 1122 0058 3823     		mov	r3, #56
 1123 005a D35C     		ldrb	r3, [r2, r3]
 1124 005c 3B61     		str	r3, [r7, #16]
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1125              		.loc 1 599 0
 1126 005e 8023     		mov	r3, #128
 1127 0060 9B00     		lsl	r3, r3, #2
 1128 0062 FB60     		str	r3, [r7, #12]
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1129              		.loc 1 600 0
 1130 0064 7B68     		ldr	r3, [r7, #4]
 1131 0066 5B69     		ldr	r3, [r3, #20]
 1132 0068 7A68     		ldr	r2, [r7, #4]
 1133 006a 5269     		ldr	r2, [r2, #20]
 1134 006c 9168     		ldr	r1, [r2, #8]
 1135 006e 3A69     		ldr	r2, [r7, #16]
 1136 0070 0120     		mov	r0, #1
 1137 0072 9040     		lsl	r0, r0, r2
 1138 0074 FA68     		ldr	r2, [r7, #12]
 1139 0076 0243     		orr	r2, r0
 1140 0078 0A43     		orr	r2, r1
 1141 007a 9A60     		str	r2, [r3, #8]
 1142              	.L38:
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1143              		.loc 1 603 0
 1144 007c 7B68     		ldr	r3, [r7, #4]
 1145 007e DB6B     		ldr	r3, [r3, #60]
 1146 0080 0322     		mov	r2, #3
 1147 0082 1A70     		strb	r2, [r3]
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1148              		.loc 1 604 0
 1149 0084 0023     		mov	r3, #0
 1150 0086 7B61     		str	r3, [r7, #20]
 1151 0088 00E0     		b	.L37
 1152              	.L40:
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1153              		.loc 1 586 0
 1154 008a C046     		mov	r8, r8
 1155              	.L37:
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1156              		.loc 1 612 0
 1157 008c 7B69     		ldr	r3, [r7, #20]
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1158              		.loc 1 613 0
 1159 008e 181C     		mov	r0, r3
 1160 0090 BD46     		mov	sp, r7
 1161 0092 06B0     		add	sp, sp, #24
 1162              		@ sp needed for prologue
 1163 0094 80BD     		pop	{r7, pc}
 1164              		.cfi_endproc
 1165              	.LFE42:
 1167 0096 C046     		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1168              		.align	2
 1169              		.global	PWMSP001_SetCompare
 1170              		.code	16
 1171              		.thumb_func
 1173              	PWMSP001_SetCompare:
 1174              	.LFB43:
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1175              		.loc 1 622 0
 1176              		.cfi_startproc
 1177 0000 80B5     		push	{r7, lr}
 1178              	.LCFI15:
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 84B0     		sub	sp, sp, #16
 1183              	.LCFI16:
 1184              		.cfi_def_cfa_offset 24
 1185 0004 00AF     		add	r7, sp, #0
 1186              	.LCFI17:
 1187              		.cfi_def_cfa_register 7
 1188 0006 7860     		str	r0, [r7, #4]
 1189 0008 3960     		str	r1, [r7]
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1190              		.loc 1 623 0
 1191 000a 0123     		mov	r3, #1
 1192 000c FB60     		str	r3, [r7, #12]
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1193              		.loc 1 626 0
 1194 000e 7A68     		ldr	r2, [r7, #4]
 1195 0010 2023     		mov	r3, #32
 1196 0012 D35C     		ldrb	r3, [r2, r3]
 1197 0014 012B     		cmp	r3, #1
 1198 0016 09D1     		bne	.L42
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1199              		.loc 1 627 0
 1200 0018 7B68     		ldr	r3, [r7, #4]
 1201 001a DB69     		ldr	r3, [r3, #28]
 1202 001c 5B6B     		ldr	r3, [r3, #52]
 1203 001e 1A04     		lsl	r2, r3, #16
 1204 0020 7B68     		ldr	r3, [r7, #4]
 1205 0022 9B69     		ldr	r3, [r3, #24]
 1206 0024 5B6B     		ldr	r3, [r3, #52]
 1207 0026 1343     		orr	r3, r2
 1208 0028 BB60     		str	r3, [r7, #8]
 1209 002a 03E0     		b	.L43
 1210              	.L42:
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1211              		.loc 1 629 0
 1212 002c 7B68     		ldr	r3, [r7, #4]
 1213 002e 9B69     		ldr	r3, [r3, #24]
 1214 0030 5B6B     		ldr	r3, [r3, #52]
 1215 0032 BB60     		str	r3, [r7, #8]
 1216              	.L43:
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1217              		.loc 1 632 0
 1218 0034 7B68     		ldr	r3, [r7, #4]
 1219 0036 DB6B     		ldr	r3, [r3, #60]
 1220 0038 1B78     		ldrb	r3, [r3]
 1221 003a 002B     		cmp	r3, #0
 1222 003c 1CD0     		beq	.L44
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1223              		.loc 1 634 0
 1224 003e 7B68     		ldr	r3, [r7, #4]
 1225 0040 DA6A     		ldr	r2, [r3, #44]
 1226 0042 3B68     		ldr	r3, [r7]
 1227 0044 9A42     		cmp	r2, r3
 1228 0046 07D2     		bcs	.L45
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1229              		.loc 1 635 0 discriminator 1
 1230 0048 7A68     		ldr	r2, [r7, #4]
 1231 004a 2023     		mov	r3, #32
 1232 004c D35C     		ldrb	r3, [r2, r3]
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1233              		.loc 1 634 0 discriminator 1
 1234 004e 002B     		cmp	r3, #0
 1235 0050 02D1     		bne	.L45
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1236              		.loc 1 637 0
 1237 0052 0223     		mov	r3, #2
 1238 0054 FB60     		str	r3, [r7, #12]
 1239 0056 0FE0     		b	.L44
 1240              	.L45:
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1241              		.loc 1 643 0
 1242 0058 3A68     		ldr	r2, [r7]
 1243 005a BB68     		ldr	r3, [r7, #8]
 1244 005c 9A42     		cmp	r2, r3
 1245 005e 02D3     		bcc	.L46
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1246              		.loc 1 645 0
 1247 0060 BB68     		ldr	r3, [r7, #8]
 1248 0062 0133     		add	r3, r3, #1
 1249 0064 3B60     		str	r3, [r7]
 1250              	.L46:
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1251              		.loc 1 648 0
 1252 0066 7B68     		ldr	r3, [r7, #4]
 1253 0068 1B6C     		ldr	r3, [r3, #64]
 1254 006a 7968     		ldr	r1, [r7, #4]
 1255 006c 3A68     		ldr	r2, [r7]
 1256 006e 081C     		mov	r0, r1
 1257 0070 111C     		mov	r1, r2
 1258 0072 9847     		blx	r3
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1259              		.loc 1 649 0
 1260 0074 0023     		mov	r3, #0
 1261 0076 FB60     		str	r3, [r7, #12]
 1262              	.L44:
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1263              		.loc 1 652 0
 1264 0078 FB68     		ldr	r3, [r7, #12]
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1265              		.loc 1 653 0
 1266 007a 181C     		mov	r0, r3
 1267 007c BD46     		mov	sp, r7
 1268 007e 04B0     		add	sp, sp, #16
 1269              		@ sp needed for prologue
 1270 0080 80BD     		pop	{r7, pc}
 1271              		.cfi_endproc
 1272              	.LFE43:
 1274 0082 C046     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1275              		.align	2
 1276              		.global	PWMSP001_lSetCompareEdgeAlign
 1277              		.code	16
 1278              		.thumb_func
 1280              	PWMSP001_lSetCompareEdgeAlign:
 1281              	.LFB44:
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1282              		.loc 1 664 0
 1283              		.cfi_startproc
 1284 0000 90B5     		push	{r4, r7, lr}
 1285              	.LCFI18:
 1286              		.cfi_def_cfa_offset 12
 1287              		.cfi_offset 4, -12
 1288              		.cfi_offset 7, -8
 1289              		.cfi_offset 14, -4
 1290 0002 87B0     		sub	sp, sp, #28
 1291              	.LCFI19:
 1292              		.cfi_def_cfa_offset 40
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI20:
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 1297 0008 3960     		str	r1, [r7]
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1298              		.loc 1 667 0
 1299 000a 7B68     		ldr	r3, [r7, #4]
 1300 000c 7B61     		str	r3, [r7, #20]
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1301              		.loc 1 668 0
 1302 000e 7B69     		ldr	r3, [r7, #20]
 1303 0010 9B69     		ldr	r3, [r3, #24]
 1304 0012 3A68     		ldr	r2, [r7]
 1305 0014 1204     		lsl	r2, r2, #16
 1306 0016 120C     		lsr	r2, r2, #16
 1307 0018 DA63     		str	r2, [r3, #60]
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1308              		.loc 1 671 0
 1309 001a 7A69     		ldr	r2, [r7, #20]
 1310 001c 3723     		mov	r3, #55
 1311 001e D35C     		ldrb	r3, [r2, r3]
 1312 0020 9B00     		lsl	r3, r3, #2
 1313 0022 3B61     		str	r3, [r7, #16]
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1314              		.loc 1 672 0
 1315 0024 3B69     		ldr	r3, [r7, #16]
 1316 0026 FB60     		str	r3, [r7, #12]
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1317              		.loc 1 673 0
 1318 0028 7B69     		ldr	r3, [r7, #20]
 1319 002a 5B69     		ldr	r3, [r3, #20]
 1320 002c 7A69     		ldr	r2, [r7, #20]
 1321 002e 5269     		ldr	r2, [r2, #20]
 1322 0030 1169     		ldr	r1, [r2, #16]
 1323 0032 FA68     		ldr	r2, [r7, #12]
 1324 0034 0120     		mov	r0, #1
 1325 0036 041C     		mov	r4, r0
 1326 0038 9440     		lsl	r4, r4, r2
 1327 003a 221C     		mov	r2, r4
 1328 003c 0A43     		orr	r2, r1
 1329 003e 1A61     		str	r2, [r3, #16]
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1330              		.loc 1 674 0
 1331 0040 BD46     		mov	sp, r7
 1332 0042 07B0     		add	sp, sp, #28
 1333              		@ sp needed for prologue
 1334 0044 90BD     		pop	{r4, r7, pc}
 1335              		.cfi_endproc
 1336              	.LFE44:
 1338              		.global	__aeabi_uidivmod
 1339              		.global	__aeabi_uidiv
 1340 0046 C046     		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1341              		.align	2
 1342              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1343              		.code	16
 1344              		.thumb_func
 1346              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1347              	.LFB45:
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1348              		.loc 1 685 0
 1349              		.cfi_startproc
 1350 0000 B0B5     		push	{r4, r5, r7, lr}
 1351              	.LCFI21:
 1352              		.cfi_def_cfa_offset 16
 1353              		.cfi_offset 4, -16
 1354              		.cfi_offset 5, -12
 1355              		.cfi_offset 7, -8
 1356              		.cfi_offset 14, -4
 1357 0002 88B0     		sub	sp, sp, #32
 1358              	.LCFI22:
 1359              		.cfi_def_cfa_offset 48
 1360 0004 00AF     		add	r7, sp, #0
 1361              	.LCFI23:
 1362              		.cfi_def_cfa_register 7
 1363 0006 7860     		str	r0, [r7, #4]
 1364 0008 3960     		str	r1, [r7]
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1365              		.loc 1 686 0
 1366 000a 0023     		mov	r3, #0
 1367 000c FB61     		str	r3, [r7, #28]
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1368              		.loc 1 687 0
 1369 000e 0023     		mov	r3, #0
 1370 0010 BB61     		str	r3, [r7, #24]
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1371              		.loc 1 690 0
 1372 0012 7B68     		ldr	r3, [r7, #4]
 1373 0014 7B61     		str	r3, [r7, #20]
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1374              		.loc 1 700 0
 1375 0016 7B69     		ldr	r3, [r7, #20]
 1376 0018 9B69     		ldr	r3, [r3, #24]
 1377 001a 5B6B     		ldr	r3, [r3, #52]
 1378 001c 9BB2     		uxth	r3, r3
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1379              		.loc 1 699 0
 1380 001e 3A68     		ldr	r2, [r7]
 1381 0020 101C     		mov	r0, r2
 1382 0022 191C     		mov	r1, r3
 1383 0024 FFF7FEFF 		bl	__aeabi_uidivmod
 1384 0028 0B1C     		mov	r3, r1
 1385 002a FB61     		str	r3, [r7, #28]
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1386              		.loc 1 702 0
 1387 002c 7B69     		ldr	r3, [r7, #20]
 1388 002e 9B69     		ldr	r3, [r3, #24]
 1389 0030 5B6B     		ldr	r3, [r3, #52]
 1390 0032 9BB2     		uxth	r3, r3
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1391              		.loc 1 701 0
 1392 0034 3868     		ldr	r0, [r7]
 1393 0036 191C     		mov	r1, r3
 1394 0038 FFF7FEFF 		bl	__aeabi_uidiv
 1395 003c 031C     		mov	r3, r0
 1396 003e BB61     		str	r3, [r7, #24]
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1397              		.loc 1 704 0
 1398 0040 7B69     		ldr	r3, [r7, #20]
 1399 0042 9B69     		ldr	r3, [r3, #24]
 1400 0044 FA69     		ldr	r2, [r7, #28]
 1401 0046 1204     		lsl	r2, r2, #16
 1402 0048 120C     		lsr	r2, r2, #16
 1403 004a DA63     		str	r2, [r3, #60]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1404              		.loc 1 705 0
 1405 004c 7B69     		ldr	r3, [r7, #20]
 1406 004e DB69     		ldr	r3, [r3, #28]
 1407 0050 BA69     		ldr	r2, [r7, #24]
 1408 0052 1204     		lsl	r2, r2, #16
 1409 0054 120C     		lsr	r2, r2, #16
 1410 0056 DA63     		str	r2, [r3, #60]
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1411              		.loc 1 707 0
 1412 0058 7A69     		ldr	r2, [r7, #20]
 1413 005a 3823     		mov	r3, #56
 1414 005c D35C     		ldrb	r3, [r2, r3]
 1415 005e 9B00     		lsl	r3, r3, #2
 1416 0060 3B61     		str	r3, [r7, #16]
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1417              		.loc 1 708 0
 1418 0062 7A69     		ldr	r2, [r7, #20]
 1419 0064 3723     		mov	r3, #55
 1420 0066 D35C     		ldrb	r3, [r2, r3]
 1421 0068 9B00     		lsl	r3, r3, #2
 1422 006a FB60     		str	r3, [r7, #12]
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1423              		.loc 1 709 0
 1424 006c 7B69     		ldr	r3, [r7, #20]
 1425 006e 5B69     		ldr	r3, [r3, #20]
 1426 0070 7A69     		ldr	r2, [r7, #20]
 1427 0072 5269     		ldr	r2, [r2, #20]
 1428 0074 1169     		ldr	r1, [r2, #16]
 1429 0076 FA68     		ldr	r2, [r7, #12]
 1430 0078 0120     		mov	r0, #1
 1431 007a 9040     		lsl	r0, r0, r2
 1432 007c 3A69     		ldr	r2, [r7, #16]
 1433 007e 0124     		mov	r4, #1
 1434 0080 251C     		mov	r5, r4
 1435 0082 9540     		lsl	r5, r5, r2
 1436 0084 2A1C     		mov	r2, r5
 1437 0086 0243     		orr	r2, r0
 1438 0088 0A43     		orr	r2, r1
 1439 008a 1A61     		str	r2, [r3, #16]
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1440              		.loc 1 710 0
 1441 008c BD46     		mov	sp, r7
 1442 008e 08B0     		add	sp, sp, #32
 1443              		@ sp needed for prologue
 1444 0090 B0BD     		pop	{r4, r5, r7, pc}
 1445              		.cfi_endproc
 1446              	.LFE45:
 1448 0092 C046     		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1449              		.align	2
 1450              		.global	PWMSP001_lSetCompareCenterAlign
 1451              		.code	16
 1452              		.thumb_func
 1454              	PWMSP001_lSetCompareCenterAlign:
 1455              	.LFB46:
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1456              		.loc 1 721 0
 1457              		.cfi_startproc
 1458 0000 90B5     		push	{r4, r7, lr}
 1459              	.LCFI24:
 1460              		.cfi_def_cfa_offset 12
 1461              		.cfi_offset 4, -12
 1462              		.cfi_offset 7, -8
 1463              		.cfi_offset 14, -4
 1464 0002 85B0     		sub	sp, sp, #20
 1465              	.LCFI25:
 1466              		.cfi_def_cfa_offset 32
 1467 0004 00AF     		add	r7, sp, #0
 1468              	.LCFI26:
 1469              		.cfi_def_cfa_register 7
 1470 0006 7860     		str	r0, [r7, #4]
 1471 0008 3960     		str	r1, [r7]
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1472              		.loc 1 724 0
 1473 000a 7B68     		ldr	r3, [r7, #4]
 1474 000c FB60     		str	r3, [r7, #12]
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1475              		.loc 1 725 0
 1476 000e FB68     		ldr	r3, [r7, #12]
 1477 0010 9B69     		ldr	r3, [r3, #24]
 1478 0012 3A68     		ldr	r2, [r7]
 1479 0014 1204     		lsl	r2, r2, #16
 1480 0016 120C     		lsr	r2, r2, #16
 1481 0018 DA63     		str	r2, [r3, #60]
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1482              		.loc 1 728 0
 1483 001a FA68     		ldr	r2, [r7, #12]
 1484 001c 3723     		mov	r3, #55
 1485 001e D35C     		ldrb	r3, [r2, r3]
 1486 0020 9B00     		lsl	r3, r3, #2
 1487 0022 BB60     		str	r3, [r7, #8]
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1488              		.loc 1 729 0
 1489 0024 FB68     		ldr	r3, [r7, #12]
 1490 0026 5B69     		ldr	r3, [r3, #20]
 1491 0028 FA68     		ldr	r2, [r7, #12]
 1492 002a 5269     		ldr	r2, [r2, #20]
 1493 002c 1169     		ldr	r1, [r2, #16]
 1494 002e BA68     		ldr	r2, [r7, #8]
 1495 0030 0120     		mov	r0, #1
 1496 0032 041C     		mov	r4, r0
 1497 0034 9440     		lsl	r4, r4, r2
 1498 0036 221C     		mov	r2, r4
 1499 0038 0A43     		orr	r2, r1
 1500 003a 1A61     		str	r2, [r3, #16]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1501              		.loc 1 730 0
 1502 003c BD46     		mov	sp, r7
 1503 003e 05B0     		add	sp, sp, #20
 1504              		@ sp needed for prologue
 1505 0040 90BD     		pop	{r4, r7, pc}
 1506              		.cfi_endproc
 1507              	.LFE46:
 1509              		.global	__aeabi_fcmpgt
 1510              		.global	__aeabi_fcmplt
 1511 0042 C046     		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1512              		.align	2
 1513              		.global	PWMSP001_SetDutyCycle
 1514              		.code	16
 1515              		.thumb_func
 1517              	PWMSP001_SetDutyCycle:
 1518              	.LFB47:
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1519              		.loc 1 742 0
 1520              		.cfi_startproc
 1521 0000 80B5     		push	{r7, lr}
 1522              	.LCFI27:
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 7, -8
 1525              		.cfi_offset 14, -4
 1526 0002 84B0     		sub	sp, sp, #16
 1527              	.LCFI28:
 1528              		.cfi_def_cfa_offset 24
 1529 0004 00AF     		add	r7, sp, #0
 1530              	.LCFI29:
 1531              		.cfi_def_cfa_register 7
 1532 0006 7860     		str	r0, [r7, #4]
 1533 0008 3960     		str	r1, [r7]
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1534              		.loc 1 743 0
 1535 000a 0123     		mov	r3, #1
 1536 000c FB60     		str	r3, [r7, #12]
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1537              		.loc 1 745 0
 1538 000e 7B68     		ldr	r3, [r7, #4]
 1539 0010 DB6B     		ldr	r3, [r3, #60]
 1540 0012 1B78     		ldrb	r3, [r3]
 1541 0014 002B     		cmp	r3, #0
 1542 0016 19D0     		beq	.L52
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1543              		.loc 1 747 0
 1544 0018 3868     		ldr	r0, [r7]
 1545 001a 0F49     		ldr	r1, .L58
 1546 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 1547 0020 031C     		mov	r3, r0
 1548 0022 002B     		cmp	r3, #0
 1549 0024 06D1     		bne	.L53
 1550              		.loc 1 747 0 is_stmt 0 discriminator 1
 1551 0026 3868     		ldr	r0, [r7]
 1552 0028 0021     		mov	r1, #0
 1553 002a FFF7FEFF 		bl	__aeabi_fcmplt
 1554 002e 031C     		mov	r3, r0
 1555 0030 002B     		cmp	r3, #0
 1556 0032 02D0     		beq	.L57
 1557              	.L53:
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1558              		.loc 1 749 0 is_stmt 1
 1559 0034 0223     		mov	r3, #2
 1560 0036 FB60     		str	r3, [r7, #12]
 1561 0038 08E0     		b	.L52
 1562              	.L57:
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1563              		.loc 1 754 0
 1564 003a 7B68     		ldr	r3, [r7, #4]
 1565 003c 5B6C     		ldr	r3, [r3, #68]
 1566 003e 7968     		ldr	r1, [r7, #4]
 1567 0040 3A68     		ldr	r2, [r7]
 1568 0042 081C     		mov	r0, r1
 1569 0044 111C     		add	r1, r2, #0
 1570 0046 9847     		blx	r3
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1571              		.loc 1 755 0
 1572 0048 0023     		mov	r3, #0
 1573 004a FB60     		str	r3, [r7, #12]
 1574              	.L52:
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1575              		.loc 1 758 0
 1576 004c FB68     		ldr	r3, [r7, #12]
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1577              		.loc 1 759 0
 1578 004e 181C     		mov	r0, r3
 1579 0050 BD46     		mov	sp, r7
 1580 0052 04B0     		add	sp, sp, #16
 1581              		@ sp needed for prologue
 1582 0054 80BD     		pop	{r7, pc}
 1583              	.L59:
 1584 0056 C046     		.align	2
 1585              	.L58:
 1586 0058 0000C842 		.word	1120403456
 1587              		.cfi_endproc
 1588              	.LFE47:
 1590              		.global	__aeabi_fsub
 1591              		.global	__aeabi_fdiv
 1592              		.global	__aeabi_ui2f
 1593              		.global	__aeabi_fmul
 1594              		.global	__aeabi_f2uiz
 1595              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1596              		.align	2
 1597              		.global	PWMSP001_lSetDutyEdgeAlign
 1598              		.code	16
 1599              		.thumb_func
 1601              	PWMSP001_lSetDutyEdgeAlign:
 1602              	.LFB48:
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1603              		.loc 1 770 0
 1604              		.cfi_startproc
 1605 0000 90B5     		push	{r4, r7, lr}
 1606              	.LCFI30:
 1607              		.cfi_def_cfa_offset 12
 1608              		.cfi_offset 4, -12
 1609              		.cfi_offset 7, -8
 1610              		.cfi_offset 14, -4
 1611 0002 89B0     		sub	sp, sp, #36
 1612              	.LCFI31:
 1613              		.cfi_def_cfa_offset 48
 1614 0004 00AF     		add	r7, sp, #0
 1615              	.LCFI32:
 1616              		.cfi_def_cfa_register 7
 1617 0006 7860     		str	r0, [r7, #4]
 1618 0008 3960     		str	r1, [r7]
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1619              		.loc 1 771 0
 1620 000a 0023     		mov	r3, #0
 1621 000c FB61     		str	r3, [r7, #28]
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1622              		.loc 1 774 0
 1623 000e 7B68     		ldr	r3, [r7, #4]
 1624 0010 BB61     		str	r3, [r7, #24]
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1625              		.loc 1 775 0
 1626 0012 3B68     		ldr	r3, [r7]
 1627 0014 7B61     		str	r3, [r7, #20]
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1628              		.loc 1 779 0
 1629 0016 1C48     		ldr	r0, .L61
 1630 0018 7969     		ldr	r1, [r7, #20]
 1631 001a FFF7FEFF 		bl	__aeabi_fsub
 1632 001e 031C     		add	r3, r0, #0
 1633 0020 181C     		add	r0, r3, #0
 1634 0022 1949     		ldr	r1, .L61
 1635 0024 FFF7FEFF 		bl	__aeabi_fdiv
 1636 0028 031C     		add	r3, r0, #0
 1637 002a 7B61     		str	r3, [r7, #20]
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1638              		.loc 1 780 0
 1639 002c BB69     		ldr	r3, [r7, #24]
 1640 002e 9B69     		ldr	r3, [r3, #24]
 1641 0030 5B6B     		ldr	r3, [r3, #52]
 1642 0032 0133     		add	r3, r3, #1
 1643 0034 181C     		mov	r0, r3
 1644 0036 FFF7FEFF 		bl	__aeabi_ui2f
 1645 003a 031C     		add	r3, r0, #0
 1646 003c 3B61     		str	r3, [r7, #16]
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1647              		.loc 1 781 0
 1648 003e 3869     		ldr	r0, [r7, #16]
 1649 0040 7969     		ldr	r1, [r7, #20]
 1650 0042 FFF7FEFF 		bl	__aeabi_fmul
 1651 0046 031C     		add	r3, r0, #0
 1652 0048 181C     		add	r0, r3, #0
 1653 004a FFF7FEFF 		bl	__aeabi_f2uiz
 1654 004e 031C     		mov	r3, r0
 1655 0050 FB61     		str	r3, [r7, #28]
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1656              		.loc 1 782 0
 1657 0052 BB69     		ldr	r3, [r7, #24]
 1658 0054 9B69     		ldr	r3, [r3, #24]
 1659 0056 FA69     		ldr	r2, [r7, #28]
 1660 0058 1204     		lsl	r2, r2, #16
 1661 005a 120C     		lsr	r2, r2, #16
 1662 005c DA63     		str	r2, [r3, #60]
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1663              		.loc 1 785 0
 1664 005e BA69     		ldr	r2, [r7, #24]
 1665 0060 3723     		mov	r3, #55
 1666 0062 D35C     		ldrb	r3, [r2, r3]
 1667 0064 9B00     		lsl	r3, r3, #2
 1668 0066 FB60     		str	r3, [r7, #12]
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1669              		.loc 1 786 0
 1670 0068 BB69     		ldr	r3, [r7, #24]
 1671 006a 5B69     		ldr	r3, [r3, #20]
 1672 006c BA69     		ldr	r2, [r7, #24]
 1673 006e 5269     		ldr	r2, [r2, #20]
 1674 0070 1169     		ldr	r1, [r2, #16]
 1675 0072 FA68     		ldr	r2, [r7, #12]
 1676 0074 0120     		mov	r0, #1
 1677 0076 041C     		mov	r4, r0
 1678 0078 9440     		lsl	r4, r4, r2
 1679 007a 221C     		mov	r2, r4
 1680 007c 0A43     		orr	r2, r1
 1681 007e 1A61     		str	r2, [r3, #16]
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1682              		.loc 1 788 0
 1683 0080 BD46     		mov	sp, r7
 1684 0082 09B0     		add	sp, sp, #36
 1685              		@ sp needed for prologue
 1686 0084 90BD     		pop	{r4, r7, pc}
 1687              	.L62:
 1688 0086 C046     		.align	2
 1689              	.L61:
 1690 0088 0000C842 		.word	1120403456
 1691              		.cfi_endproc
 1692              	.LFE48:
 1694              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1695              		.align	2
 1696              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1697              		.code	16
 1698              		.thumb_func
 1700              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1701              	.LFB49:
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1702              		.loc 1 799 0
 1703              		.cfi_startproc
 1704 0000 B0B5     		push	{r4, r5, r7, lr}
 1705              	.LCFI33:
 1706              		.cfi_def_cfa_offset 16
 1707              		.cfi_offset 4, -16
 1708              		.cfi_offset 5, -12
 1709              		.cfi_offset 7, -8
 1710              		.cfi_offset 14, -4
 1711 0002 8AB0     		sub	sp, sp, #40
 1712              	.LCFI34:
 1713              		.cfi_def_cfa_offset 56
 1714 0004 00AF     		add	r7, sp, #0
 1715              	.LCFI35:
 1716              		.cfi_def_cfa_register 7
 1717 0006 7860     		str	r0, [r7, #4]
 1718 0008 3960     		str	r1, [r7]
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1719              		.loc 1 800 0
 1720 000a 0023     		mov	r3, #0
 1721 000c 7B62     		str	r3, [r7, #36]
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1722              		.loc 1 801 0
 1723 000e 0023     		mov	r3, #0
 1724 0010 3B62     		str	r3, [r7, #32]
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1725              		.loc 1 802 0
 1726 0012 0023     		mov	r3, #0
 1727 0014 FB61     		str	r3, [r7, #28]
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1728              		.loc 1 806 0
 1729 0016 7B68     		ldr	r3, [r7, #4]
 1730 0018 BB61     		str	r3, [r7, #24]
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1731              		.loc 1 808 0
 1732 001a 3B68     		ldr	r3, [r7]
 1733 001c 7B61     		str	r3, [r7, #20]
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1734              		.loc 1 811 0
 1735 001e BB69     		ldr	r3, [r7, #24]
 1736 0020 DB69     		ldr	r3, [r3, #28]
 1737 0022 5B6B     		ldr	r3, [r3, #52]
 1738 0024 0133     		add	r3, r3, #1
 1739 0026 7B62     		str	r3, [r7, #36]
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1740              		.loc 1 812 0
 1741 0028 BB69     		ldr	r3, [r7, #24]
 1742 002a 9B69     		ldr	r3, [r3, #24]
 1743 002c 5B6B     		ldr	r3, [r3, #52]
 1744 002e 1B04     		lsl	r3, r3, #16
 1745 0030 1B0C     		lsr	r3, r3, #16
 1746 0032 5A1C     		add	r2, r3, #1
 1747 0034 7B6A     		ldr	r3, [r7, #36]
 1748 0036 5343     		mul	r3, r2
 1749 0038 7B62     		str	r3, [r7, #36]
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1750              		.loc 1 813 0
 1751 003a 7B6A     		ldr	r3, [r7, #36]
 1752 003c 0133     		add	r3, r3, #1
 1753 003e 7B62     		str	r3, [r7, #36]
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1754              		.loc 1 815 0
 1755 0040 2C48     		ldr	r0, .L64
 1756 0042 7969     		ldr	r1, [r7, #20]
 1757 0044 FFF7FEFF 		bl	__aeabi_fsub
 1758 0048 031C     		add	r3, r0, #0
 1759 004a 181C     		add	r0, r3, #0
 1760 004c 2949     		ldr	r1, .L64
 1761 004e FFF7FEFF 		bl	__aeabi_fdiv
 1762 0052 031C     		add	r3, r0, #0
 1763 0054 7B61     		str	r3, [r7, #20]
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1764              		.loc 1 816 0
 1765 0056 786A     		ldr	r0, [r7, #36]
 1766 0058 FFF7FEFF 		bl	__aeabi_ui2f
 1767 005c 031C     		add	r3, r0, #0
 1768 005e 3B61     		str	r3, [r7, #16]
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1769              		.loc 1 817 0
 1770 0060 3869     		ldr	r0, [r7, #16]
 1771 0062 7969     		ldr	r1, [r7, #20]
 1772 0064 FFF7FEFF 		bl	__aeabi_fmul
 1773 0068 031C     		add	r3, r0, #0
 1774 006a 181C     		add	r0, r3, #0
 1775 006c FFF7FEFF 		bl	__aeabi_f2uiz
 1776 0070 031C     		mov	r3, r0
 1777 0072 7B62     		str	r3, [r7, #36]
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1778              		.loc 1 820 0
 1779 0074 BB69     		ldr	r3, [r7, #24]
 1780 0076 9B69     		ldr	r3, [r3, #24]
 1781 0078 5B6B     		ldr	r3, [r3, #52]
 1782 007a 1B04     		lsl	r3, r3, #16
 1783 007c 1B0C     		lsr	r3, r3, #16
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1784              		.loc 1 819 0
 1785 007e 7A6A     		ldr	r2, [r7, #36]
 1786 0080 101C     		mov	r0, r2
 1787 0082 191C     		mov	r1, r3
 1788 0084 FFF7FEFF 		bl	__aeabi_uidivmod
 1789 0088 0B1C     		mov	r3, r1
 1790 008a 3B62     		str	r3, [r7, #32]
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1791              		.loc 1 821 0
 1792 008c BB69     		ldr	r3, [r7, #24]
 1793 008e 9B69     		ldr	r3, [r3, #24]
 1794 0090 3A6A     		ldr	r2, [r7, #32]
 1795 0092 1204     		lsl	r2, r2, #16
 1796 0094 120C     		lsr	r2, r2, #16
 1797 0096 DA63     		str	r2, [r3, #60]
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1798              		.loc 1 823 0
 1799 0098 BB69     		ldr	r3, [r7, #24]
 1800 009a 9B69     		ldr	r3, [r3, #24]
 1801 009c 5B6B     		ldr	r3, [r3, #52]
 1802 009e 1B04     		lsl	r3, r3, #16
 1803 00a0 1B0C     		lsr	r3, r3, #16
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1804              		.loc 1 822 0
 1805 00a2 786A     		ldr	r0, [r7, #36]
 1806 00a4 191C     		mov	r1, r3
 1807 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 1808 00aa 031C     		mov	r3, r0
 1809 00ac FB61     		str	r3, [r7, #28]
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1810              		.loc 1 824 0
 1811 00ae BB69     		ldr	r3, [r7, #24]
 1812 00b0 DB69     		ldr	r3, [r3, #28]
 1813 00b2 FA69     		ldr	r2, [r7, #28]
 1814 00b4 1204     		lsl	r2, r2, #16
 1815 00b6 120C     		lsr	r2, r2, #16
 1816 00b8 DA63     		str	r2, [r3, #60]
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1817              		.loc 1 827 0
 1818 00ba BA69     		ldr	r2, [r7, #24]
 1819 00bc 3723     		mov	r3, #55
 1820 00be D35C     		ldrb	r3, [r2, r3]
 1821 00c0 9B00     		lsl	r3, r3, #2
 1822 00c2 FB60     		str	r3, [r7, #12]
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1823              		.loc 1 828 0
 1824 00c4 BA69     		ldr	r2, [r7, #24]
 1825 00c6 3823     		mov	r3, #56
 1826 00c8 D35C     		ldrb	r3, [r2, r3]
 1827 00ca 9B00     		lsl	r3, r3, #2
 1828 00cc BB60     		str	r3, [r7, #8]
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1829              		.loc 1 829 0
 1830 00ce BB69     		ldr	r3, [r7, #24]
 1831 00d0 5B69     		ldr	r3, [r3, #20]
 1832 00d2 BA69     		ldr	r2, [r7, #24]
 1833 00d4 5269     		ldr	r2, [r2, #20]
 1834 00d6 1169     		ldr	r1, [r2, #16]
 1835 00d8 FA68     		ldr	r2, [r7, #12]
 1836 00da 0120     		mov	r0, #1
 1837 00dc 9040     		lsl	r0, r0, r2
 1838 00de BA68     		ldr	r2, [r7, #8]
 1839 00e0 0124     		mov	r4, #1
 1840 00e2 251C     		mov	r5, r4
 1841 00e4 9540     		lsl	r5, r5, r2
 1842 00e6 2A1C     		mov	r2, r5
 1843 00e8 0243     		orr	r2, r0
 1844 00ea 0A43     		orr	r2, r1
 1845 00ec 1A61     		str	r2, [r3, #16]
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1846              		.loc 1 830 0
 1847 00ee BD46     		mov	sp, r7
 1848 00f0 0AB0     		add	sp, sp, #40
 1849              		@ sp needed for prologue
 1850 00f2 B0BD     		pop	{r4, r5, r7, pc}
 1851              	.L65:
 1852              		.align	2
 1853              	.L64:
 1854 00f4 0000C842 		.word	1120403456
 1855              		.cfi_endproc
 1856              	.LFE49:
 1858              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1859              		.align	2
 1860              		.global	PWMSP001_lSetDutyCenterAlign
 1861              		.code	16
 1862              		.thumb_func
 1864              	PWMSP001_lSetDutyCenterAlign:
 1865              	.LFB50:
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1866              		.loc 1 841 0
 1867              		.cfi_startproc
 1868 0000 90B5     		push	{r4, r7, lr}
 1869              	.LCFI36:
 1870              		.cfi_def_cfa_offset 12
 1871              		.cfi_offset 4, -12
 1872              		.cfi_offset 7, -8
 1873              		.cfi_offset 14, -4
 1874 0002 89B0     		sub	sp, sp, #36
 1875              	.LCFI37:
 1876              		.cfi_def_cfa_offset 48
 1877 0004 00AF     		add	r7, sp, #0
 1878              	.LCFI38:
 1879              		.cfi_def_cfa_register 7
 1880 0006 7860     		str	r0, [r7, #4]
 1881 0008 3960     		str	r1, [r7]
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1882              		.loc 1 843 0
 1883 000a 0023     		mov	r3, #0
 1884 000c FB61     		str	r3, [r7, #28]
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1885              		.loc 1 846 0
 1886 000e 7B68     		ldr	r3, [r7, #4]
 1887 0010 BB61     		str	r3, [r7, #24]
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1888              		.loc 1 847 0
 1889 0012 3B68     		ldr	r3, [r7]
 1890 0014 7B61     		str	r3, [r7, #20]
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1891              		.loc 1 849 0
 1892 0016 1B48     		ldr	r0, .L67
 1893 0018 7969     		ldr	r1, [r7, #20]
 1894 001a FFF7FEFF 		bl	__aeabi_fsub
 1895 001e 031C     		add	r3, r0, #0
 1896 0020 181C     		add	r0, r3, #0
 1897 0022 1849     		ldr	r1, .L67
 1898 0024 FFF7FEFF 		bl	__aeabi_fdiv
 1899 0028 031C     		add	r3, r0, #0
 1900 002a 7B61     		str	r3, [r7, #20]
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1901              		.loc 1 850 0
 1902 002c BB69     		ldr	r3, [r7, #24]
 1903 002e 9B69     		ldr	r3, [r3, #24]
 1904 0030 5B6B     		ldr	r3, [r3, #52]
 1905 0032 181C     		mov	r0, r3
 1906 0034 FFF7FEFF 		bl	__aeabi_ui2f
 1907 0038 031C     		add	r3, r0, #0
 1908 003a 3B61     		str	r3, [r7, #16]
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1909              		.loc 1 851 0
 1910 003c 3869     		ldr	r0, [r7, #16]
 1911 003e 7969     		ldr	r1, [r7, #20]
 1912 0040 FFF7FEFF 		bl	__aeabi_fmul
 1913 0044 031C     		add	r3, r0, #0
 1914 0046 181C     		add	r0, r3, #0
 1915 0048 FFF7FEFF 		bl	__aeabi_f2uiz
 1916 004c 031C     		mov	r3, r0
 1917 004e FB61     		str	r3, [r7, #28]
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1918              		.loc 1 852 0
 1919 0050 BB69     		ldr	r3, [r7, #24]
 1920 0052 9B69     		ldr	r3, [r3, #24]
 1921 0054 FA69     		ldr	r2, [r7, #28]
 1922 0056 1204     		lsl	r2, r2, #16
 1923 0058 120C     		lsr	r2, r2, #16
 1924 005a DA63     		str	r2, [r3, #60]
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1925              		.loc 1 855 0
 1926 005c BA69     		ldr	r2, [r7, #24]
 1927 005e 3723     		mov	r3, #55
 1928 0060 D35C     		ldrb	r3, [r2, r3]
 1929 0062 9B00     		lsl	r3, r3, #2
 1930 0064 FB60     		str	r3, [r7, #12]
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1931              		.loc 1 856 0
 1932 0066 BB69     		ldr	r3, [r7, #24]
 1933 0068 5B69     		ldr	r3, [r3, #20]
 1934 006a BA69     		ldr	r2, [r7, #24]
 1935 006c 5269     		ldr	r2, [r2, #20]
 1936 006e 1169     		ldr	r1, [r2, #16]
 1937 0070 FA68     		ldr	r2, [r7, #12]
 1938 0072 0120     		mov	r0, #1
 1939 0074 041C     		mov	r4, r0
 1940 0076 9440     		lsl	r4, r4, r2
 1941 0078 221C     		mov	r2, r4
 1942 007a 0A43     		orr	r2, r1
 1943 007c 1A61     		str	r2, [r3, #16]
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1944              		.loc 1 857 0
 1945 007e BD46     		mov	sp, r7
 1946 0080 09B0     		add	sp, sp, #36
 1947              		@ sp needed for prologue
 1948 0082 90BD     		pop	{r4, r7, pc}
 1949              	.L68:
 1950              		.align	2
 1951              	.L67:
 1952 0084 0000C842 		.word	1120403456
 1953              		.cfi_endproc
 1954              	.LFE50:
 1956              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1957              		.align	2
 1958              		.global	PWMSP001_SetPeriodAndCompare
 1959              		.code	16
 1960              		.thumb_func
 1962              	PWMSP001_SetPeriodAndCompare:
 1963              	.LFB51:
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1964              		.loc 1 870 0
 1965              		.cfi_startproc
 1966 0000 80B5     		push	{r7, lr}
 1967              	.LCFI39:
 1968              		.cfi_def_cfa_offset 8
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 86B0     		sub	sp, sp, #24
 1972              	.LCFI40:
 1973              		.cfi_def_cfa_offset 32
 1974 0004 00AF     		add	r7, sp, #0
 1975              	.LCFI41:
 1976              		.cfi_def_cfa_register 7
 1977 0006 F860     		str	r0, [r7, #12]
 1978 0008 B960     		str	r1, [r7, #8]
 1979 000a 7A60     		str	r2, [r7, #4]
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1980              		.loc 1 871 0
 1981 000c 0123     		mov	r3, #1
 1982 000e 7B61     		str	r3, [r7, #20]
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 1983              		.loc 1 872 0
 1984 0010 0023     		mov	r3, #0
 1985 0012 3B61     		str	r3, [r7, #16]
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 1986              		.loc 1 874 0
 1987 0014 FB68     		ldr	r3, [r7, #12]
 1988 0016 DB6B     		ldr	r3, [r3, #60]
 1989 0018 1B78     		ldrb	r3, [r3]
 1990 001a 002B     		cmp	r3, #0
 1991 001c 37D0     		beq	.L70
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1992              		.loc 1 876 0
 1993 001e BB68     		ldr	r3, [r7, #8]
 1994 0020 002B     		cmp	r3, #0
 1995 0022 09D0     		beq	.L71
 1996              		.loc 1 876 0 is_stmt 0 discriminator 1
 1997 0024 FB68     		ldr	r3, [r7, #12]
 1998 0026 DA6A     		ldr	r2, [r3, #44]
 1999 0028 7B68     		ldr	r3, [r7, #4]
 2000 002a 9A42     		cmp	r2, r3
 2001 002c 07D2     		bcs	.L72
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 2002              		.loc 1 877 0 is_stmt 1 discriminator 1
 2003 002e FA68     		ldr	r2, [r7, #12]
 2004 0030 2023     		mov	r3, #32
 2005 0032 D35C     		ldrb	r3, [r2, r3]
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2006              		.loc 1 876 0 discriminator 1
 2007 0034 002B     		cmp	r3, #0
 2008 0036 02D1     		bne	.L72
 2009              	.L71:
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2010              		.loc 1 879 0
 2011 0038 0223     		mov	r3, #2
 2012 003a 7B61     		str	r3, [r7, #20]
 2013 003c 27E0     		b	.L70
 2014              	.L72:
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2015              		.loc 1 883 0
 2016 003e FB68     		ldr	r3, [r7, #12]
 2017 0040 DA6A     		ldr	r2, [r3, #44]
 2018 0042 BB68     		ldr	r3, [r7, #8]
 2019 0044 9A42     		cmp	r2, r3
 2020 0046 07D2     		bcs	.L73
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2021              		.loc 1 884 0 discriminator 1
 2022 0048 FA68     		ldr	r2, [r7, #12]
 2023 004a 2023     		mov	r3, #32
 2024 004c D35C     		ldrb	r3, [r2, r3]
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2025              		.loc 1 883 0 discriminator 1
 2026 004e 012B     		cmp	r3, #1
 2027 0050 02D0     		beq	.L73
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2028              		.loc 1 887 0
 2029 0052 0223     		mov	r3, #2
 2030 0054 7B61     		str	r3, [r7, #20]
 2031 0056 1AE0     		b	.L70
 2032              	.L73:
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2033              		.loc 1 891 0
 2034 0058 BB68     		ldr	r3, [r7, #8]
 2035 005a 3B61     		str	r3, [r7, #16]
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2036              		.loc 1 892 0
 2037 005c FA68     		ldr	r2, [r7, #12]
 2038 005e 2023     		mov	r3, #32
 2039 0060 D35C     		ldrb	r3, [r2, r3]
 2040 0062 012B     		cmp	r3, #1
 2041 0064 04D1     		bne	.L74
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2042              		.loc 1 894 0
 2043 0066 FB68     		ldr	r3, [r7, #12]
 2044 0068 DB69     		ldr	r3, [r3, #28]
 2045 006a 3A69     		ldr	r2, [r7, #16]
 2046 006c 120C     		lsr	r2, r2, #16
 2047 006e 5A63     		str	r2, [r3, #52]
 2048              	.L74:
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2049              		.loc 1 897 0
 2050 0070 FB68     		ldr	r3, [r7, #12]
 2051 0072 9B69     		ldr	r3, [r3, #24]
 2052 0074 3A69     		ldr	r2, [r7, #16]
 2053 0076 1204     		lsl	r2, r2, #16
 2054 0078 120C     		lsr	r2, r2, #16
 2055 007a 5A63     		str	r2, [r3, #52]
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 2056              		.loc 1 899 0
 2057 007c FB68     		ldr	r3, [r7, #12]
 2058 007e 1B6C     		ldr	r3, [r3, #64]
 2059 0080 F968     		ldr	r1, [r7, #12]
 2060 0082 7A68     		ldr	r2, [r7, #4]
 2061 0084 081C     		mov	r0, r1
 2062 0086 111C     		mov	r1, r2
 2063 0088 9847     		blx	r3
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2064              		.loc 1 900 0
 2065 008a 0023     		mov	r3, #0
 2066 008c 7B61     		str	r3, [r7, #20]
 2067              	.L70:
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2068              		.loc 1 904 0
 2069 008e 7B69     		ldr	r3, [r7, #20]
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2070              		.loc 1 905 0
 2071 0090 181C     		mov	r0, r3
 2072 0092 BD46     		mov	sp, r7
 2073 0094 06B0     		add	sp, sp, #24
 2074              		@ sp needed for prologue
 2075 0096 80BD     		pop	{r7, pc}
 2076              		.cfi_endproc
 2077              	.LFE51:
 2079              		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2080              		.align	2
 2081              		.global	PWMSP001_SetPeriod
 2082              		.code	16
 2083              		.thumb_func
 2085              	PWMSP001_SetPeriod:
 2086              	.LFB52:
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2087              		.loc 1 916 0
 2088              		.cfi_startproc
 2089 0000 90B5     		push	{r4, r7, lr}
 2090              	.LCFI42:
 2091              		.cfi_def_cfa_offset 12
 2092              		.cfi_offset 4, -12
 2093              		.cfi_offset 7, -8
 2094              		.cfi_offset 14, -4
 2095 0002 87B0     		sub	sp, sp, #28
 2096              	.LCFI43:
 2097              		.cfi_def_cfa_offset 40
 2098 0004 00AF     		add	r7, sp, #0
 2099              	.LCFI44:
 2100              		.cfi_def_cfa_register 7
 2101 0006 7860     		str	r0, [r7, #4]
 2102 0008 3960     		str	r1, [r7]
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2103              		.loc 1 917 0
 2104 000a 0123     		mov	r3, #1
 2105 000c 7B61     		str	r3, [r7, #20]
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2106              		.loc 1 918 0
 2107 000e 0023     		mov	r3, #0
 2108 0010 3B61     		str	r3, [r7, #16]
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2109              		.loc 1 922 0
 2110 0012 7B68     		ldr	r3, [r7, #4]
 2111 0014 DB6B     		ldr	r3, [r3, #60]
 2112 0016 1B78     		ldrb	r3, [r3]
 2113 0018 002B     		cmp	r3, #0
 2114 001a 4DD0     		beq	.L77
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2115              		.loc 1 924 0
 2116 001c 3B68     		ldr	r3, [r7]
 2117 001e 002B     		cmp	r3, #0
 2118 0020 02D1     		bne	.L78
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2119              		.loc 1 926 0
 2120 0022 0223     		mov	r3, #2
 2121 0024 7B61     		str	r3, [r7, #20]
 2122 0026 47E0     		b	.L77
 2123              	.L78:
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2124              		.loc 1 930 0
 2125 0028 7B68     		ldr	r3, [r7, #4]
 2126 002a DA6A     		ldr	r2, [r3, #44]
 2127 002c 3B68     		ldr	r3, [r7]
 2128 002e 9A42     		cmp	r2, r3
 2129 0030 07D2     		bcs	.L79
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2130              		.loc 1 931 0 discriminator 1
 2131 0032 7A68     		ldr	r2, [r7, #4]
 2132 0034 2023     		mov	r3, #32
 2133 0036 D35C     		ldrb	r3, [r2, r3]
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2134              		.loc 1 930 0 discriminator 1
 2135 0038 012B     		cmp	r3, #1
 2136 003a 02D0     		beq	.L79
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2137              		.loc 1 933 0
 2138 003c 0223     		mov	r3, #2
 2139 003e 7B61     		str	r3, [r7, #20]
 2140 0040 3AE0     		b	.L77
 2141              	.L79:
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2142              		.loc 1 937 0
 2143 0042 3B68     		ldr	r3, [r7]
 2144 0044 3B61     		str	r3, [r7, #16]
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2145              		.loc 1 938 0
 2146 0046 7A68     		ldr	r2, [r7, #4]
 2147 0048 2023     		mov	r3, #32
 2148 004a D35C     		ldrb	r3, [r2, r3]
 2149 004c 012B     		cmp	r3, #1
 2150 004e 04D1     		bne	.L80
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2151              		.loc 1 940 0
 2152 0050 7B68     		ldr	r3, [r7, #4]
 2153 0052 DB69     		ldr	r3, [r3, #28]
 2154 0054 3A69     		ldr	r2, [r7, #16]
 2155 0056 120C     		lsr	r2, r2, #16
 2156 0058 5A63     		str	r2, [r3, #52]
 2157              	.L80:
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2158              		.loc 1 942 0
 2159 005a 7B68     		ldr	r3, [r7, #4]
 2160 005c 9B69     		ldr	r3, [r3, #24]
 2161 005e 3A69     		ldr	r2, [r7, #16]
 2162 0060 1204     		lsl	r2, r2, #16
 2163 0062 120C     		lsr	r2, r2, #16
 2164 0064 5A63     		str	r2, [r3, #52]
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2165              		.loc 1 944 0
 2166 0066 7A68     		ldr	r2, [r7, #4]
 2167 0068 3723     		mov	r3, #55
 2168 006a D35C     		ldrb	r3, [r2, r3]
 2169 006c 9B00     		lsl	r3, r3, #2
 2170 006e FB60     		str	r3, [r7, #12]
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2171              		.loc 1 945 0
 2172 0070 7B68     		ldr	r3, [r7, #4]
 2173 0072 5B69     		ldr	r3, [r3, #20]
 2174 0074 7A68     		ldr	r2, [r7, #4]
 2175 0076 5269     		ldr	r2, [r2, #20]
 2176 0078 1169     		ldr	r1, [r2, #16]
 2177 007a FA68     		ldr	r2, [r7, #12]
 2178 007c 0120     		mov	r0, #1
 2179 007e 041C     		mov	r4, r0
 2180 0080 9440     		lsl	r4, r4, r2
 2181 0082 221C     		mov	r2, r4
 2182 0084 0A43     		orr	r2, r1
 2183 0086 1A61     		str	r2, [r3, #16]
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2184              		.loc 1 946 0
 2185 0088 7A68     		ldr	r2, [r7, #4]
 2186 008a 2023     		mov	r3, #32
 2187 008c D35C     		ldrb	r3, [r2, r3]
 2188 008e 012B     		cmp	r3, #1
 2189 0090 10D1     		bne	.L81
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2190              		.loc 1 949 0
 2191 0092 7A68     		ldr	r2, [r7, #4]
 2192 0094 3823     		mov	r3, #56
 2193 0096 D35C     		ldrb	r3, [r2, r3]
 2194 0098 9B00     		lsl	r3, r3, #2
 2195 009a FB60     		str	r3, [r7, #12]
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2196              		.loc 1 950 0
 2197 009c 7B68     		ldr	r3, [r7, #4]
 2198 009e 5B69     		ldr	r3, [r3, #20]
 2199 00a0 7A68     		ldr	r2, [r7, #4]
 2200 00a2 5269     		ldr	r2, [r2, #20]
 2201 00a4 1169     		ldr	r1, [r2, #16]
 2202 00a6 FA68     		ldr	r2, [r7, #12]
 2203 00a8 0120     		mov	r0, #1
 2204 00aa 041C     		mov	r4, r0
 2205 00ac 9440     		lsl	r4, r4, r2
 2206 00ae 221C     		mov	r2, r4
 2207 00b0 0A43     		orr	r2, r1
 2208 00b2 1A61     		str	r2, [r3, #16]
 2209              	.L81:
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2210              		.loc 1 952 0
 2211 00b4 0023     		mov	r3, #0
 2212 00b6 7B61     		str	r3, [r7, #20]
 2213              	.L77:
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2214              		.loc 1 956 0
 2215 00b8 7B69     		ldr	r3, [r7, #20]
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2216              		.loc 1 957 0
 2217 00ba 181C     		mov	r0, r3
 2218 00bc BD46     		mov	sp, r7
 2219 00be 07B0     		add	sp, sp, #28
 2220              		@ sp needed for prologue
 2221 00c0 90BD     		pop	{r4, r7, pc}
 2222              		.cfi_endproc
 2223              	.LFE52:
 2225              		.global	__aeabi_fcmpeq
 2226 00c2 C046     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2227              		.align	2
 2228              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2229              		.code	16
 2230              		.thumb_func
 2232              	PWMSP001_SetPwmFreqAndDutyCycle:
 2233              	.LFB53:
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2234              		.loc 1 970 0
 2235              		.cfi_startproc
 2236 0000 80B5     		push	{r7, lr}
 2237              	.LCFI45:
 2238              		.cfi_def_cfa_offset 8
 2239              		.cfi_offset 7, -8
 2240              		.cfi_offset 14, -4
 2241 0002 88B0     		sub	sp, sp, #32
 2242              	.LCFI46:
 2243              		.cfi_def_cfa_offset 40
 2244 0004 00AF     		add	r7, sp, #0
 2245              	.LCFI47:
 2246              		.cfi_def_cfa_register 7
 2247 0006 F860     		str	r0, [r7, #12]
 2248 0008 B960     		str	r1, [r7, #8]
 2249 000a 7A60     		str	r2, [r7, #4]
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2250              		.loc 1 971 0
 2251 000c 0123     		mov	r3, #1
 2252 000e FB61     		str	r3, [r7, #28]
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2253              		.loc 1 972 0
 2254 0010 0023     		mov	r3, #0
 2255 0012 BB61     		str	r3, [r7, #24]
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2256              		.loc 1 975 0
 2257 0014 FB68     		ldr	r3, [r7, #12]
 2258 0016 DB6B     		ldr	r3, [r3, #60]
 2259 0018 1B78     		ldrb	r3, [r3]
 2260 001a 002B     		cmp	r3, #0
 2261 001c 68D0     		beq	.L84
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2262              		.loc 1 977 0
 2263 001e B868     		ldr	r0, [r7, #8]
 2264 0020 0021     		mov	r1, #0
 2265 0022 FFF7FEFF 		bl	__aeabi_fcmpeq
 2266 0026 031C     		mov	r3, r0
 2267 0028 002B     		cmp	r3, #0
 2268 002a 0DD1     		bne	.L85
 2269              		.loc 1 977 0 is_stmt 0 discriminator 1
 2270 002c 7868     		ldr	r0, [r7, #4]
 2271 002e 3349     		ldr	r1, .L96
 2272 0030 FFF7FEFF 		bl	__aeabi_fcmpgt
 2273 0034 031C     		mov	r3, r0
 2274 0036 002B     		cmp	r3, #0
 2275 0038 06D1     		bne	.L85
 2276 003a 7868     		ldr	r0, [r7, #4]
 2277 003c 0021     		mov	r1, #0
 2278 003e FFF7FEFF 		bl	__aeabi_fcmplt
 2279 0042 031C     		mov	r3, r0
 2280 0044 002B     		cmp	r3, #0
 2281 0046 02D0     		beq	.L95
 2282              	.L85:
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2283              		.loc 1 979 0 is_stmt 1
 2284 0048 0223     		mov	r3, #2
 2285 004a FB61     		str	r3, [r7, #28]
 2286 004c 50E0     		b	.L84
 2287              	.L95:
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2288              		.loc 1 983 0
 2289 004e FB68     		ldr	r3, [r7, #12]
 2290 0050 5B68     		ldr	r3, [r3, #4]
 2291 0052 7B61     		str	r3, [r7, #20]
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2292              		.loc 1 984 0
 2293 0054 7869     		ldr	r0, [r7, #20]
 2294 0056 B968     		ldr	r1, [r7, #8]
 2295 0058 FFF7FEFF 		bl	__aeabi_fmul
 2296 005c 031C     		add	r3, r0, #0
 2297 005e 7B61     		str	r3, [r7, #20]
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2298              		.loc 1 985 0
 2299 0060 2748     		ldr	r0, .L96+4
 2300 0062 7969     		ldr	r1, [r7, #20]
 2301 0064 FFF7FEFF 		bl	__aeabi_fdiv
 2302 0068 031C     		add	r3, r0, #0
 2303 006a 181C     		add	r0, r3, #0
 2304 006c FFF7FEFF 		bl	__aeabi_f2uiz
 2305 0070 031C     		mov	r3, r0
 2306 0072 BB61     		str	r3, [r7, #24]
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2307              		.loc 1 987 0
 2308 0074 FA68     		ldr	r2, [r7, #12]
 2309 0076 2023     		mov	r3, #32
 2310 0078 D35C     		ldrb	r3, [r2, r3]
 2311 007a 002B     		cmp	r3, #0
 2312 007c 1AD1     		bne	.L88
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2313              		.loc 1 989 0
 2314 007e BA69     		ldr	r2, [r7, #24]
 2315 0080 204B     		ldr	r3, .L96+8
 2316 0082 9A42     		cmp	r2, r3
 2317 0084 02D9     		bls	.L89
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2318              		.loc 1 991 0
 2319 0086 0223     		mov	r3, #2
 2320 0088 FB61     		str	r3, [r7, #28]
 2321 008a 27E0     		b	.L90
 2322              	.L89:
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2323              		.loc 1 995 0
 2324 008c FA68     		ldr	r2, [r7, #12]
 2325 008e 3623     		mov	r3, #54
 2326 0090 D35C     		ldrb	r3, [r2, r3]
 2327 0092 002B     		cmp	r3, #0
 2328 0094 05D1     		bne	.L91
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2329              		.loc 1 997 0
 2330 0096 FB68     		ldr	r3, [r7, #12]
 2331 0098 9B69     		ldr	r3, [r3, #24]
 2332 009a BA69     		ldr	r2, [r7, #24]
 2333 009c 013A     		sub	r2, r2, #1
 2334 009e 5A63     		str	r2, [r3, #52]
 2335 00a0 05E0     		b	.L92
 2336              	.L91:
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2337              		.loc 1 1001 0
 2338 00a2 FB68     		ldr	r3, [r7, #12]
 2339 00a4 9B69     		ldr	r3, [r3, #24]
 2340 00a6 BA69     		ldr	r2, [r7, #24]
 2341 00a8 013A     		sub	r2, r2, #1
 2342 00aa 5208     		lsr	r2, r2, #1
 2343 00ac 5A63     		str	r2, [r3, #52]
 2344              	.L92:
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2345              		.loc 1 1003 0
 2346 00ae 0023     		mov	r3, #0
 2347 00b0 FB61     		str	r3, [r7, #28]
 2348 00b2 13E0     		b	.L90
 2349              	.L88:
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2350              		.loc 1 1006 0
 2351 00b4 FA68     		ldr	r2, [r7, #12]
 2352 00b6 2023     		mov	r3, #32
 2353 00b8 D35C     		ldrb	r3, [r2, r3]
 2354 00ba 012B     		cmp	r3, #1
 2355 00bc 06D1     		bne	.L93
 2356              		.loc 1 1006 0 is_stmt 0 discriminator 1
 2357 00be BA69     		ldr	r2, [r7, #24]
 2358 00c0 104B     		ldr	r3, .L96+8
 2359 00c2 9A42     		cmp	r2, r3
 2360 00c4 02D8     		bhi	.L93
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2361              		.loc 1 1009 0 is_stmt 1
 2362 00c6 0223     		mov	r3, #2
 2363 00c8 FB61     		str	r3, [r7, #28]
 2364 00ca 07E0     		b	.L90
 2365              	.L93:
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2366              		.loc 1 1014 0
 2367 00cc FA68     		ldr	r2, [r7, #12]
 2368 00ce BB69     		ldr	r3, [r7, #24]
 2369 00d0 101C     		mov	r0, r2
 2370 00d2 191C     		mov	r1, r3
 2371 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2372 00d8 031C     		mov	r3, r0
 2373 00da FB61     		str	r3, [r7, #28]
 2374              	.L90:
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2375              		.loc 1 1016 0
 2376 00dc FB69     		ldr	r3, [r7, #28]
 2377 00de 002B     		cmp	r3, #0
 2378 00e0 06D1     		bne	.L84
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2379              		.loc 1 1019 0
 2380 00e2 FB68     		ldr	r3, [r7, #12]
 2381 00e4 5B6C     		ldr	r3, [r3, #68]
 2382 00e6 F968     		ldr	r1, [r7, #12]
 2383 00e8 7A68     		ldr	r2, [r7, #4]
 2384 00ea 081C     		mov	r0, r1
 2385 00ec 111C     		add	r1, r2, #0
 2386 00ee 9847     		blx	r3
 2387              	.L84:
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2388              		.loc 1 1023 0
 2389 00f0 FB69     		ldr	r3, [r7, #28]
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2390              		.loc 1 1024 0
 2391 00f2 181C     		mov	r0, r3
 2392 00f4 BD46     		mov	sp, r7
 2393 00f6 08B0     		add	sp, sp, #32
 2394              		@ sp needed for prologue
 2395 00f8 80BD     		pop	{r7, pc}
 2396              	.L97:
 2397 00fa C046     		.align	2
 2398              	.L96:
 2399 00fc 0000C842 		.word	1120403456
 2400 0100 286B6E4E 		.word	1315859240
 2401 0104 FFFF0000 		.word	65535
 2402              		.cfi_endproc
 2403              	.LFE53:
 2405              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2406              		.align	2
 2407              		.global	PWMSP001_SetPwmFreq
 2408              		.code	16
 2409              		.thumb_func
 2411              	PWMSP001_SetPwmFreq:
 2412              	.LFB54:
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2413              		.loc 1 1036 0
 2414              		.cfi_startproc
 2415 0000 B0B5     		push	{r4, r5, r7, lr}
 2416              	.LCFI48:
 2417              		.cfi_def_cfa_offset 16
 2418              		.cfi_offset 4, -16
 2419              		.cfi_offset 5, -12
 2420              		.cfi_offset 7, -8
 2421              		.cfi_offset 14, -4
 2422 0002 88B0     		sub	sp, sp, #32
 2423              	.LCFI49:
 2424              		.cfi_def_cfa_offset 48
 2425 0004 00AF     		add	r7, sp, #0
 2426              	.LCFI50:
 2427              		.cfi_def_cfa_register 7
 2428 0006 7860     		str	r0, [r7, #4]
 2429 0008 3960     		str	r1, [r7]
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2430              		.loc 1 1037 0
 2431 000a 0123     		mov	r3, #1
 2432 000c FB61     		str	r3, [r7, #28]
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2433              		.loc 1 1038 0
 2434 000e 0023     		mov	r3, #0
 2435 0010 BB61     		str	r3, [r7, #24]
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2436              		.loc 1 1043 0
 2437 0012 7B68     		ldr	r3, [r7, #4]
 2438 0014 DB6B     		ldr	r3, [r3, #60]
 2439 0016 1B78     		ldrb	r3, [r3]
 2440 0018 002B     		cmp	r3, #0
 2441 001a 00D1     		bne	.LCB2120
 2442 001c 72E0     		b	.L99	@long jump
 2443              	.LCB2120:
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2444              		.loc 1 1045 0
 2445 001e 3868     		ldr	r0, [r7]
 2446 0020 0021     		mov	r1, #0
 2447 0022 FFF7FEFF 		bl	__aeabi_fcmpeq
 2448 0026 031C     		mov	r3, r0
 2449 0028 002B     		cmp	r3, #0
 2450 002a 02D0     		beq	.L108
 2451              	.L107:
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2452              		.loc 1 1047 0
 2453 002c 0223     		mov	r3, #2
 2454 002e FB61     		str	r3, [r7, #28]
 2455 0030 68E0     		b	.L99
 2456              	.L108:
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2457              		.loc 1 1051 0
 2458 0032 7B68     		ldr	r3, [r7, #4]
 2459 0034 5B68     		ldr	r3, [r3, #4]
 2460 0036 7B61     		str	r3, [r7, #20]
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2461              		.loc 1 1052 0
 2462 0038 7869     		ldr	r0, [r7, #20]
 2463 003a 3968     		ldr	r1, [r7]
 2464 003c FFF7FEFF 		bl	__aeabi_fmul
 2465 0040 031C     		add	r3, r0, #0
 2466 0042 7B61     		str	r3, [r7, #20]
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2467              		.loc 1 1053 0
 2468 0044 3248     		ldr	r0, .L109
 2469 0046 7969     		ldr	r1, [r7, #20]
 2470 0048 FFF7FEFF 		bl	__aeabi_fdiv
 2471 004c 031C     		add	r3, r0, #0
 2472 004e 181C     		add	r0, r3, #0
 2473 0050 FFF7FEFF 		bl	__aeabi_f2uiz
 2474 0054 031C     		mov	r3, r0
 2475 0056 BB61     		str	r3, [r7, #24]
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2476              		.loc 1 1055 0
 2477 0058 7A68     		ldr	r2, [r7, #4]
 2478 005a 2023     		mov	r3, #32
 2479 005c D35C     		ldrb	r3, [r2, r3]
 2480 005e 002B     		cmp	r3, #0
 2481 0060 2BD1     		bne	.L102
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2482              		.loc 1 1057 0
 2483 0062 BA69     		ldr	r2, [r7, #24]
 2484 0064 2B4B     		ldr	r3, .L109+4
 2485 0066 9A42     		cmp	r2, r3
 2486 0068 02D9     		bls	.L103
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2487              		.loc 1 1059 0
 2488 006a 0223     		mov	r3, #2
 2489 006c FB61     		str	r3, [r7, #28]
 2490 006e 49E0     		b	.L99
 2491              	.L103:
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2492              		.loc 1 1063 0
 2493 0070 7A68     		ldr	r2, [r7, #4]
 2494 0072 3623     		mov	r3, #54
 2495 0074 D35C     		ldrb	r3, [r2, r3]
 2496 0076 002B     		cmp	r3, #0
 2497 0078 05D1     		bne	.L104
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2498              		.loc 1 1065 0
 2499 007a 7B68     		ldr	r3, [r7, #4]
 2500 007c 9B69     		ldr	r3, [r3, #24]
 2501 007e BA69     		ldr	r2, [r7, #24]
 2502 0080 013A     		sub	r2, r2, #1
 2503 0082 5A63     		str	r2, [r3, #52]
 2504 0084 05E0     		b	.L105
 2505              	.L104:
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2506              		.loc 1 1069 0
 2507 0086 7B68     		ldr	r3, [r7, #4]
 2508 0088 9B69     		ldr	r3, [r3, #24]
 2509 008a BA69     		ldr	r2, [r7, #24]
 2510 008c 013A     		sub	r2, r2, #1
 2511 008e 5208     		lsr	r2, r2, #1
 2512 0090 5A63     		str	r2, [r3, #52]
 2513              	.L105:
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2514              		.loc 1 1072 0
 2515 0092 7A68     		ldr	r2, [r7, #4]
 2516 0094 3723     		mov	r3, #55
 2517 0096 D35C     		ldrb	r3, [r2, r3]
 2518 0098 9B00     		lsl	r3, r3, #2
 2519 009a 3B61     		str	r3, [r7, #16]
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2520              		.loc 1 1073 0
 2521 009c 7B68     		ldr	r3, [r7, #4]
 2522 009e 5B69     		ldr	r3, [r3, #20]
 2523 00a0 7A68     		ldr	r2, [r7, #4]
 2524 00a2 5269     		ldr	r2, [r2, #20]
 2525 00a4 1169     		ldr	r1, [r2, #16]
 2526 00a6 3A69     		ldr	r2, [r7, #16]
 2527 00a8 0120     		mov	r0, #1
 2528 00aa 041C     		mov	r4, r0
 2529 00ac 9440     		lsl	r4, r4, r2
 2530 00ae 221C     		mov	r2, r4
 2531 00b0 0A43     		orr	r2, r1
 2532 00b2 1A61     		str	r2, [r3, #16]
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2533              		.loc 1 1074 0
 2534 00b4 0023     		mov	r3, #0
 2535 00b6 FB61     		str	r3, [r7, #28]
 2536 00b8 24E0     		b	.L99
 2537              	.L102:
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2538              		.loc 1 1080 0
 2539 00ba 7A68     		ldr	r2, [r7, #4]
 2540 00bc BB69     		ldr	r3, [r7, #24]
 2541 00be 101C     		mov	r0, r2
 2542 00c0 191C     		mov	r1, r3
 2543 00c2 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2544 00c6 031C     		mov	r3, r0
 2545 00c8 FB61     		str	r3, [r7, #28]
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2546              		.loc 1 1081 0
 2547 00ca FB69     		ldr	r3, [r7, #28]
 2548 00cc 002B     		cmp	r3, #0
 2549 00ce 19D1     		bne	.L99
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2550              		.loc 1 1083 0
 2551 00d0 7A68     		ldr	r2, [r7, #4]
 2552 00d2 3723     		mov	r3, #55
 2553 00d4 D35C     		ldrb	r3, [r2, r3]
 2554 00d6 9B00     		lsl	r3, r3, #2
 2555 00d8 FB60     		str	r3, [r7, #12]
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2556              		.loc 1 1084 0
 2557 00da 7A68     		ldr	r2, [r7, #4]
 2558 00dc 3823     		mov	r3, #56
 2559 00de D35C     		ldrb	r3, [r2, r3]
 2560 00e0 9B00     		lsl	r3, r3, #2
 2561 00e2 BB60     		str	r3, [r7, #8]
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2562              		.loc 1 1085 0
 2563 00e4 7B68     		ldr	r3, [r7, #4]
 2564 00e6 5B69     		ldr	r3, [r3, #20]
 2565 00e8 7A68     		ldr	r2, [r7, #4]
 2566 00ea 5269     		ldr	r2, [r2, #20]
 2567 00ec 1169     		ldr	r1, [r2, #16]
 2568 00ee FA68     		ldr	r2, [r7, #12]
 2569 00f0 0120     		mov	r0, #1
 2570 00f2 9040     		lsl	r0, r0, r2
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2571              		.loc 1 1086 0
 2572 00f4 BA68     		ldr	r2, [r7, #8]
 2573 00f6 0124     		mov	r4, #1
 2574 00f8 251C     		mov	r5, r4
 2575 00fa 9540     		lsl	r5, r5, r2
 2576 00fc 2A1C     		mov	r2, r5
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2577              		.loc 1 1085 0
 2578 00fe 0243     		orr	r2, r0
 2579 0100 0A43     		orr	r2, r1
 2580 0102 1A61     		str	r2, [r3, #16]
 2581              	.L99:
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2582              		.loc 1 1091 0
 2583 0104 FB69     		ldr	r3, [r7, #28]
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2584              		.loc 1 1092 0
 2585 0106 181C     		mov	r0, r3
 2586 0108 BD46     		mov	sp, r7
 2587 010a 08B0     		add	sp, sp, #32
 2588              		@ sp needed for prologue
 2589 010c B0BD     		pop	{r4, r5, r7, pc}
 2590              	.L110:
 2591 010e C046     		.align	2
 2592              	.L109:
 2593 0110 286B6E4E 		.word	1315859240
 2594 0114 FFFF0000 		.word	65535
 2595              		.cfi_endproc
 2596              	.LFE54:
 2598              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2599              		.align	2
 2600              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2601              		.code	16
 2602              		.thumb_func
 2604              	PWMSP001_lSetPwmFreqTimerConcat:
 2605              	.LFB55:
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2606              		.loc 1 1102 0
 2607              		.cfi_startproc
 2608 0000 80B5     		push	{r7, lr}
 2609              	.LCFI51:
 2610              		.cfi_def_cfa_offset 8
 2611              		.cfi_offset 7, -8
 2612              		.cfi_offset 14, -4
 2613 0002 88B0     		sub	sp, sp, #32
 2614              	.LCFI52:
 2615              		.cfi_def_cfa_offset 40
 2616 0004 00AF     		add	r7, sp, #0
 2617              	.LCFI53:
 2618              		.cfi_def_cfa_register 7
 2619 0006 7860     		str	r0, [r7, #4]
 2620 0008 3960     		str	r1, [r7]
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2621              		.loc 1 1103 0
 2622 000a 3B68     		ldr	r3, [r7]
 2623 000c FB61     		str	r3, [r7, #28]
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2624              		.loc 1 1105 0
 2625 000e 3B1C     		mov	r3, r7
 2626 0010 1333     		add	r3, r3, #19
 2627 0012 0022     		mov	r2, #0
 2628 0014 1A70     		strb	r2, [r3]
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2629              		.loc 1 1106 0
 2630 0016 0123     		mov	r3, #1
 2631 0018 FB60     		str	r3, [r7, #12]
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2632              		.loc 1 1108 0
 2633 001a 3B68     		ldr	r3, [r7]
 2634 001c 0133     		add	r3, r3, #1
 2635 001e 02D1     		bne	.L112
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2636              		.loc 1 1110 0
 2637 0020 0223     		mov	r3, #2
 2638 0022 FB60     		str	r3, [r7, #12]
 2639 0024 3AE0     		b	.L113
 2640              	.L112:
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2641              		.loc 1 1116 0
 2642 0026 3A68     		ldr	r2, [r7]
 2643 0028 1F4B     		ldr	r3, .L119
 2644 002a 9A42     		cmp	r2, r3
 2645 002c 19D9     		bls	.L114
 2646              	.L115:
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2647              		.loc 1 1120 0 discriminator 1
 2648 002e FB69     		ldr	r3, [r7, #28]
 2649 0030 5B08     		lsr	r3, r3, #1
 2650 0032 FB61     		str	r3, [r7, #28]
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2651              		.loc 1 1121 0 discriminator 1
 2652 0034 3B1C     		mov	r3, r7
 2653 0036 1333     		add	r3, r3, #19
 2654 0038 3A1C     		mov	r2, r7
 2655 003a 1332     		add	r2, r2, #19
 2656 003c 1278     		ldrb	r2, [r2]
 2657 003e 0132     		add	r2, r2, #1
 2658 0040 1A70     		strb	r2, [r3]
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2659              		.loc 1 1122 0 discriminator 1
 2660 0042 FA69     		ldr	r2, [r7, #28]
 2661 0044 194B     		ldr	r3, .L119+4
 2662 0046 9A42     		cmp	r2, r3
 2663 0048 F1D8     		bhi	.L115
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2664              		.loc 1 1124 0
 2665 004a 3B1C     		mov	r3, r7
 2666 004c 1333     		add	r3, r3, #19
 2667 004e 1B78     		ldrb	r3, [r3]
 2668 0050 0122     		mov	r2, #1
 2669 0052 111C     		mov	r1, r2
 2670 0054 9940     		lsl	r1, r1, r3
 2671 0056 0B1C     		mov	r3, r1
 2672 0058 013B     		sub	r3, r3, #1
 2673 005a BB61     		str	r3, [r7, #24]
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2674              		.loc 1 1125 0
 2675 005c FB69     		ldr	r3, [r7, #28]
 2676 005e 7B61     		str	r3, [r7, #20]
 2677 0060 03E0     		b	.L116
 2678              	.L114:
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2679              		.loc 1 1129 0
 2680 0062 3B68     		ldr	r3, [r7]
 2681 0064 7B61     		str	r3, [r7, #20]
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2682              		.loc 1 1130 0
 2683 0066 0023     		mov	r3, #0
 2684 0068 BB61     		str	r3, [r7, #24]
 2685              	.L116:
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2686              		.loc 1 1134 0
 2687 006a 7A68     		ldr	r2, [r7, #4]
 2688 006c 3623     		mov	r3, #54
 2689 006e D35C     		ldrb	r3, [r2, r3]
 2690 0070 012B     		cmp	r3, #1
 2691 0072 05D1     		bne	.L117
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2692              		.loc 1 1136 0
 2693 0074 BB69     		ldr	r3, [r7, #24]
 2694 0076 5B08     		lsr	r3, r3, #1
 2695 0078 BB61     		str	r3, [r7, #24]
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2696              		.loc 1 1137 0
 2697 007a 7B69     		ldr	r3, [r7, #20]
 2698 007c 5B08     		lsr	r3, r3, #1
 2699 007e 7B61     		str	r3, [r7, #20]
 2700              	.L117:
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2701              		.loc 1 1140 0
 2702 0080 7B68     		ldr	r3, [r7, #4]
 2703 0082 9B69     		ldr	r3, [r3, #24]
 2704 0084 7A69     		ldr	r2, [r7, #20]
 2705 0086 1204     		lsl	r2, r2, #16
 2706 0088 120C     		lsr	r2, r2, #16
 2707 008a 5A63     		str	r2, [r3, #52]
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2708              		.loc 1 1141 0
 2709 008c 7B68     		ldr	r3, [r7, #4]
 2710 008e DB69     		ldr	r3, [r3, #28]
 2711 0090 BA69     		ldr	r2, [r7, #24]
 2712 0092 1204     		lsl	r2, r2, #16
 2713 0094 120C     		lsr	r2, r2, #16
 2714 0096 5A63     		str	r2, [r3, #52]
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2715              		.loc 1 1144 0
 2716 0098 0023     		mov	r3, #0
 2717 009a FB60     		str	r3, [r7, #12]
 2718              	.L113:
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2719              		.loc 1 1146 0
 2720 009c FB68     		ldr	r3, [r7, #12]
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2721              		.loc 1 1147 0
 2722 009e 181C     		mov	r0, r3
 2723 00a0 BD46     		mov	sp, r7
 2724 00a2 08B0     		add	sp, sp, #32
 2725              		@ sp needed for prologue
 2726 00a4 80BD     		pop	{r7, pc}
 2727              	.L120:
 2728 00a6 C046     		.align	2
 2729              	.L119:
 2730 00a8 FFFF0000 		.word	65535
 2731 00ac FEFF0000 		.word	65534
 2732              		.cfi_endproc
 2733              	.LFE55:
 2735              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2736              		.align	2
 2737              		.global	PWMSP001_SetTimerVal
 2738              		.code	16
 2739              		.thumb_func
 2741              	PWMSP001_SetTimerVal:
 2742              	.LFB56:
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2743              		.loc 1 1160 0
 2744              		.cfi_startproc
 2745 0000 80B5     		push	{r7, lr}
 2746              	.LCFI54:
 2747              		.cfi_def_cfa_offset 8
 2748              		.cfi_offset 7, -8
 2749              		.cfi_offset 14, -4
 2750 0002 84B0     		sub	sp, sp, #16
 2751              	.LCFI55:
 2752              		.cfi_def_cfa_offset 24
 2753 0004 00AF     		add	r7, sp, #0
 2754              	.LCFI56:
 2755              		.cfi_def_cfa_register 7
 2756 0006 7860     		str	r0, [r7, #4]
 2757 0008 3960     		str	r1, [r7]
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2758              		.loc 1 1161 0
 2759 000a 0123     		mov	r3, #1
 2760 000c FB60     		str	r3, [r7, #12]
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2761              		.loc 1 1163 0
 2762 000e 7B68     		ldr	r3, [r7, #4]
 2763 0010 DB6B     		ldr	r3, [r3, #60]
 2764 0012 1B78     		ldrb	r3, [r3]
 2765 0014 012B     		cmp	r3, #1
 2766 0016 04D0     		beq	.L122
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2767              		.loc 1 1164 0 discriminator 1
 2768 0018 7B68     		ldr	r3, [r7, #4]
 2769 001a DB6B     		ldr	r3, [r3, #60]
 2770 001c 1B78     		ldrb	r3, [r3]
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2771              		.loc 1 1163 0 discriminator 1
 2772 001e 032B     		cmp	r3, #3
 2773 0020 11D1     		bne	.L123
 2774              	.L122:
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2775              		.loc 1 1171 0
 2776 0022 7B68     		ldr	r3, [r7, #4]
 2777 0024 9B69     		ldr	r3, [r3, #24]
 2778 0026 3A68     		ldr	r2, [r7]
 2779 0028 1204     		lsl	r2, r2, #16
 2780 002a 120C     		lsr	r2, r2, #16
 2781 002c 1A67     		str	r2, [r3, #112]
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2782              		.loc 1 1172 0
 2783 002e 7A68     		ldr	r2, [r7, #4]
 2784 0030 2023     		mov	r3, #32
 2785 0032 D35C     		ldrb	r3, [r2, r3]
 2786 0034 012B     		cmp	r3, #1
 2787 0036 04D1     		bne	.L124
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2788              		.loc 1 1174 0
 2789 0038 7B68     		ldr	r3, [r7, #4]
 2790 003a DB69     		ldr	r3, [r3, #28]
 2791 003c 3A68     		ldr	r2, [r7]
 2792 003e 120C     		lsr	r2, r2, #16
 2793 0040 1A67     		str	r2, [r3, #112]
 2794              	.L124:
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2795              		.loc 1 1176 0
 2796 0042 0023     		mov	r3, #0
 2797 0044 FB60     		str	r3, [r7, #12]
 2798              	.L123:
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2799              		.loc 1 1178 0
 2800 0046 FB68     		ldr	r3, [r7, #12]
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2801              		.loc 1 1179 0
 2802 0048 181C     		mov	r0, r3
 2803 004a BD46     		mov	sp, r7
 2804 004c 04B0     		add	sp, sp, #16
 2805              		@ sp needed for prologue
 2806 004e 80BD     		pop	{r7, pc}
 2807              		.cfi_endproc
 2808              	.LFE56:
 2810              		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2811              		.align	2
 2812              		.global	PWMSP001_GetTimerStatus
 2813              		.code	16
 2814              		.thumb_func
 2816              	PWMSP001_GetTimerStatus:
 2817              	.LFB57:
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2818              		.loc 1 1190 0
 2819              		.cfi_startproc
 2820 0000 80B5     		push	{r7, lr}
 2821              	.LCFI57:
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 7, -8
 2824              		.cfi_offset 14, -4
 2825 0002 84B0     		sub	sp, sp, #16
 2826              	.LCFI58:
 2827              		.cfi_def_cfa_offset 24
 2828 0004 00AF     		add	r7, sp, #0
 2829              	.LCFI59:
 2830              		.cfi_def_cfa_register 7
 2831 0006 7860     		str	r0, [r7, #4]
 2832 0008 3960     		str	r1, [r7]
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2833              		.loc 1 1191 0
 2834 000a 0123     		mov	r3, #1
 2835 000c FB60     		str	r3, [r7, #12]
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2836              		.loc 1 1192 0
 2837 000e 0023     		mov	r3, #0
 2838 0010 BB60     		str	r3, [r7, #8]
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2839              		.loc 1 1194 0
 2840 0012 7B68     		ldr	r3, [r7, #4]
 2841 0014 DB6B     		ldr	r3, [r3, #60]
 2842 0016 1B78     		ldrb	r3, [r3]
 2843 0018 002B     		cmp	r3, #0
 2844 001a 1DD0     		beq	.L127
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2845              		.loc 1 1201 0
 2846 001c 7A68     		ldr	r2, [r7, #4]
 2847 001e 2023     		mov	r3, #32
 2848 0020 D35C     		ldrb	r3, [r2, r3]
 2849 0022 012B     		cmp	r3, #1
 2850 0024 0FD1     		bne	.L128
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2851              		.loc 1 1203 0
 2852 0026 7B68     		ldr	r3, [r7, #4]
 2853 0028 DB69     		ldr	r3, [r3, #28]
 2854 002a 9A68     		ldr	r2, [r3, #8]
 2855 002c 0123     		mov	r3, #1
 2856 002e 1340     		and	r3, r2
 2857 0030 BB60     		str	r3, [r7, #8]
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2858              		.loc 1 1205 0
 2859 0032 7B68     		ldr	r3, [r7, #4]
 2860 0034 9B69     		ldr	r3, [r3, #24]
 2861 0036 9B68     		ldr	r3, [r3, #8]
 2862 0038 BA68     		ldr	r2, [r7, #8]
 2863 003a 1A40     		and	r2, r3
 2864 003c 0123     		mov	r3, #1
 2865 003e 1A40     		and	r2, r3
 2866 0040 3B68     		ldr	r3, [r7]
 2867 0042 1A60     		str	r2, [r3]
 2868 0044 06E0     		b	.L129
 2869              	.L128:
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2870              		.loc 1 1212 0
 2871 0046 7B68     		ldr	r3, [r7, #4]
 2872 0048 9B69     		ldr	r3, [r3, #24]
 2873 004a 9A68     		ldr	r2, [r3, #8]
 2874 004c 0123     		mov	r3, #1
 2875 004e 1A40     		and	r2, r3
 2876 0050 3B68     		ldr	r3, [r7]
 2877 0052 1A60     		str	r2, [r3]
 2878              	.L129:
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2879              		.loc 1 1215 0
 2880 0054 0023     		mov	r3, #0
 2881 0056 FB60     		str	r3, [r7, #12]
 2882              	.L127:
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2883              		.loc 1 1217 0
 2884 0058 FB68     		ldr	r3, [r7, #12]
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2885              		.loc 1 1218 0
 2886 005a 181C     		mov	r0, r3
 2887 005c BD46     		mov	sp, r7
 2888 005e 04B0     		add	sp, sp, #16
 2889              		@ sp needed for prologue
 2890 0060 80BD     		pop	{r7, pc}
 2891              		.cfi_endproc
 2892              	.LFE57:
 2894 0062 C046     		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2895              		.align	2
 2896              		.global	PWMSP001_GetTimerRegsVal
 2897              		.code	16
 2898              		.thumb_func
 2900              	PWMSP001_GetTimerRegsVal:
 2901              	.LFB58:
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2902              		.loc 1 1229 0
 2903              		.cfi_startproc
 2904 0000 80B5     		push	{r7, lr}
 2905              	.LCFI60:
 2906              		.cfi_def_cfa_offset 8
 2907              		.cfi_offset 7, -8
 2908              		.cfi_offset 14, -4
 2909 0002 84B0     		sub	sp, sp, #16
 2910              	.LCFI61:
 2911              		.cfi_def_cfa_offset 24
 2912 0004 00AF     		add	r7, sp, #0
 2913              	.LCFI62:
 2914              		.cfi_def_cfa_register 7
 2915 0006 7860     		str	r0, [r7, #4]
 2916 0008 3960     		str	r1, [r7]
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2917              		.loc 1 1230 0
 2918 000a 0123     		mov	r3, #1
 2919 000c FB60     		str	r3, [r7, #12]
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2920              		.loc 1 1231 0
 2921 000e 0023     		mov	r3, #0
 2922 0010 BB60     		str	r3, [r7, #8]
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2923              		.loc 1 1234 0
 2924 0012 7B68     		ldr	r3, [r7, #4]
 2925 0014 DB6B     		ldr	r3, [r3, #60]
 2926 0016 1B78     		ldrb	r3, [r3]
 2927 0018 002B     		cmp	r3, #0
 2928 001a 51D0     		beq	.L132
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2929              		.loc 1 1241 0
 2930 001c 7A68     		ldr	r2, [r7, #4]
 2931 001e 2023     		mov	r3, #32
 2932 0020 D35C     		ldrb	r3, [r2, r3]
 2933 0022 012B     		cmp	r3, #1
 2934 0024 39D1     		bne	.L133
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2935              		.loc 1 1243 0
 2936 0026 7B68     		ldr	r3, [r7, #4]
 2937 0028 DB69     		ldr	r3, [r3, #28]
 2938 002a 1B6F     		ldr	r3, [r3, #112]
 2939 002c 1B04     		lsl	r3, r3, #16
 2940 002e BB60     		str	r3, [r7, #8]
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2941              		.loc 1 1247 0
 2942 0030 7B68     		ldr	r3, [r7, #4]
 2943 0032 9B69     		ldr	r3, [r3, #24]
 2944 0034 1B6F     		ldr	r3, [r3, #112]
 2945 0036 1B04     		lsl	r3, r3, #16
 2946 0038 1A0C     		lsr	r2, r3, #16
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2947              		.loc 1 1246 0
 2948 003a BB68     		ldr	r3, [r7, #8]
 2949 003c 1A43     		orr	r2, r3
 2950 003e 3B68     		ldr	r3, [r7]
 2951 0040 9A60     		str	r2, [r3, #8]
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2952              		.loc 1 1250 0
 2953 0042 7B68     		ldr	r3, [r7, #4]
 2954 0044 DB69     		ldr	r3, [r3, #28]
 2955 0046 DA6B     		ldr	r2, [r3, #60]
 2956 0048 3B68     		ldr	r3, [r7]
 2957 004a 1A60     		str	r2, [r3]
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2958              		.loc 1 1251 0
 2959 004c 3B68     		ldr	r3, [r7]
 2960 004e 1A68     		ldr	r2, [r3]
 2961 0050 7B68     		ldr	r3, [r7, #4]
 2962 0052 9B69     		ldr	r3, [r3, #24]
 2963 0054 5B6B     		ldr	r3, [r3, #52]
 2964 0056 5A43     		mul	r2, r3
 2965 0058 3B68     		ldr	r3, [r7]
 2966 005a 1A60     		str	r2, [r3]
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2967              		.loc 1 1252 0
 2968 005c 3B68     		ldr	r3, [r7]
 2969 005e 1A68     		ldr	r2, [r3]
 2970 0060 7B68     		ldr	r3, [r7, #4]
 2971 0062 9B69     		ldr	r3, [r3, #24]
 2972 0064 DB6B     		ldr	r3, [r3, #60]
 2973 0066 D218     		add	r2, r2, r3
 2974 0068 3B68     		ldr	r3, [r7]
 2975 006a 1A60     		str	r2, [r3]
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2976              		.loc 1 1253 0
 2977 006c 7B68     		ldr	r3, [r7, #4]
 2978 006e DB69     		ldr	r3, [r3, #28]
 2979 0070 5B6B     		ldr	r3, [r3, #52]
 2980 0072 5A1C     		add	r2, r3, #1
 2981 0074 3B68     		ldr	r3, [r7]
 2982 0076 5A60     		str	r2, [r3, #4]
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2983              		.loc 1 1254 0
 2984 0078 3B68     		ldr	r3, [r7]
 2985 007a 5A68     		ldr	r2, [r3, #4]
 2986 007c 7B68     		ldr	r3, [r7, #4]
 2987 007e 9B69     		ldr	r3, [r3, #24]
 2988 0080 5B6B     		ldr	r3, [r3, #52]
 2989 0082 1B04     		lsl	r3, r3, #16
 2990 0084 1B0C     		lsr	r3, r3, #16
 2991 0086 0133     		add	r3, r3, #1
 2992 0088 5A43     		mul	r2, r3
 2993 008a 3B68     		ldr	r3, [r7]
 2994 008c 5A60     		str	r2, [r3, #4]
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2995              		.loc 1 1255 0
 2996 008e 3B68     		ldr	r3, [r7]
 2997 0090 5B68     		ldr	r3, [r3, #4]
 2998 0092 5A1C     		add	r2, r3, #1
 2999 0094 3B68     		ldr	r3, [r7]
 3000 0096 5A60     		str	r2, [r3, #4]
 3001 0098 10E0     		b	.L134
 3002              	.L133:
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 3003              		.loc 1 1260 0
 3004 009a 7B68     		ldr	r3, [r7, #4]
 3005 009c 9B69     		ldr	r3, [r3, #24]
 3006 009e 1B6F     		ldr	r3, [r3, #112]
 3007 00a0 1B04     		lsl	r3, r3, #16
 3008 00a2 1A0C     		lsr	r2, r3, #16
 3009 00a4 3B68     		ldr	r3, [r7]
 3010 00a6 9A60     		str	r2, [r3, #8]
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 3011              		.loc 1 1263 0
 3012 00a8 7B68     		ldr	r3, [r7, #4]
 3013 00aa 9B69     		ldr	r3, [r3, #24]
 3014 00ac DA6B     		ldr	r2, [r3, #60]
 3015 00ae 3B68     		ldr	r3, [r7]
 3016 00b0 1A60     		str	r2, [r3]
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3017              		.loc 1 1264 0
 3018 00b2 7B68     		ldr	r3, [r7, #4]
 3019 00b4 9B69     		ldr	r3, [r3, #24]
 3020 00b6 5A6B     		ldr	r2, [r3, #52]
 3021 00b8 3B68     		ldr	r3, [r7]
 3022 00ba 5A60     		str	r2, [r3, #4]
 3023              	.L134:
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3024              		.loc 1 1267 0
 3025 00bc 0023     		mov	r3, #0
 3026 00be FB60     		str	r3, [r7, #12]
 3027              	.L132:
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3028              		.loc 1 1269 0
 3029 00c0 FB68     		ldr	r3, [r7, #12]
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3030              		.loc 1 1270 0
 3031 00c2 181C     		mov	r0, r3
 3032 00c4 BD46     		mov	sp, r7
 3033 00c6 04B0     		add	sp, sp, #16
 3034              		@ sp needed for prologue
 3035 00c8 80BD     		pop	{r7, pc}
 3036              		.cfi_endproc
 3037              	.LFE58:
 3039 00ca C046     		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 3040              		.align	2
 3041              		.global	PWMSP001_GetPeriodReg
 3042              		.code	16
 3043              		.thumb_func
 3045              	PWMSP001_GetPeriodReg:
 3046              	.LFB59:
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3047              		.loc 1 1281 0
 3048              		.cfi_startproc
 3049 0000 80B5     		push	{r7, lr}
 3050              	.LCFI63:
 3051              		.cfi_def_cfa_offset 8
 3052              		.cfi_offset 7, -8
 3053              		.cfi_offset 14, -4
 3054 0002 84B0     		sub	sp, sp, #16
 3055              	.LCFI64:
 3056              		.cfi_def_cfa_offset 24
 3057 0004 00AF     		add	r7, sp, #0
 3058              	.LCFI65:
 3059              		.cfi_def_cfa_register 7
 3060 0006 7860     		str	r0, [r7, #4]
 3061 0008 3960     		str	r1, [r7]
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3062              		.loc 1 1282 0
 3063 000a 0123     		mov	r3, #1
 3064 000c FB60     		str	r3, [r7, #12]
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3065              		.loc 1 1285 0
 3066 000e 7B68     		ldr	r3, [r7, #4]
 3067 0010 DB6B     		ldr	r3, [r3, #60]
 3068 0012 1B78     		ldrb	r3, [r3]
 3069 0014 002B     		cmp	r3, #0
 3070 0016 22D0     		beq	.L137
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3071              		.loc 1 1291 0
 3072 0018 7A68     		ldr	r2, [r7, #4]
 3073 001a 2023     		mov	r3, #32
 3074 001c D35C     		ldrb	r3, [r2, r3]
 3075 001e 012B     		cmp	r3, #1
 3076 0020 16D1     		bne	.L138
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 3077              		.loc 1 1293 0
 3078 0022 7B68     		ldr	r3, [r7, #4]
 3079 0024 DB69     		ldr	r3, [r3, #28]
 3080 0026 5B6B     		ldr	r3, [r3, #52]
 3081 0028 5A1C     		add	r2, r3, #1
 3082 002a 3B68     		ldr	r3, [r7]
 3083 002c 1A60     		str	r2, [r3]
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3084              		.loc 1 1294 0
 3085 002e 3B68     		ldr	r3, [r7]
 3086 0030 1A68     		ldr	r2, [r3]
 3087 0032 7B68     		ldr	r3, [r7, #4]
 3088 0034 9B69     		ldr	r3, [r3, #24]
 3089 0036 5B6B     		ldr	r3, [r3, #52]
 3090 0038 1B04     		lsl	r3, r3, #16
 3091 003a 1B0C     		lsr	r3, r3, #16
 3092 003c 0133     		add	r3, r3, #1
 3093 003e 5A43     		mul	r2, r3
 3094 0040 3B68     		ldr	r3, [r7]
 3095 0042 1A60     		str	r2, [r3]
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 3096              		.loc 1 1295 0
 3097 0044 3B68     		ldr	r3, [r7]
 3098 0046 1B68     		ldr	r3, [r3]
 3099 0048 5A1C     		add	r2, r3, #1
 3100 004a 3B68     		ldr	r3, [r7]
 3101 004c 1A60     		str	r2, [r3]
 3102 004e 04E0     		b	.L139
 3103              	.L138:
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3104              		.loc 1 1299 0
 3105 0050 7B68     		ldr	r3, [r7, #4]
 3106 0052 9B69     		ldr	r3, [r3, #24]
 3107 0054 5A6B     		ldr	r2, [r3, #52]
 3108 0056 3B68     		ldr	r3, [r7]
 3109 0058 1A60     		str	r2, [r3]
 3110              	.L139:
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3111              		.loc 1 1301 0
 3112 005a 0023     		mov	r3, #0
 3113 005c FB60     		str	r3, [r7, #12]
 3114              	.L137:
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3115              		.loc 1 1303 0
 3116 005e FB68     		ldr	r3, [r7, #12]
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3117              		.loc 1 1304 0
 3118 0060 181C     		mov	r0, r3
 3119 0062 BD46     		mov	sp, r7
 3120 0064 04B0     		add	sp, sp, #16
 3121              		@ sp needed for prologue
 3122 0066 80BD     		pop	{r7, pc}
 3123              		.cfi_endproc
 3124              	.LFE59:
 3126              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3127              		.align	2
 3128              		.global	PWMSP001_SWRequestShadowTransfer
 3129              		.code	16
 3130              		.thumb_func
 3132              	PWMSP001_SWRequestShadowTransfer:
 3133              	.LFB60:
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3134              		.loc 1 1314 0
 3135              		.cfi_startproc
 3136 0000 B0B5     		push	{r4, r5, r7, lr}
 3137              	.LCFI66:
 3138              		.cfi_def_cfa_offset 16
 3139              		.cfi_offset 4, -16
 3140              		.cfi_offset 5, -12
 3141              		.cfi_offset 7, -8
 3142              		.cfi_offset 14, -4
 3143 0002 86B0     		sub	sp, sp, #24
 3144              	.LCFI67:
 3145              		.cfi_def_cfa_offset 40
 3146 0004 00AF     		add	r7, sp, #0
 3147              	.LCFI68:
 3148              		.cfi_def_cfa_register 7
 3149 0006 7860     		str	r0, [r7, #4]
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3150              		.loc 1 1315 0
 3151 0008 0123     		mov	r3, #1
 3152 000a 7B61     		str	r3, [r7, #20]
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3153              		.loc 1 1321 0
 3154 000c 7B68     		ldr	r3, [r7, #4]
 3155 000e DB6B     		ldr	r3, [r3, #60]
 3156 0010 1B78     		ldrb	r3, [r3]
 3157 0012 002B     		cmp	r3, #0
 3158 0014 32D0     		beq	.L142
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3159              		.loc 1 1329 0
 3160 0016 7A68     		ldr	r2, [r7, #4]
 3161 0018 2023     		mov	r3, #32
 3162 001a D35C     		ldrb	r3, [r2, r3]
 3163 001c 012B     		cmp	r3, #1
 3164 001e 1AD1     		bne	.L143
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3165              		.loc 1 1332 0
 3166 0020 7A68     		ldr	r2, [r7, #4]
 3167 0022 3723     		mov	r3, #55
 3168 0024 D35C     		ldrb	r3, [r2, r3]
 3169 0026 9B00     		lsl	r3, r3, #2
 3170 0028 3B61     		str	r3, [r7, #16]
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3171              		.loc 1 1333 0
 3172 002a 7A68     		ldr	r2, [r7, #4]
 3173 002c 3823     		mov	r3, #56
 3174 002e D35C     		ldrb	r3, [r2, r3]
 3175 0030 9B00     		lsl	r3, r3, #2
 3176 0032 FB60     		str	r3, [r7, #12]
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3177              		.loc 1 1334 0
 3178 0034 7B68     		ldr	r3, [r7, #4]
 3179 0036 5B69     		ldr	r3, [r3, #20]
 3180 0038 7A68     		ldr	r2, [r7, #4]
 3181 003a 5269     		ldr	r2, [r2, #20]
 3182 003c 1169     		ldr	r1, [r2, #16]
 3183 003e 3A69     		ldr	r2, [r7, #16]
 3184 0040 0120     		mov	r0, #1
 3185 0042 9040     		lsl	r0, r0, r2
 3186 0044 FA68     		ldr	r2, [r7, #12]
 3187 0046 0124     		mov	r4, #1
 3188 0048 251C     		mov	r5, r4
 3189 004a 9540     		lsl	r5, r5, r2
 3190 004c 2A1C     		mov	r2, r5
 3191 004e 0243     		orr	r2, r0
 3192 0050 0A43     		orr	r2, r1
 3193 0052 1A61     		str	r2, [r3, #16]
 3194 0054 10E0     		b	.L144
 3195              	.L143:
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3196              		.loc 1 1338 0
 3197 0056 7A68     		ldr	r2, [r7, #4]
 3198 0058 3723     		mov	r3, #55
 3199 005a D35C     		ldrb	r3, [r2, r3]
 3200 005c 9B00     		lsl	r3, r3, #2
 3201 005e BB60     		str	r3, [r7, #8]
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3202              		.loc 1 1339 0
 3203 0060 7B68     		ldr	r3, [r7, #4]
 3204 0062 5B69     		ldr	r3, [r3, #20]
 3205 0064 7A68     		ldr	r2, [r7, #4]
 3206 0066 5269     		ldr	r2, [r2, #20]
 3207 0068 1169     		ldr	r1, [r2, #16]
 3208 006a BA68     		ldr	r2, [r7, #8]
 3209 006c 0120     		mov	r0, #1
 3210 006e 041C     		mov	r4, r0
 3211 0070 9440     		lsl	r4, r4, r2
 3212 0072 221C     		mov	r2, r4
 3213 0074 0A43     		orr	r2, r1
 3214 0076 1A61     		str	r2, [r3, #16]
 3215              	.L144:
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3216              		.loc 1 1341 0
 3217 0078 0023     		mov	r3, #0
 3218 007a 7B61     		str	r3, [r7, #20]
 3219              	.L142:
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3220              		.loc 1 1343 0
 3221 007c 7B69     		ldr	r3, [r7, #20]
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3222              		.loc 1 1344 0
 3223 007e 181C     		mov	r0, r3
 3224 0080 BD46     		mov	sp, r7
 3225 0082 06B0     		add	sp, sp, #24
 3226              		@ sp needed for prologue
 3227 0084 B0BD     		pop	{r4, r5, r7, pc}
 3228              		.cfi_endproc
 3229              	.LFE60:
 3231 0086 C046     		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3232              		.align	2
 3233              		.global	PWMSP001_ResetTrapFlag
 3234              		.code	16
 3235              		.thumb_func
 3237              	PWMSP001_ResetTrapFlag:
 3238              	.LFB61:
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3239              		.loc 1 1351 0
 3240              		.cfi_startproc
 3241 0000 80B5     		push	{r7, lr}
 3242              	.LCFI69:
 3243              		.cfi_def_cfa_offset 8
 3244              		.cfi_offset 7, -8
 3245              		.cfi_offset 14, -4
 3246 0002 82B0     		sub	sp, sp, #8
 3247              	.LCFI70:
 3248              		.cfi_def_cfa_offset 16
 3249 0004 00AF     		add	r7, sp, #0
 3250              	.LCFI71:
 3251              		.cfi_def_cfa_register 7
 3252 0006 7860     		str	r0, [r7, #4]
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3253              		.loc 1 1352 0
 3254 0008 7B68     		ldr	r3, [r7, #4]
 3255 000a DB7C     		ldrb	r3, [r3, #19]
 3256 000c 012B     		cmp	r3, #1
 3257 000e 1AD1     		bne	.L147
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3258              		.loc 1 1354 0
 3259 0010 7B68     		ldr	r3, [r7, #4]
 3260 0012 9A69     		ldr	r2, [r3, #24]
 3261 0014 7B68     		ldr	r3, [r7, #4]
 3262 0016 9969     		ldr	r1, [r3, #24]
 3263 0018 B023     		mov	r3, #176
 3264 001a CB58     		ldr	r3, [r1, r3]
 3265 001c 8021     		mov	r1, #128
 3266 001e C900     		lsl	r1, r1, #3
 3267 0020 1943     		orr	r1, r3
 3268 0022 B023     		mov	r3, #176
 3269 0024 D150     		str	r1, [r2, r3]
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3270              		.loc 1 1355 0
 3271 0026 7A68     		ldr	r2, [r7, #4]
 3272 0028 2023     		mov	r3, #32
 3273 002a D35C     		ldrb	r3, [r2, r3]
 3274 002c 012B     		cmp	r3, #1
 3275 002e 0AD1     		bne	.L147
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3276              		.loc 1 1357 0
 3277 0030 7B68     		ldr	r3, [r7, #4]
 3278 0032 DA69     		ldr	r2, [r3, #28]
 3279 0034 7B68     		ldr	r3, [r7, #4]
 3280 0036 D969     		ldr	r1, [r3, #28]
 3281 0038 B023     		mov	r3, #176
 3282 003a CB58     		ldr	r3, [r1, r3]
 3283 003c 8021     		mov	r1, #128
 3284 003e C900     		lsl	r1, r1, #3
 3285 0040 1943     		orr	r1, r3
 3286 0042 B023     		mov	r3, #176
 3287 0044 D150     		str	r1, [r2, r3]
 3288              	.L147:
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3289              		.loc 1 1360 0
 3290 0046 7B68     		ldr	r3, [r7, #4]
 3291 0048 9A69     		ldr	r2, [r3, #24]
 3292 004a 7B68     		ldr	r3, [r7, #4]
 3293 004c 9969     		ldr	r1, [r3, #24]
 3294 004e B023     		mov	r3, #176
 3295 0050 CB58     		ldr	r3, [r1, r3]
 3296 0052 8021     		mov	r1, #128
 3297 0054 0901     		lsl	r1, r1, #4
 3298 0056 1943     		orr	r1, r3
 3299 0058 B023     		mov	r3, #176
 3300 005a D150     		str	r1, [r2, r3]
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3301              		.loc 1 1361 0
 3302 005c 7A68     		ldr	r2, [r7, #4]
 3303 005e 2023     		mov	r3, #32
 3304 0060 D35C     		ldrb	r3, [r2, r3]
 3305 0062 012B     		cmp	r3, #1
 3306 0064 0AD1     		bne	.L146
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3307              		.loc 1 1363 0
 3308 0066 7B68     		ldr	r3, [r7, #4]
 3309 0068 DA69     		ldr	r2, [r3, #28]
 3310 006a 7B68     		ldr	r3, [r7, #4]
 3311 006c D969     		ldr	r1, [r3, #28]
 3312 006e B023     		mov	r3, #176
 3313 0070 CB58     		ldr	r3, [r1, r3]
 3314 0072 8021     		mov	r1, #128
 3315 0074 0901     		lsl	r1, r1, #4
 3316 0076 1943     		orr	r1, r3
 3317 0078 B023     		mov	r3, #176
 3318 007a D150     		str	r1, [r2, r3]
 3319              	.L146:
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3320              		.loc 1 1365 0
 3321 007c BD46     		mov	sp, r7
 3322 007e 02B0     		add	sp, sp, #8
 3323              		@ sp needed for prologue
 3324 0080 80BD     		pop	{r7, pc}
 3325              		.cfi_endproc
 3326              	.LFE61:
 3328 0082 C046     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3329              		.align	2
 3330              		.global	PWMSP001_lConfigureSecondSlice
 3331              		.code	16
 3332              		.thumb_func
 3334              	PWMSP001_lConfigureSecondSlice:
 3335              	.LFB62:
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3336              		.loc 1 1373 0
 3337              		.cfi_startproc
 3338 0000 B0B5     		push	{r4, r5, r7, lr}
 3339              	.LCFI72:
 3340              		.cfi_def_cfa_offset 16
 3341              		.cfi_offset 4, -16
 3342              		.cfi_offset 5, -12
 3343              		.cfi_offset 7, -8
 3344              		.cfi_offset 14, -4
 3345 0002 82B0     		sub	sp, sp, #8
 3346              	.LCFI73:
 3347              		.cfi_def_cfa_offset 24
 3348 0004 00AF     		add	r7, sp, #0
 3349              	.LCFI74:
 3350              		.cfi_def_cfa_register 7
 3351 0006 7860     		str	r0, [r7, #4]
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3352              		.loc 1 1374 0
 3353 0008 7B68     		ldr	r3, [r7, #4]
 3354 000a DB69     		ldr	r3, [r3, #28]
 3355 000c 0722     		mov	r2, #7
 3356 000e 1A61     		str	r2, [r3, #16]
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3357              		.loc 1 1377 0
 3358 0010 7B68     		ldr	r3, [r7, #4]
 3359 0012 DB69     		ldr	r3, [r3, #28]
 3360 0014 7A68     		ldr	r2, [r7, #4]
 3361 0016 926A     		ldr	r2, [r2, #40]
 3362 0018 120C     		lsr	r2, r2, #16
 3363 001a 5A63     		str	r2, [r3, #52]
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3364              		.loc 1 1379 0
 3365 001c 7B68     		ldr	r3, [r7, #4]
 3366 001e DB69     		ldr	r3, [r3, #28]
 3367 0020 7A68     		ldr	r2, [r7, #4]
 3368 0022 9268     		ldr	r2, [r2, #8]
 3369 0024 120C     		lsr	r2, r2, #16
 3370 0026 DA63     		str	r2, [r3, #60]
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3371              		.loc 1 1382 0
 3372 0028 7B68     		ldr	r3, [r7, #4]
 3373 002a DB69     		ldr	r3, [r3, #28]
 3374 002c 7A68     		ldr	r2, [r7, #4]
 3375 002e D269     		ldr	r2, [r2, #28]
 3376 0030 5268     		ldr	r2, [r2, #4]
 3377 0032 8021     		mov	r1, #128
 3378 0034 4903     		lsl	r1, r1, #13
 3379 0036 0A43     		orr	r2, r1
 3380 0038 5A60     		str	r2, [r3, #4]
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3381              		.loc 1 1385 0
 3382 003a 7B68     		ldr	r3, [r7, #4]
 3383 003c DB7B     		ldrb	r3, [r3, #15]
 3384 003e 012B     		cmp	r3, #1
 3385 0040 25D1     		bne	.L150
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3386              		.loc 1 1387 0
 3387 0042 7B68     		ldr	r3, [r7, #4]
 3388 0044 DB69     		ldr	r3, [r3, #28]
 3389 0046 7A68     		ldr	r2, [r7, #4]
 3390 0048 D269     		ldr	r2, [r2, #28]
 3391 004a 1168     		ldr	r1, [r2]
 3392 004c 794A     		ldr	r2, .L152
 3393 004e 0A40     		and	r2, r1
 3394 0050 1A60     		str	r2, [r3]
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3395              		.loc 1 1388 0
 3396 0052 7B68     		ldr	r3, [r7, #4]
 3397 0054 DB69     		ldr	r3, [r3, #28]
 3398 0056 7A68     		ldr	r2, [r7, #4]
 3399 0058 D269     		ldr	r2, [r2, #28]
 3400 005a 5268     		ldr	r2, [r2, #4]
 3401 005c 0C21     		mov	r1, #12
 3402 005e 8A43     		bic	r2, r1
 3403 0060 5A60     		str	r2, [r3, #4]
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3404              		.loc 1 1389 0
 3405 0062 7B68     		ldr	r3, [r7, #4]
 3406 0064 DB69     		ldr	r3, [r3, #28]
 3407 0066 7A68     		ldr	r2, [r7, #4]
 3408 0068 D269     		ldr	r2, [r2, #28]
 3409 006a 1168     		ldr	r1, [r2]
 3410 006c 7868     		ldr	r0, [r7, #4]
 3411 006e 2422     		mov	r2, #36
 3412 0070 825C     		ldrb	r2, [r0, r2]
 3413 0072 9004     		lsl	r0, r2, #18
 3414 0074 C022     		mov	r2, #192
 3415 0076 1203     		lsl	r2, r2, #12
 3416 0078 0240     		and	r2, r0
 3417 007a 0A43     		orr	r2, r1
 3418 007c 1A60     		str	r2, [r3]
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3419              		.loc 1 1393 0
 3420 007e 7B68     		ldr	r3, [r7, #4]
 3421 0080 DB69     		ldr	r3, [r3, #28]
 3422 0082 7A68     		ldr	r2, [r7, #4]
 3423 0084 D269     		ldr	r2, [r2, #28]
 3424 0086 5268     		ldr	r2, [r2, #4]
 3425 0088 0821     		mov	r1, #8
 3426 008a 0A43     		orr	r2, r1
 3427 008c 5A60     		str	r2, [r3, #4]
 3428              	.L150:
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3429              		.loc 1 1398 0
 3430 008e 7B68     		ldr	r3, [r7, #4]
 3431 0090 5B7C     		ldrb	r3, [r3, #17]
 3432 0092 012B     		cmp	r3, #1
 3433 0094 25D1     		bne	.L151
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3434              		.loc 1 1400 0
 3435 0096 7B68     		ldr	r3, [r7, #4]
 3436 0098 DB69     		ldr	r3, [r3, #28]
 3437 009a 7A68     		ldr	r2, [r7, #4]
 3438 009c D269     		ldr	r2, [r2, #28]
 3439 009e 1168     		ldr	r1, [r2]
 3440 00a0 654A     		ldr	r2, .L152+4
 3441 00a2 0A40     		and	r2, r1
 3442 00a4 1A60     		str	r2, [r3]
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3443              		.loc 1 1402 0
 3444 00a6 7B68     		ldr	r3, [r7, #4]
 3445 00a8 DB69     		ldr	r3, [r3, #28]
 3446 00aa 7A68     		ldr	r2, [r7, #4]
 3447 00ac D269     		ldr	r2, [r2, #28]
 3448 00ae 5168     		ldr	r1, [r2, #4]
 3449 00b0 624A     		ldr	r2, .L152+8
 3450 00b2 0A40     		and	r2, r1
 3451 00b4 5A60     		str	r2, [r3, #4]
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3452              		.loc 1 1403 0
 3453 00b6 7B68     		ldr	r3, [r7, #4]
 3454 00b8 DB69     		ldr	r3, [r3, #28]
 3455 00ba 7A68     		ldr	r2, [r7, #4]
 3456 00bc D269     		ldr	r2, [r2, #28]
 3457 00be 1168     		ldr	r1, [r2]
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3458              		.loc 1 1405 0
 3459 00c0 7A68     		ldr	r2, [r7, #4]
 3460 00c2 1278     		ldrb	r2, [r2]
 3461 00c4 1006     		lsl	r0, r2, #24
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3462              		.loc 1 1403 0
 3463 00c6 8022     		mov	r2, #128
 3464 00c8 5204     		lsl	r2, r2, #17
 3465 00ca 0240     		and	r2, r0
 3466 00cc 0A43     		orr	r2, r1
 3467 00ce 1A60     		str	r2, [r3]
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3468              		.loc 1 1408 0
 3469 00d0 7B68     		ldr	r3, [r7, #4]
 3470 00d2 DB69     		ldr	r3, [r3, #28]
 3471 00d4 7A68     		ldr	r2, [r7, #4]
 3472 00d6 D269     		ldr	r2, [r2, #28]
 3473 00d8 5268     		ldr	r2, [r2, #4]
 3474 00da 8021     		mov	r1, #128
 3475 00dc 8902     		lsl	r1, r1, #10
 3476 00de 0A43     		orr	r2, r1
 3477 00e0 5A60     		str	r2, [r3, #4]
 3478              	.L151:
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3479              		.loc 1 1411 0
 3480 00e2 7B68     		ldr	r3, [r7, #4]
 3481 00e4 DB69     		ldr	r3, [r3, #28]
 3482 00e6 7A68     		ldr	r2, [r7, #4]
 3483 00e8 D269     		ldr	r2, [r2, #28]
 3484 00ea 5169     		ldr	r1, [r2, #20]
 3485 00ec 544A     		ldr	r2, .L152+12
 3486 00ee 0A40     		and	r2, r1
 3487 00f0 5A61     		str	r2, [r3, #20]
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3488              		.loc 1 1414 0
 3489 00f2 7B68     		ldr	r3, [r7, #4]
 3490 00f4 DB69     		ldr	r3, [r3, #28]
 3491 00f6 7968     		ldr	r1, [r7, #4]
 3492 00f8 3622     		mov	r2, #54
 3493 00fa 8A5C     		ldrb	r2, [r1, r2]
 3494 00fc 111C     		mov	r1, r2
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3495              		.loc 1 1415 0
 3496 00fe 0122     		mov	r2, #1
 3497 0100 1140     		and	r1, r2
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3498              		.loc 1 1416 0
 3499 0102 7A68     		ldr	r2, [r7, #4]
 3500 0104 127B     		ldrb	r2, [r2, #12]
 3501 0106 5000     		lsl	r0, r2, #1
 3502 0108 0222     		mov	r2, #2
 3503 010a 0240     		and	r2, r0
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3504              		.loc 1 1417 0
 3505 010c 1143     		orr	r1, r2
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3506              		.loc 1 1419 0
 3507 010e 7868     		ldr	r0, [r7, #4]
 3508 0110 3422     		mov	r2, #52
 3509 0112 825C     		ldrb	r2, [r0, r2]
 3510 0114 9002     		lsl	r0, r2, #10
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3511              		.loc 1 1420 0
 3512 0116 8022     		mov	r2, #128
 3513 0118 D200     		lsl	r2, r2, #3
 3514 011a 0240     		and	r2, r0
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3515              		.loc 1 1418 0
 3516 011c 1143     		orr	r1, r2
 3517              		.loc 1 1420 0
 3518 011e 7868     		ldr	r0, [r7, #4]
 3519 0120 3522     		mov	r2, #53
 3520 0122 825C     		ldrb	r2, [r0, r2]
 3521 0124 1002     		lsl	r0, r2, #8
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3522              		.loc 1 1421 0
 3523 0126 C022     		mov	r2, #192
 3524 0128 9200     		lsl	r2, r2, #2
 3525 012a 0240     		and	r2, r0
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3526              		.loc 1 1420 0
 3527 012c 0A43     		orr	r2, r1
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3528              		.loc 1 1414 0
 3529 012e 5A61     		str	r2, [r3, #20]
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3530              		.loc 1 1424 0
 3531 0130 7B68     		ldr	r3, [r7, #4]
 3532 0132 DB69     		ldr	r3, [r3, #28]
 3533 0134 7A68     		ldr	r2, [r7, #4]
 3534 0136 D269     		ldr	r2, [r2, #28]
 3535 0138 5169     		ldr	r1, [r2, #20]
 3536 013a 7868     		ldr	r0, [r7, #4]
 3537 013c 2122     		mov	r2, #33
 3538 013e 825C     		ldrb	r2, [r0, r2]
 3539 0140 5003     		lsl	r0, r2, #13
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3540              		.loc 1 1425 0
 3541 0142 C022     		mov	r2, #192
 3542 0144 D201     		lsl	r2, r2, #7
 3543 0146 0240     		and	r2, r0
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3544              		.loc 1 1424 0
 3545 0148 0A43     		orr	r2, r1
 3546 014a 5A61     		str	r2, [r3, #20]
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3547              		.loc 1 1426 0
 3548 014c 7B68     		ldr	r3, [r7, #4]
 3549 014e DB69     		ldr	r3, [r3, #28]
 3550 0150 7A68     		ldr	r2, [r7, #4]
 3551 0152 527B     		ldrb	r2, [r2, #13]
 3552 0154 111C     		mov	r1, r2
 3553 0156 0F22     		mov	r2, #15
 3554 0158 1140     		and	r1, r2
 3555 015a 7A68     		ldr	r2, [r7, #4]
 3556 015c D269     		ldr	r2, [r2, #28]
 3557 015e 126A     		ldr	r2, [r2, #32]
 3558 0160 0F20     		mov	r0, #15
 3559 0162 8243     		bic	r2, r0
 3560 0164 0A43     		orr	r2, r1
 3561 0166 1A62     		str	r2, [r3, #32]
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3562              		.loc 1 1430 0
 3563 0168 7B68     		ldr	r3, [r7, #4]
 3564 016a DB69     		ldr	r3, [r3, #28]
 3565 016c 7A68     		ldr	r2, [r7, #4]
 3566 016e 927C     		ldrb	r2, [r2, #18]
 3567 0170 5105     		lsl	r1, r2, #21
 3568 0172 8022     		mov	r2, #128
 3569 0174 9203     		lsl	r2, r2, #14
 3570 0176 1140     		and	r1, r2
 3571 0178 7A68     		ldr	r2, [r7, #4]
 3572 017a D269     		ldr	r2, [r2, #28]
 3573 017c 5069     		ldr	r0, [r2, #20]
 3574 017e 314A     		ldr	r2, .L152+16
 3575 0180 0240     		and	r2, r0
 3576 0182 0A43     		orr	r2, r1
 3577 0184 5A61     		str	r2, [r3, #20]
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3578              		.loc 1 1433 0
 3579 0186 7B68     		ldr	r3, [r7, #4]
 3580 0188 DB69     		ldr	r3, [r3, #28]
 3581 018a 7A68     		ldr	r2, [r7, #4]
 3582 018c D27C     		ldrb	r2, [r2, #19]
 3583 018e 9105     		lsl	r1, r2, #22
 3584 0190 8022     		mov	r2, #128
 3585 0192 D203     		lsl	r2, r2, #15
 3586 0194 1140     		and	r1, r2
 3587 0196 7A68     		ldr	r2, [r7, #4]
 3588 0198 D269     		ldr	r2, [r2, #28]
 3589 019a 5069     		ldr	r0, [r2, #20]
 3590 019c 2A4A     		ldr	r2, .L152+20
 3591 019e 0240     		and	r2, r0
 3592 01a0 0A43     		orr	r2, r1
 3593 01a2 5A61     		str	r2, [r3, #20]
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3594              		.loc 1 1436 0
 3595 01a4 7B68     		ldr	r3, [r7, #4]
 3596 01a6 DB69     		ldr	r3, [r3, #28]
 3597 01a8 7A68     		ldr	r2, [r7, #4]
 3598 01aa 527C     		ldrb	r2, [r2, #17]
 3599 01ac 5104     		lsl	r1, r2, #17
 3600 01ae 8022     		mov	r2, #128
 3601 01b0 9202     		lsl	r2, r2, #10
 3602 01b2 1140     		and	r1, r2
 3603 01b4 7A68     		ldr	r2, [r7, #4]
 3604 01b6 D269     		ldr	r2, [r2, #28]
 3605 01b8 5069     		ldr	r0, [r2, #20]
 3606 01ba 204A     		ldr	r2, .L152+8
 3607 01bc 0240     		and	r2, r0
 3608 01be 0A43     		orr	r2, r1
 3609 01c0 5A61     		str	r2, [r3, #20]
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3610              		.loc 1 1439 0
 3611 01c2 7B68     		ldr	r3, [r7, #4]
 3612 01c4 DB69     		ldr	r3, [r3, #28]
 3613 01c6 7968     		ldr	r1, [r7, #4]
 3614 01c8 2222     		mov	r2, #34
 3615 01ca 8A5C     		ldrb	r2, [r1, r2]
 3616 01cc 111C     		mov	r1, r2
 3617 01ce 0F22     		mov	r2, #15
 3618 01d0 1140     		and	r1, r2
 3619 01d2 7A68     		ldr	r2, [r7, #4]
 3620 01d4 D269     		ldr	r2, [r2, #28]
 3621 01d6 526A     		ldr	r2, [r2, #36]
 3622 01d8 0F20     		mov	r0, #15
 3623 01da 8243     		bic	r2, r0
 3624 01dc 0A43     		orr	r2, r1
 3625 01de 5A62     		str	r2, [r3, #36]
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3626              		.loc 1 1442 0
 3627 01e0 7B68     		ldr	r3, [r7, #4]
 3628 01e2 DB69     		ldr	r3, [r3, #28]
 3629 01e4 7A68     		ldr	r2, [r7, #4]
 3630 01e6 127C     		ldrb	r2, [r2, #16]
 3631 01e8 9A61     		str	r2, [r3, #24]
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3632              		.loc 1 1444 0
 3633 01ea 7B68     		ldr	r3, [r7, #4]
 3634 01ec 5B69     		ldr	r3, [r3, #20]
 3635 01ee 7A68     		ldr	r2, [r7, #4]
 3636 01f0 5269     		ldr	r2, [r2, #20]
 3637 01f2 1169     		ldr	r1, [r2, #16]
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3638              		.loc 1 1445 0
 3639 01f4 7868     		ldr	r0, [r7, #4]
 3640 01f6 3822     		mov	r2, #56
 3641 01f8 825C     		ldrb	r2, [r0, r2]
 3642 01fa 9200     		lsl	r2, r2, #2
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3643              		.loc 1 1444 0
 3644 01fc 0120     		mov	r0, #1
 3645 01fe 9040     		lsl	r0, r0, r2
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3646              		.loc 1 1447 0
 3647 0200 7C68     		ldr	r4, [r7, #4]
 3648 0202 3822     		mov	r2, #56
 3649 0204 A25C     		ldrb	r2, [r4, r2]
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3650              		.loc 1 1446 0
 3651 0206 9200     		lsl	r2, r2, #2
 3652              		.loc 1 1447 0
 3653 0208 0132     		add	r2, r2, #1
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3654              		.loc 1 1446 0
 3655 020a 0124     		mov	r4, #1
 3656 020c 251C     		mov	r5, r4
 3657 020e 9540     		lsl	r5, r5, r2
 3658 0210 2A1C     		mov	r2, r5
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3659              		.loc 1 1445 0
 3660 0212 1043     		orr	r0, r2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3661              		.loc 1 1449 0
 3662 0214 7C68     		ldr	r4, [r7, #4]
 3663 0216 3822     		mov	r2, #56
 3664 0218 A25C     		ldrb	r2, [r4, r2]
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3665              		.loc 1 1448 0
 3666 021a 9200     		lsl	r2, r2, #2
 3667              		.loc 1 1449 0
 3668 021c 0232     		add	r2, r2, #2
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3669              		.loc 1 1448 0
 3670 021e 0124     		mov	r4, #1
 3671 0220 251C     		mov	r5, r4
 3672 0222 9540     		lsl	r5, r5, r2
 3673 0224 2A1C     		mov	r2, r5
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3674              		.loc 1 1444 0
 3675 0226 0243     		orr	r2, r0
 3676 0228 0A43     		orr	r2, r1
 3677 022a 1A61     		str	r2, [r3, #16]
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3678              		.loc 1 1450 0
 3679 022c BD46     		mov	sp, r7
 3680 022e 02B0     		add	sp, sp, #8
 3681              		@ sp needed for prologue
 3682 0230 B0BD     		pop	{r4, r5, r7, pc}
 3683              	.L153:
 3684 0232 C046     		.align	2
 3685              	.L152:
 3686 0234 FFFFF3E7 		.word	-403439617
 3687 0238 FFFFCF9E 		.word	-1630535681
 3688 023c FFFFFDFF 		.word	-131073
 3689 0240 F498FFFF 		.word	-26380
 3690 0244 FFFFDFFF 		.word	-2097153
 3691 0248 FFFFBFFF 		.word	-4194305
 3692              		.cfi_endproc
 3693              	.LFE62:
 3695              		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3696              		.align	2
 3697              		.global	PWMSP001_EnableEvent
 3698              		.code	16
 3699              		.thumb_func
 3701              	PWMSP001_EnableEvent:
 3702              	.LFB63:
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3703              		.loc 1 1460 0
 3704              		.cfi_startproc
 3705 0000 90B5     		push	{r4, r7, lr}
 3706              	.LCFI75:
 3707              		.cfi_def_cfa_offset 12
 3708              		.cfi_offset 4, -12
 3709              		.cfi_offset 7, -8
 3710              		.cfi_offset 14, -4
 3711 0002 85B0     		sub	sp, sp, #20
 3712              	.LCFI76:
 3713              		.cfi_def_cfa_offset 32
 3714 0004 00AF     		add	r7, sp, #0
 3715              	.LCFI77:
 3716              		.cfi_def_cfa_register 7
 3717 0006 7860     		str	r0, [r7, #4]
 3718 0008 0A1C     		mov	r2, r1
 3719 000a FB1C     		add	r3, r7, #3
 3720 000c 1A70     		strb	r2, [r3]
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3721              		.loc 1 1461 0
 3722 000e 0123     		mov	r3, #1
 3723 0010 FB60     		str	r3, [r7, #12]
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3724              		.loc 1 1463 0
 3725 0012 7B68     		ldr	r3, [r7, #4]
 3726 0014 DB6B     		ldr	r3, [r3, #60]
 3727 0016 1B78     		ldrb	r3, [r3]
 3728 0018 002B     		cmp	r3, #0
 3729 001a 02D1     		bne	.L155
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3730              		.loc 1 1465 0
 3731 001c 0123     		mov	r3, #1
 3732 001e FB60     		str	r3, [r7, #12]
 3733 0020 25E0     		b	.L156
 3734              	.L155:
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3735              		.loc 1 1470 0
 3736 0022 7A68     		ldr	r2, [r7, #4]
 3737 0024 2023     		mov	r3, #32
 3738 0026 D35C     		ldrb	r3, [r2, r3]
 3739 0028 012B     		cmp	r3, #1
 3740 002a 0FD1     		bne	.L157
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3741              		.loc 1 1472 0
 3742 002c 7B68     		ldr	r3, [r7, #4]
 3743 002e DA69     		ldr	r2, [r3, #28]
 3744 0030 7B68     		ldr	r3, [r7, #4]
 3745 0032 D969     		ldr	r1, [r3, #28]
 3746 0034 A423     		mov	r3, #164
 3747 0036 C958     		ldr	r1, [r1, r3]
 3748 0038 FB1C     		add	r3, r7, #3
 3749 003a 1B78     		ldrb	r3, [r3]
 3750 003c 0120     		mov	r0, #1
 3751 003e 041C     		mov	r4, r0
 3752 0040 9C40     		lsl	r4, r4, r3
 3753 0042 231C     		mov	r3, r4
 3754 0044 1943     		orr	r1, r3
 3755 0046 A423     		mov	r3, #164
 3756 0048 D150     		str	r1, [r2, r3]
 3757 004a 0EE0     		b	.L158
 3758              	.L157:
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3759              		.loc 1 1476 0
 3760 004c 7B68     		ldr	r3, [r7, #4]
 3761 004e 9A69     		ldr	r2, [r3, #24]
 3762 0050 7B68     		ldr	r3, [r7, #4]
 3763 0052 9969     		ldr	r1, [r3, #24]
 3764 0054 A423     		mov	r3, #164
 3765 0056 C958     		ldr	r1, [r1, r3]
 3766 0058 FB1C     		add	r3, r7, #3
 3767 005a 1B78     		ldrb	r3, [r3]
 3768 005c 0120     		mov	r0, #1
 3769 005e 041C     		mov	r4, r0
 3770 0060 9C40     		lsl	r4, r4, r3
 3771 0062 231C     		mov	r3, r4
 3772 0064 1943     		orr	r1, r3
 3773 0066 A423     		mov	r3, #164
 3774 0068 D150     		str	r1, [r2, r3]
 3775              	.L158:
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3776              		.loc 1 1478 0
 3777 006a 0023     		mov	r3, #0
 3778 006c FB60     		str	r3, [r7, #12]
 3779              	.L156:
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3780              		.loc 1 1480 0
 3781 006e FB68     		ldr	r3, [r7, #12]
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3782              		.loc 1 1481 0
 3783 0070 181C     		mov	r0, r3
 3784 0072 BD46     		mov	sp, r7
 3785 0074 05B0     		add	sp, sp, #20
 3786              		@ sp needed for prologue
 3787 0076 90BD     		pop	{r4, r7, pc}
 3788              		.cfi_endproc
 3789              	.LFE63:
 3791              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3792              		.align	2
 3793              		.global	PWMSP001_DisableEvent
 3794              		.code	16
 3795              		.thumb_func
 3797              	PWMSP001_DisableEvent:
 3798              	.LFB64:
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3799              		.loc 1 1491 0
 3800              		.cfi_startproc
 3801 0000 90B5     		push	{r4, r7, lr}
 3802              	.LCFI78:
 3803              		.cfi_def_cfa_offset 12
 3804              		.cfi_offset 4, -12
 3805              		.cfi_offset 7, -8
 3806              		.cfi_offset 14, -4
 3807 0002 85B0     		sub	sp, sp, #20
 3808              	.LCFI79:
 3809              		.cfi_def_cfa_offset 32
 3810 0004 00AF     		add	r7, sp, #0
 3811              	.LCFI80:
 3812              		.cfi_def_cfa_register 7
 3813 0006 7860     		str	r0, [r7, #4]
 3814 0008 0A1C     		mov	r2, r1
 3815 000a FB1C     		add	r3, r7, #3
 3816 000c 1A70     		strb	r2, [r3]
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3817              		.loc 1 1492 0
 3818 000e 0123     		mov	r3, #1
 3819 0010 FB60     		str	r3, [r7, #12]
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3820              		.loc 1 1494 0
 3821 0012 7B68     		ldr	r3, [r7, #4]
 3822 0014 DB6B     		ldr	r3, [r3, #60]
 3823 0016 1B78     		ldrb	r3, [r3]
 3824 0018 002B     		cmp	r3, #0
 3825 001a 02D1     		bne	.L161
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3826              		.loc 1 1496 0
 3827 001c 0123     		mov	r3, #1
 3828 001e FB60     		str	r3, [r7, #12]
 3829 0020 27E0     		b	.L162
 3830              	.L161:
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3831              		.loc 1 1501 0
 3832 0022 7A68     		ldr	r2, [r7, #4]
 3833 0024 2023     		mov	r3, #32
 3834 0026 D35C     		ldrb	r3, [r2, r3]
 3835 0028 012B     		cmp	r3, #1
 3836 002a 10D1     		bne	.L163
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3837              		.loc 1 1503 0
 3838 002c 7B68     		ldr	r3, [r7, #4]
 3839 002e DA69     		ldr	r2, [r3, #28]
 3840 0030 7B68     		ldr	r3, [r7, #4]
 3841 0032 D969     		ldr	r1, [r3, #28]
 3842 0034 A423     		mov	r3, #164
 3843 0036 CB58     		ldr	r3, [r1, r3]
 3844 0038 F91C     		add	r1, r7, #3
 3845 003a 0978     		ldrb	r1, [r1]
 3846 003c 0120     		mov	r0, #1
 3847 003e 041C     		mov	r4, r0
 3848 0040 8C40     		lsl	r4, r4, r1
 3849 0042 211C     		mov	r1, r4
 3850 0044 C943     		mvn	r1, r1
 3851 0046 1940     		and	r1, r3
 3852 0048 A423     		mov	r3, #164
 3853 004a D150     		str	r1, [r2, r3]
 3854 004c 0FE0     		b	.L164
 3855              	.L163:
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3856              		.loc 1 1507 0
 3857 004e 7B68     		ldr	r3, [r7, #4]
 3858 0050 9A69     		ldr	r2, [r3, #24]
 3859 0052 7B68     		ldr	r3, [r7, #4]
 3860 0054 9969     		ldr	r1, [r3, #24]
 3861 0056 A423     		mov	r3, #164
 3862 0058 CB58     		ldr	r3, [r1, r3]
 3863 005a F91C     		add	r1, r7, #3
 3864 005c 0978     		ldrb	r1, [r1]
 3865 005e 0120     		mov	r0, #1
 3866 0060 041C     		mov	r4, r0
 3867 0062 8C40     		lsl	r4, r4, r1
 3868 0064 211C     		mov	r1, r4
 3869 0066 C943     		mvn	r1, r1
 3870 0068 1940     		and	r1, r3
 3871 006a A423     		mov	r3, #164
 3872 006c D150     		str	r1, [r2, r3]
 3873              	.L164:
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3874              		.loc 1 1509 0
 3875 006e 0023     		mov	r3, #0
 3876 0070 FB60     		str	r3, [r7, #12]
 3877              	.L162:
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3878              		.loc 1 1511 0
 3879 0072 FB68     		ldr	r3, [r7, #12]
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3880              		.loc 1 1512 0
 3881 0074 181C     		mov	r0, r3
 3882 0076 BD46     		mov	sp, r7
 3883 0078 05B0     		add	sp, sp, #20
 3884              		@ sp needed for prologue
 3885 007a 90BD     		pop	{r4, r7, pc}
 3886              		.cfi_endproc
 3887              	.LFE64:
 3889              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3890              		.align	2
 3891              		.global	PWMSP001_ClearPendingEvent
 3892              		.code	16
 3893              		.thumb_func
 3895              	PWMSP001_ClearPendingEvent:
 3896              	.LFB65:
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3897              		.loc 1 1522 0
 3898              		.cfi_startproc
 3899 0000 90B5     		push	{r4, r7, lr}
 3900              	.LCFI81:
 3901              		.cfi_def_cfa_offset 12
 3902              		.cfi_offset 4, -12
 3903              		.cfi_offset 7, -8
 3904              		.cfi_offset 14, -4
 3905 0002 85B0     		sub	sp, sp, #20
 3906              	.LCFI82:
 3907              		.cfi_def_cfa_offset 32
 3908 0004 00AF     		add	r7, sp, #0
 3909              	.LCFI83:
 3910              		.cfi_def_cfa_register 7
 3911 0006 7860     		str	r0, [r7, #4]
 3912 0008 0A1C     		mov	r2, r1
 3913 000a FB1C     		add	r3, r7, #3
 3914 000c 1A70     		strb	r2, [r3]
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3915              		.loc 1 1523 0
 3916 000e 0123     		mov	r3, #1
 3917 0010 FB60     		str	r3, [r7, #12]
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3918              		.loc 1 1525 0
 3919 0012 7B68     		ldr	r3, [r7, #4]
 3920 0014 DB6B     		ldr	r3, [r3, #60]
 3921 0016 1B78     		ldrb	r3, [r3]
 3922 0018 002B     		cmp	r3, #0
 3923 001a 02D1     		bne	.L167
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3924              		.loc 1 1527 0
 3925 001c 0123     		mov	r3, #1
 3926 001e FB60     		str	r3, [r7, #12]
 3927 0020 25E0     		b	.L168
 3928              	.L167:
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3929              		.loc 1 1532 0
 3930 0022 7A68     		ldr	r2, [r7, #4]
 3931 0024 2023     		mov	r3, #32
 3932 0026 D35C     		ldrb	r3, [r2, r3]
 3933 0028 012B     		cmp	r3, #1
 3934 002a 0FD1     		bne	.L169
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3935              		.loc 1 1534 0
 3936 002c 7B68     		ldr	r3, [r7, #4]
 3937 002e DA69     		ldr	r2, [r3, #28]
 3938 0030 7B68     		ldr	r3, [r7, #4]
 3939 0032 D969     		ldr	r1, [r3, #28]
 3940 0034 B023     		mov	r3, #176
 3941 0036 C958     		ldr	r1, [r1, r3]
 3942 0038 FB1C     		add	r3, r7, #3
 3943 003a 1B78     		ldrb	r3, [r3]
 3944 003c 0120     		mov	r0, #1
 3945 003e 041C     		mov	r4, r0
 3946 0040 9C40     		lsl	r4, r4, r3
 3947 0042 231C     		mov	r3, r4
 3948 0044 1943     		orr	r1, r3
 3949 0046 B023     		mov	r3, #176
 3950 0048 D150     		str	r1, [r2, r3]
 3951 004a 0EE0     		b	.L170
 3952              	.L169:
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3953              		.loc 1 1538 0
 3954 004c 7B68     		ldr	r3, [r7, #4]
 3955 004e 9A69     		ldr	r2, [r3, #24]
 3956 0050 7B68     		ldr	r3, [r7, #4]
 3957 0052 9969     		ldr	r1, [r3, #24]
 3958 0054 B023     		mov	r3, #176
 3959 0056 C958     		ldr	r1, [r1, r3]
 3960 0058 FB1C     		add	r3, r7, #3
 3961 005a 1B78     		ldrb	r3, [r3]
 3962 005c 0120     		mov	r0, #1
 3963 005e 041C     		mov	r4, r0
 3964 0060 9C40     		lsl	r4, r4, r3
 3965 0062 231C     		mov	r3, r4
 3966 0064 1943     		orr	r1, r3
 3967 0066 B023     		mov	r3, #176
 3968 0068 D150     		str	r1, [r2, r3]
 3969              	.L170:
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3970              		.loc 1 1540 0
 3971 006a 0023     		mov	r3, #0
 3972 006c FB60     		str	r3, [r7, #12]
 3973              	.L168:
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3974              		.loc 1 1542 0
 3975 006e FB68     		ldr	r3, [r7, #12]
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3976              		.loc 1 1543 0
 3977 0070 181C     		mov	r0, r3
 3978 0072 BD46     		mov	sp, r7
 3979 0074 05B0     		add	sp, sp, #20
 3980              		@ sp needed for prologue
 3981 0076 90BD     		pop	{r4, r7, pc}
 3982              		.cfi_endproc
 3983              	.LFE65:
 3985              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3986              		.align	2
 3987              		.global	PWMSP001_SetPendingEvent
 3988              		.code	16
 3989              		.thumb_func
 3991              	PWMSP001_SetPendingEvent:
 3992              	.LFB66:
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3993              		.loc 1 1554 0
 3994              		.cfi_startproc
 3995 0000 90B5     		push	{r4, r7, lr}
 3996              	.LCFI84:
 3997              		.cfi_def_cfa_offset 12
 3998              		.cfi_offset 4, -12
 3999              		.cfi_offset 7, -8
 4000              		.cfi_offset 14, -4
 4001 0002 85B0     		sub	sp, sp, #20
 4002              	.LCFI85:
 4003              		.cfi_def_cfa_offset 32
 4004 0004 00AF     		add	r7, sp, #0
 4005              	.LCFI86:
 4006              		.cfi_def_cfa_register 7
 4007 0006 7860     		str	r0, [r7, #4]
 4008 0008 0A1C     		mov	r2, r1
 4009 000a FB1C     		add	r3, r7, #3
 4010 000c 1A70     		strb	r2, [r3]
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4011              		.loc 1 1555 0
 4012 000e 0123     		mov	r3, #1
 4013 0010 FB60     		str	r3, [r7, #12]
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 4014              		.loc 1 1557 0
 4015 0012 7B68     		ldr	r3, [r7, #4]
 4016 0014 DB6B     		ldr	r3, [r3, #60]
 4017 0016 1B78     		ldrb	r3, [r3]
 4018 0018 002B     		cmp	r3, #0
 4019 001a 02D1     		bne	.L173
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4020              		.loc 1 1559 0
 4021 001c 0123     		mov	r3, #1
 4022 001e FB60     		str	r3, [r7, #12]
 4023 0020 25E0     		b	.L174
 4024              	.L173:
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 4025              		.loc 1 1564 0
 4026 0022 7A68     		ldr	r2, [r7, #4]
 4027 0024 2023     		mov	r3, #32
 4028 0026 D35C     		ldrb	r3, [r2, r3]
 4029 0028 012B     		cmp	r3, #1
 4030 002a 0FD1     		bne	.L175
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 4031              		.loc 1 1566 0
 4032 002c 7B68     		ldr	r3, [r7, #4]
 4033 002e DA69     		ldr	r2, [r3, #28]
 4034 0030 7B68     		ldr	r3, [r7, #4]
 4035 0032 D969     		ldr	r1, [r3, #28]
 4036 0034 AC23     		mov	r3, #172
 4037 0036 C958     		ldr	r1, [r1, r3]
 4038 0038 FB1C     		add	r3, r7, #3
 4039 003a 1B78     		ldrb	r3, [r3]
 4040 003c 0120     		mov	r0, #1
 4041 003e 041C     		mov	r4, r0
 4042 0040 9C40     		lsl	r4, r4, r3
 4043 0042 231C     		mov	r3, r4
 4044 0044 1943     		orr	r1, r3
 4045 0046 AC23     		mov	r3, #172
 4046 0048 D150     		str	r1, [r2, r3]
 4047 004a 0EE0     		b	.L176
 4048              	.L175:
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 4049              		.loc 1 1570 0
 4050 004c 7B68     		ldr	r3, [r7, #4]
 4051 004e 9A69     		ldr	r2, [r3, #24]
 4052 0050 7B68     		ldr	r3, [r7, #4]
 4053 0052 9969     		ldr	r1, [r3, #24]
 4054 0054 AC23     		mov	r3, #172
 4055 0056 C958     		ldr	r1, [r1, r3]
 4056 0058 FB1C     		add	r3, r7, #3
 4057 005a 1B78     		ldrb	r3, [r3]
 4058 005c 0120     		mov	r0, #1
 4059 005e 041C     		mov	r4, r0
 4060 0060 9C40     		lsl	r4, r4, r3
 4061 0062 231C     		mov	r3, r4
 4062 0064 1943     		orr	r1, r3
 4063 0066 AC23     		mov	r3, #172
 4064 0068 D150     		str	r1, [r2, r3]
 4065              	.L176:
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4066              		.loc 1 1572 0
 4067 006a 0023     		mov	r3, #0
 4068 006c FB60     		str	r3, [r7, #12]
 4069              	.L174:
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4070              		.loc 1 1574 0
 4071 006e FB68     		ldr	r3, [r7, #12]
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4072              		.loc 1 1575 0
 4073 0070 181C     		mov	r0, r3
 4074 0072 BD46     		mov	sp, r7
 4075 0074 05B0     		add	sp, sp, #20
 4076              		@ sp needed for prologue
 4077 0076 90BD     		pop	{r4, r7, pc}
 4078              		.cfi_endproc
 4079              	.LFE66:
 4081              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 4082              		.align	2
 4083              		.global	PWMSP001_GetPendingEvent
 4084              		.code	16
 4085              		.thumb_func
 4087              	PWMSP001_GetPendingEvent:
 4088              	.LFB67:
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 4089              		.loc 1 1586 0
 4090              		.cfi_startproc
 4091 0000 80B5     		push	{r7, lr}
 4092              	.LCFI87:
 4093              		.cfi_def_cfa_offset 8
 4094              		.cfi_offset 7, -8
 4095              		.cfi_offset 14, -4
 4096 0002 86B0     		sub	sp, sp, #24
 4097              	.LCFI88:
 4098              		.cfi_def_cfa_offset 32
 4099 0004 00AF     		add	r7, sp, #0
 4100              	.LCFI89:
 4101              		.cfi_def_cfa_register 7
 4102 0006 F860     		str	r0, [r7, #12]
 4103 0008 7A60     		str	r2, [r7, #4]
 4104 000a 3B1C     		mov	r3, r7
 4105 000c 0B33     		add	r3, r3, #11
 4106 000e 0A1C     		add	r2, r1, #0
 4107 0010 1A70     		strb	r2, [r3]
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4108              		.loc 1 1587 0
 4109 0012 0123     		mov	r3, #1
 4110 0014 7B61     		str	r3, [r7, #20]
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 4111              		.loc 1 1589 0
 4112 0016 FB68     		ldr	r3, [r7, #12]
 4113 0018 DB6B     		ldr	r3, [r3, #60]
 4114 001a 1B78     		ldrb	r3, [r3]
 4115 001c 002B     		cmp	r3, #0
 4116 001e 02D1     		bne	.L179
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4117              		.loc 1 1591 0
 4118 0020 0123     		mov	r3, #1
 4119 0022 7B61     		str	r3, [r7, #20]
 4120 0024 3DE0     		b	.L180
 4121              	.L179:
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 4122              		.loc 1 1596 0
 4123 0026 FA68     		ldr	r2, [r7, #12]
 4124 0028 2023     		mov	r3, #32
 4125 002a D35C     		ldrb	r3, [r2, r3]
 4126 002c 012B     		cmp	r3, #1
 4127 002e 1BD1     		bne	.L181
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 4128              		.loc 1 1599 0
 4129 0030 FB68     		ldr	r3, [r7, #12]
 4130 0032 DA69     		ldr	r2, [r3, #28]
 4131 0034 A023     		mov	r3, #160
 4132 0036 D358     		ldr	r3, [r2, r3]
 4133 0038 3A1C     		mov	r2, r7
 4134 003a 0B32     		add	r2, r2, #11
 4135 003c 1278     		ldrb	r2, [r2]
 4136 003e 0121     		mov	r1, #1
 4137 0040 081C     		mov	r0, r1
 4138 0042 9040     		lsl	r0, r0, r2
 4139 0044 021C     		mov	r2, r0
 4140 0046 1A40     		and	r2, r3
 4141 0048 3B1C     		mov	r3, r7
 4142 004a 0B33     		add	r3, r3, #11
 4143 004c 1B78     		ldrb	r3, [r3]
 4144 004e 111C     		mov	r1, r2
 4145 0050 D940     		lsr	r1, r1, r3
 4146 0052 0B1C     		mov	r3, r1
 4147 0054 002B     		cmp	r3, #0
 4148 0056 03D0     		beq	.L182
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 4149              		.loc 1 1601 0
 4150 0058 7B68     		ldr	r3, [r7, #4]
 4151 005a 0122     		mov	r2, #1
 4152 005c 1A70     		strb	r2, [r3]
 4153 005e 1EE0     		b	.L183
 4154              	.L182:
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 4155              		.loc 1 1605 0
 4156 0060 7B68     		ldr	r3, [r7, #4]
 4157 0062 0022     		mov	r2, #0
 4158 0064 1A70     		strb	r2, [r3]
 4159 0066 1AE0     		b	.L183
 4160              	.L181:
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 4161              		.loc 1 1610 0
 4162 0068 FB68     		ldr	r3, [r7, #12]
 4163 006a 9A69     		ldr	r2, [r3, #24]
 4164 006c A023     		mov	r3, #160
 4165 006e D358     		ldr	r3, [r2, r3]
 4166 0070 3A1C     		mov	r2, r7
 4167 0072 0B32     		add	r2, r2, #11
 4168 0074 1278     		ldrb	r2, [r2]
 4169 0076 0121     		mov	r1, #1
 4170 0078 081C     		mov	r0, r1
 4171 007a 9040     		lsl	r0, r0, r2
 4172 007c 021C     		mov	r2, r0
 4173 007e 1A40     		and	r2, r3
 4174 0080 3B1C     		mov	r3, r7
 4175 0082 0B33     		add	r3, r3, #11
 4176 0084 1B78     		ldrb	r3, [r3]
 4177 0086 111C     		mov	r1, r2
 4178 0088 D940     		lsr	r1, r1, r3
 4179 008a 0B1C     		mov	r3, r1
 4180 008c 002B     		cmp	r3, #0
 4181 008e 03D0     		beq	.L184
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 4182              		.loc 1 1612 0
 4183 0090 7B68     		ldr	r3, [r7, #4]
 4184 0092 0122     		mov	r2, #1
 4185 0094 1A70     		strb	r2, [r3]
 4186 0096 02E0     		b	.L183
 4187              	.L184:
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 4188              		.loc 1 1616 0
 4189 0098 7B68     		ldr	r3, [r7, #4]
 4190 009a 0022     		mov	r2, #0
 4191 009c 1A70     		strb	r2, [r3]
 4192              	.L183:
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4193              		.loc 1 1621 0
 4194 009e 0023     		mov	r3, #0
 4195 00a0 7B61     		str	r3, [r7, #20]
 4196              	.L180:
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4197              		.loc 1 1623 0
 4198 00a2 7B69     		ldr	r3, [r7, #20]
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4199              		.loc 1 1624 0
 4200 00a4 181C     		mov	r0, r3
 4201 00a6 BD46     		mov	sp, r7
 4202 00a8 06B0     		add	sp, sp, #24
 4203              		@ sp needed for prologue
 4204 00aa 80BD     		pop	{r7, pc}
 4205              		.cfi_endproc
 4206              	.LFE67:
 4208              		.text
 4209              	.Letext0:
 4210              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 4211              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 4212              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\boschSpeedUp\\Dave\\Generated\\inc\\DAVESupport/../../inc/
 4213              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\boschSpeedUp\\Dave\\Generated\\inc\\DAVESupport/../../inc/
 4214              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\boschSpeedUp\\Dave\\Generated\\inc\\DAVESupport/../../inc/
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:18     .text.PWMSP001_Init:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:23     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:98     .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:796    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:86     .text.PWMSP001_Init:00000050 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:93     .text.PWMSP001_lInit:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3334   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:550    .text.PWMSP001_lInit:000002d4 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:561    .text.PWMSP001_Deinit:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:566    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:786    .text.PWMSP001_Deinit:00000148 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:791    .text.PWMSP001_Start:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1045   .text.PWMSP001_Start:00000170 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1051   .text.PWMSP001_Stop:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1056   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1168   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1173   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1275   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1280   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1341   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1346   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1449   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1454   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1512   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1517   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1586   .text.PWMSP001_SetDutyCycle:00000058 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1596   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1601   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1690   .text.PWMSP001_lSetDutyEdgeAlign:00000088 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1695   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1700   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1854   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:000000f4 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1859   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1864   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1952   .text.PWMSP001_lSetDutyCenterAlign:00000084 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1957   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:1962   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2080   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2085   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2227   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2232   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2604   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2399   .text.PWMSP001_SetPwmFreqAndDutyCycle:000000fc $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2406   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2411   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2593   .text.PWMSP001_SetPwmFreq:00000110 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2599   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2730   .text.PWMSP001_lSetPwmFreqTimerConcat:000000a8 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2736   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2741   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2811   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2816   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2895   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:2900   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3040   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3045   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3127   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3132   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3232   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3237   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3329   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3686   .text.PWMSP001_lConfigureSecondSlice:00000234 $d
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3696   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3701   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3792   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3797   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3890   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3895   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3986   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:3991   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:4082   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccns2sS9.s:4087   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.63d3e0297d6e9004e0e37a0840833abd
                           .group:00000000 wm4.XMC1100.h.45.7a7cd799d7738130fcda8b83b0aa37d4
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1100.h.114.be3711f71ee045884346be801053f4c0
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.47f40be5760de9fc3332688f9e95febc
                           .group:00000000 wm4.CCU4Global_Conf.h.63.a52fac0daa39b5f58343578312b4eb54
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.NVIC002_Conf.h.62.18166a449b9ed77d0131aa9be7c23c90

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
__aeabi_uidivmod
__aeabi_uidiv
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fsub
__aeabi_fdiv
__aeabi_ui2f
__aeabi_fmul
__aeabi_f2uiz
__aeabi_fcmpeq
