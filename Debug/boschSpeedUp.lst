
boschSpeedUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e20  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10003e20  10003e20  00003e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       000000d8  10003e30  10003e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  10003f10  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          0000001c  20000920  20000920  00010920  2**2
                  ALLOC
  7 .data         00000008  20000940  10004020  00008940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000398  00000000  00000000  00008948  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004173  00000000  00000000  00008ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c2b  00000000  00000000  0000ce53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004fab  00000000  00000000  0000da7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b84  00000000  00000000  00012a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00025fa8  00000000  00000000  000135b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ee0  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002d0  00000000  00000000  0003a438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000048f  00000000  00000000  0003a708  2**0
                  CONTENTS, READONLY
 17 .debug_macro  00007ccf  00000000  00000000  0003ab97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 d5 10 00 10 d7 10 00 10      .. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	10004020 	.word	0x10004020
   LDR R1, =__Xmc1100_sData
10001094:	20000940 	.word	0x20000940
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000008 	.word	0x00000008
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10004028 	.word	0x10004028
   LDR R1, =__ram_code_start
100010a0:	20000948 	.word	0x20000948
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	10003f10 	.word	0x10003f10
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	0000001c 	.word	0x0000001c
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	10001105 	.word	0x10001105
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	10001205 	.word	0x10001205

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100010d4:	e7fe      	b.n	100010d4 <NMI_Handler>

100010d6 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100010d6:	e7fe      	b.n	100010d6 <HardFault_Handler>

100010d8 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100010d8:	e7fe      	b.n	100010d8 <SVC_Handler>

100010da <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100010da:	e7fe      	b.n	100010da <PendSV_Handler>

100010dc <SysTick_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
100010dc:	e7fe      	b.n	100010dc <SysTick_Handler>

100010de <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
100010de:	e7fe      	b.n	100010de <SCU_0_IRQHandler>

100010e0 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100010e0:	e7fe      	b.n	100010e0 <SCU_1_IRQHandler>

100010e2 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100010e2:	e7fe      	b.n	100010e2 <SCU_2_IRQHandler>

100010e4 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100010e4:	e7fe      	b.n	100010e4 <ERU0_0_IRQHandler>

100010e6 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100010e6:	e7fe      	b.n	100010e6 <ERU0_1_IRQHandler>

100010e8 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100010e8:	e7fe      	b.n	100010e8 <ERU0_2_IRQHandler>

100010ea <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100010ea:	e7fe      	b.n	100010ea <ERU0_3_IRQHandler>

100010ec <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100010ec:	e7fe      	b.n	100010ec <VADC0_C0_0_IRQHandler>

100010ee <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100010ee:	e7fe      	b.n	100010ee <VADC0_C0_1_IRQHandler>

100010f0 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100010f0:	e7fe      	b.n	100010f0 <CCU40_0_IRQHandler>

100010f2 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100010f2:	e7fe      	b.n	100010f2 <CCU40_1_IRQHandler>

100010f4 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100010f4:	e7fe      	b.n	100010f4 <CCU40_2_IRQHandler>
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
100010f6:	e7fe      	b.n	100010f6 <CCU40_2_IRQHandler+0x2>

100010f8 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100010f8:	e7fe      	b.n	100010f8 <USIC0_0_IRQHandler>

100010fa <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100010fa:	e7fe      	b.n	100010fa <USIC0_1_IRQHandler>

100010fc <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100010fc:	e7fe      	b.n	100010fc <USIC0_2_IRQHandler>

100010fe <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100010fe:	e7fe      	b.n	100010fe <USIC0_3_IRQHandler>

10001100 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
10001100:	e7fe      	b.n	10001100 <USIC0_4_IRQHandler>

10001102 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
10001102:	e7fe      	b.n	10001102 <USIC0_5_IRQHandler>

10001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
10001104:	b580      	push	{r7, lr}
10001106:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
10001108:	f000 f802 	bl	10001110 <SystemCoreClockUpdate>
}
1000110c:	46bd      	mov	sp, r7
1000110e:	bd80      	pop	{r7, pc}

10001110 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001110:	b580      	push	{r7, lr}
10001112:	b082      	sub	sp, #8
10001114:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001116:	4b11      	ldr	r3, [pc, #68]	; (1000115c <SystemCoreClockUpdate+0x4c>)
10001118:	681a      	ldr	r2, [r3, #0]
1000111a:	23ff      	movs	r3, #255	; 0xff
1000111c:	021b      	lsls	r3, r3, #8
1000111e:	4013      	ands	r3, r2
10001120:	0a1b      	lsrs	r3, r3, #8
10001122:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001124:	4b0d      	ldr	r3, [pc, #52]	; (1000115c <SystemCoreClockUpdate+0x4c>)
10001126:	681a      	ldr	r2, [r3, #0]
10001128:	23ff      	movs	r3, #255	; 0xff
1000112a:	4013      	ands	r3, r2
1000112c:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
1000112e:	687b      	ldr	r3, [r7, #4]
10001130:	2b00      	cmp	r3, #0
10001132:	d00c      	beq.n	1000114e <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
10001134:	687b      	ldr	r3, [r7, #4]
10001136:	021a      	lsls	r2, r3, #8
10001138:	683b      	ldr	r3, [r7, #0]
1000113a:	18d3      	adds	r3, r2, r3
1000113c:	4808      	ldr	r0, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0x50>)
1000113e:	1c19      	adds	r1, r3, #0
10001140:	f001 ffde 	bl	10003100 <__aeabi_uidiv>
10001144:	1c03      	adds	r3, r0, #0
10001146:	005a      	lsls	r2, r3, #1
10001148:	4b06      	ldr	r3, [pc, #24]	; (10001164 <SystemCoreClockUpdate+0x54>)
1000114a:	601a      	str	r2, [r3, #0]
1000114c:	e002      	b.n	10001154 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
1000114e:	4b05      	ldr	r3, [pc, #20]	; (10001164 <SystemCoreClockUpdate+0x54>)
10001150:	4a05      	ldr	r2, [pc, #20]	; (10001168 <SystemCoreClockUpdate+0x58>)
10001152:	601a      	str	r2, [r3, #0]
  }
}
10001154:	46bd      	mov	sp, r7
10001156:	b002      	add	sp, #8
10001158:	bd80      	pop	{r7, pc}
1000115a:	46c0      	nop			; (mov r8, r8)
1000115c:	40010300 	.word	0x40010300
10001160:	f4240000 	.word	0xf4240000
10001164:	20000938 	.word	0x20000938
10001168:	01e84800 	.word	0x01e84800

1000116c <P0_5_set_large_hysteresis>:

__STATIC_INLINE void P0_5_set_standard_hysteresis(){
    PORT0->PHCR0 &= ~0x00400000UL;
}

__STATIC_INLINE void P0_5_set_large_hysteresis(){
1000116c:	b580      	push	{r7, lr}
1000116e:	af00      	add	r7, sp, #0
    PORT0->PHCR0 |= 0x00400000UL;
10001170:	4b04      	ldr	r3, [pc, #16]	; (10001184 <P0_5_set_large_hysteresis+0x18>)
10001172:	4a04      	ldr	r2, [pc, #16]	; (10001184 <P0_5_set_large_hysteresis+0x18>)
10001174:	6c12      	ldr	r2, [r2, #64]	; 0x40
10001176:	2180      	movs	r1, #128	; 0x80
10001178:	03c9      	lsls	r1, r1, #15
1000117a:	430a      	orrs	r2, r1
1000117c:	641a      	str	r2, [r3, #64]	; 0x40
}
1000117e:	46bd      	mov	sp, r7
10001180:	bd80      	pop	{r7, pc}
10001182:	46c0      	nop			; (mov r8, r8)
10001184:	40040000 	.word	0x40040000

10001188 <P0_5_read>:

__STATIC_INLINE void P0_5_toggle(void){
    PORT0->OMR = 0x00200020UL;
}

__STATIC_INLINE uint32_t P0_5_read(void){
10001188:	b580      	push	{r7, lr}
1000118a:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000020UL);
1000118c:	4b03      	ldr	r3, [pc, #12]	; (1000119c <P0_5_read+0x14>)
1000118e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10001190:	2320      	movs	r3, #32
10001192:	4013      	ands	r3, r2
}
10001194:	1c18      	adds	r0, r3, #0
10001196:	46bd      	mov	sp, r7
10001198:	bd80      	pop	{r7, pc}
1000119a:	46c0      	nop			; (mov r8, r8)
1000119c:	40040000 	.word	0x40040000

100011a0 <P0_6_set_mode>:

__STATIC_INLINE void P0_5_disable_pps(void){
    PORT0->PPS &= ~0x00000020UL;
}

__STATIC_INLINE void P0_6_set_mode(uint8_t mode){
100011a0:	b580      	push	{r7, lr}
100011a2:	b082      	sub	sp, #8
100011a4:	af00      	add	r7, sp, #0
100011a6:	1c02      	adds	r2, r0, #0
100011a8:	1dfb      	adds	r3, r7, #7
100011aa:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x00f80000UL;
100011ac:	4b08      	ldr	r3, [pc, #32]	; (100011d0 <P0_6_set_mode+0x30>)
100011ae:	4a08      	ldr	r2, [pc, #32]	; (100011d0 <P0_6_set_mode+0x30>)
100011b0:	6951      	ldr	r1, [r2, #20]
100011b2:	4a08      	ldr	r2, [pc, #32]	; (100011d4 <P0_6_set_mode+0x34>)
100011b4:	400a      	ands	r2, r1
100011b6:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 16;
100011b8:	4b05      	ldr	r3, [pc, #20]	; (100011d0 <P0_6_set_mode+0x30>)
100011ba:	4a05      	ldr	r2, [pc, #20]	; (100011d0 <P0_6_set_mode+0x30>)
100011bc:	6951      	ldr	r1, [r2, #20]
100011be:	1dfa      	adds	r2, r7, #7
100011c0:	7812      	ldrb	r2, [r2, #0]
100011c2:	0412      	lsls	r2, r2, #16
100011c4:	430a      	orrs	r2, r1
100011c6:	615a      	str	r2, [r3, #20]
}
100011c8:	46bd      	mov	sp, r7
100011ca:	b002      	add	sp, #8
100011cc:	bd80      	pop	{r7, pc}
100011ce:	46c0      	nop			; (mov r8, r8)
100011d0:	40040000 	.word	0x40040000
100011d4:	ff07ffff 	.word	0xff07ffff

100011d8 <P0_6_set>:

__STATIC_INLINE void P0_6_set_large_hysteresis(){
    PORT0->PHCR0 |= 0x04000000UL;
}

__STATIC_INLINE void P0_6_set(void){
100011d8:	b580      	push	{r7, lr}
100011da:	af00      	add	r7, sp, #0
    PORT0->OMR = 0x00000040UL;
100011dc:	4b02      	ldr	r3, [pc, #8]	; (100011e8 <P0_6_set+0x10>)
100011de:	2240      	movs	r2, #64	; 0x40
100011e0:	605a      	str	r2, [r3, #4]
}
100011e2:	46bd      	mov	sp, r7
100011e4:	bd80      	pop	{r7, pc}
100011e6:	46c0      	nop			; (mov r8, r8)
100011e8:	40040000 	.word	0x40040000

100011ec <P0_6_toggle>:

__STATIC_INLINE void P0_6_reset(void){
    PORT0->OMR = 0x00400000UL;
}

__STATIC_INLINE void P0_6_toggle(void){
100011ec:	b580      	push	{r7, lr}
100011ee:	af00      	add	r7, sp, #0
    PORT0->OMR = 0x00400040UL;
100011f0:	4b02      	ldr	r3, [pc, #8]	; (100011fc <P0_6_toggle+0x10>)
100011f2:	4a03      	ldr	r2, [pc, #12]	; (10001200 <P0_6_toggle+0x14>)
100011f4:	605a      	str	r2, [r3, #4]
}
100011f6:	46bd      	mov	sp, r7
100011f8:	bd80      	pop	{r7, pc}
100011fa:	46c0      	nop			; (mov r8, r8)
100011fc:	40040000 	.word	0x40040000
10001200:	00400040 	.word	0x00400040

10001204 <main>:
	//P0_5_set_mode(INPUT);



int main(void)
{
10001204:	b580      	push	{r7, lr}
10001206:	b08a      	sub	sp, #40	; 0x28
10001208:	af00      	add	r7, sp, #0
	status_t status;		// Declaration of return variable for DAVE3 APIs


	DAVE_Init();			// Initialization of DAVE Apps
1000120a:	f001 fdd1 	bl	10002db0 <DAVE_Init>

	
	/* Starts the PWMSP001 App (LED) */
	status = PWMSP001_Start((PWMSP001_HandleType*)&PWMSP001_Handle0);
1000120e:	4b46      	ldr	r3, [pc, #280]	; (10001328 <main+0x124>)
10001210:	1c18      	adds	r0, r3, #0
10001212:	f000 fbfb 	bl	10001a0c <PWMSP001_Start>
10001216:	1c03      	adds	r3, r0, #0
10001218:	607b      	str	r3, [r7, #4]
	if(status != DAVEApp_SUCCESS)
1000121a:	687b      	ldr	r3, [r7, #4]
1000121c:	2b00      	cmp	r3, #0
1000121e:	d003      	beq.n	10001228 <main+0x24>
	{
		PWMSP001_Stop((PWMSP001_HandleType*)&PWMSP001_Handle0);
10001220:	4b41      	ldr	r3, [pc, #260]	; (10001328 <main+0x124>)
10001222:	1c18      	adds	r0, r3, #0
10001224:	f000 fcae 	bl	10001b84 <PWMSP001_Stop>
	}

	PIN_LOW_INIT();
10001228:	20c0      	movs	r0, #192	; 0xc0
1000122a:	f7ff ffb9 	bl	100011a0 <P0_6_set_mode>
1000122e:	f7ff ffd3 	bl	100011d8 <P0_6_set>
	PIN_IS_INIT();
10001232:	f7ff ff9b 	bl	1000116c <P0_5_set_large_hysteresis>
10001236:	f7ff ffa7 	bl	10001188 <P0_5_read>



	bool lastPinState = PIN_IS_HIGH();
1000123a:	f7ff ffa5 	bl	10001188 <P0_5_read>
1000123e:	1c02      	adds	r2, r0, #0
10001240:	1c3b      	adds	r3, r7, #0
10001242:	3327      	adds	r3, #39	; 0x27
10001244:	701a      	strb	r2, [r3, #0]
	bool trigger = FALSE;
10001246:	1c3b      	adds	r3, r7, #0
10001248:	3326      	adds	r3, #38	; 0x26
1000124a:	2200      	movs	r2, #0
1000124c:	701a      	strb	r2, [r3, #0]
	int noTriggerCnt=0;
1000124e:	2300      	movs	r3, #0
10001250:	623b      	str	r3, [r7, #32]
	int speed=0;
10001252:	2300      	movs	r3, #0
10001254:	61fb      	str	r3, [r7, #28]
	int speedLow=0;
10001256:	2300      	movs	r3, #0
10001258:	61bb      	str	r3, [r7, #24]
	int speedLowHigh=0;
1000125a:	2300      	movs	r3, #0
1000125c:	617b      	str	r3, [r7, #20]
1000125e:	e000      	b.n	10001262 <main+0x5e>
			}
		}
				
		

	}
10001260:	46c0      	nop			; (mov r8, r8)
	int speedLowHigh=0;


	while(1)
	{
		speed++;
10001262:	69fb      	ldr	r3, [r7, #28]
10001264:	3301      	adds	r3, #1
10001266:	61fb      	str	r3, [r7, #28]
		speedLow++;
10001268:	69bb      	ldr	r3, [r7, #24]
1000126a:	3301      	adds	r3, #1
1000126c:	61bb      	str	r3, [r7, #24]
		
		int cnt_high=0;
1000126e:	2300      	movs	r3, #0
10001270:	613b      	str	r3, [r7, #16]
		int cnt_low=0;
10001272:	2300      	movs	r3, #0
10001274:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 0x1FF; i++)
10001276:	2300      	movs	r3, #0
10001278:	60bb      	str	r3, [r7, #8]
1000127a:	e00e      	b.n	1000129a <main+0x96>
		{
			if (PIN_IS_HIGH())
1000127c:	f7ff ff84 	bl	10001188 <P0_5_read>
10001280:	1c03      	adds	r3, r0, #0
10001282:	2b00      	cmp	r3, #0
10001284:	d003      	beq.n	1000128e <main+0x8a>
				cnt_high++;
10001286:	693b      	ldr	r3, [r7, #16]
10001288:	3301      	adds	r3, #1
1000128a:	613b      	str	r3, [r7, #16]
1000128c:	e002      	b.n	10001294 <main+0x90>
			else
				cnt_low++;
1000128e:	68fb      	ldr	r3, [r7, #12]
10001290:	3301      	adds	r3, #1
10001292:	60fb      	str	r3, [r7, #12]
		speed++;
		speedLow++;
		
		int cnt_high=0;
		int cnt_low=0;
		for (int i = 0; i < 0x1FF; i++)
10001294:	68bb      	ldr	r3, [r7, #8]
10001296:	3301      	adds	r3, #1
10001298:	60bb      	str	r3, [r7, #8]
1000129a:	68ba      	ldr	r2, [r7, #8]
1000129c:	23ff      	movs	r3, #255	; 0xff
1000129e:	005b      	lsls	r3, r3, #1
100012a0:	429a      	cmp	r2, r3
100012a2:	ddeb      	ble.n	1000127c <main+0x78>
			else
				cnt_low++;
		}
		
		
		if (cnt_low > 0)
100012a4:	68fb      	ldr	r3, [r7, #12]
100012a6:	2b00      	cmp	r3, #0
100012a8:	dd17      	ble.n	100012da <main+0xd6>
		{
			if (lastPinState)
100012aa:	1c3b      	adds	r3, r7, #0
100012ac:	3327      	adds	r3, #39	; 0x27
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	2b00      	cmp	r3, #0
100012b2:	d00d      	beq.n	100012d0 <main+0xcc>
			{
				trigger = TRUE;
100012b4:	1c3b      	adds	r3, r7, #0
100012b6:	3326      	adds	r3, #38	; 0x26
100012b8:	2201      	movs	r2, #1
100012ba:	701a      	strb	r2, [r3, #0]
				speedLowHigh = (speed<<3)/10; // *16/10/2
100012bc:	69fb      	ldr	r3, [r7, #28]
100012be:	00db      	lsls	r3, r3, #3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	210a      	movs	r1, #10
100012c4:	f001 ff6a 	bl	1000319c <__aeabi_idiv>
100012c8:	1c03      	adds	r3, r0, #0
100012ca:	617b      	str	r3, [r7, #20]
				speed=0;
100012cc:	2300      	movs	r3, #0
100012ce:	61fb      	str	r3, [r7, #28]
			}
			lastPinState = FALSE;
100012d0:	1c3b      	adds	r3, r7, #0
100012d2:	3327      	adds	r3, #39	; 0x27
100012d4:	2200      	movs	r2, #0
100012d6:	701a      	strb	r2, [r3, #0]
100012d8:	e006      	b.n	100012e8 <main+0xe4>
		}
		else if (cnt_high > 0)
100012da:	693b      	ldr	r3, [r7, #16]
100012dc:	2b00      	cmp	r3, #0
100012de:	dd03      	ble.n	100012e8 <main+0xe4>
		{
			lastPinState = TRUE;
100012e0:	1c3b      	adds	r3, r7, #0
100012e2:	3327      	adds	r3, #39	; 0x27
100012e4:	2201      	movs	r2, #1
100012e6:	701a      	strb	r2, [r3, #0]
		}
		
		if (speedLow >= speedLowHigh)
100012e8:	69ba      	ldr	r2, [r7, #24]
100012ea:	697b      	ldr	r3, [r7, #20]
100012ec:	429a      	cmp	r2, r3
100012ee:	dbb7      	blt.n	10001260 <main+0x5c>
		{
			speedLow = 0;
100012f0:	2300      	movs	r3, #0
100012f2:	61bb      	str	r3, [r7, #24]
			
			if (!trigger)
100012f4:	1c3b      	adds	r3, r7, #0
100012f6:	3326      	adds	r3, #38	; 0x26
100012f8:	781b      	ldrb	r3, [r3, #0]
100012fa:	2b00      	cmp	r3, #0
100012fc:	d103      	bne.n	10001306 <main+0x102>
				noTriggerCnt++;
100012fe:	6a3b      	ldr	r3, [r7, #32]
10001300:	3301      	adds	r3, #1
10001302:	623b      	str	r3, [r7, #32]
10001304:	e001      	b.n	1000130a <main+0x106>
			else
				noTriggerCnt=0;
10001306:	2300      	movs	r3, #0
10001308:	623b      	str	r3, [r7, #32]
			trigger = FALSE;
1000130a:	1c3b      	adds	r3, r7, #0
1000130c:	3326      	adds	r3, #38	; 0x26
1000130e:	2200      	movs	r2, #0
10001310:	701a      	strb	r2, [r3, #0]
			
			if (noTriggerCnt > 1)
10001312:	6a3b      	ldr	r3, [r7, #32]
10001314:	2b01      	cmp	r3, #1
10001316:	dd04      	ble.n	10001322 <main+0x11e>
			{
				noTriggerCnt=1;
10001318:	2301      	movs	r3, #1
1000131a:	623b      	str	r3, [r7, #32]
				PIN_LOW_DEASSERT();
1000131c:	f7ff ff5c 	bl	100011d8 <P0_6_set>
			}
		}
				
		

	}
10001320:	e79e      	b.n	10001260 <main+0x5c>
				noTriggerCnt=1;
				PIN_LOW_DEASSERT();
			}
			else
			{
				PIN_LOW_TOGGLE();
10001322:	f7ff ff63 	bl	100011ec <P0_6_toggle>
			}
		}
				
		

	}
10001326:	e79b      	b.n	10001260 <main+0x5c>
10001328:	10003e30 	.word	0x10003e30

1000132c <CCU40_3_IRQHandler>:

/*
 * PWM_Period_Interrupt handler: executes every period match of PWMSP001/0.
 */
void PWM_Period_Interrupt(void)
{
1000132c:	b580      	push	{r7, lr}
1000132e:	b082      	sub	sp, #8
10001330:	af00      	add	r7, sp, #0
#define FFAST   10
#define FSLOW   5
#define PERIODE   (FFAST*4)
#define PERCHANGE (FFAST*2)
	static uint32_t state = 0;
	status_t status = DAVEApp_SUCCESS;
10001332:	2300      	movs	r3, #0
10001334:	607b      	str	r3, [r7, #4]

	/* state machine to change the different duty cycle */
	switch(state)
10001336:	4b1a      	ldr	r3, [pc, #104]	; (100013a0 <CCU40_3_IRQHandler+0x74>)
10001338:	681b      	ldr	r3, [r3, #0]
1000133a:	2b00      	cmp	r3, #0
1000133c:	d002      	beq.n	10001344 <CCU40_3_IRQHandler+0x18>
1000133e:	2b14      	cmp	r3, #20
10001340:	d00b      	beq.n	1000135a <CCU40_3_IRQHandler+0x2e>
10001342:	e015      	b.n	10001370 <CCU40_3_IRQHandler+0x44>
	{
		
		case 0: //status =  PWMSP001_SetCompare(&PWMSP001_Handle0, 0x4AFF); /* Updating of duty cycle to 10% */
		    // Change PWM frequency to 20 Hz and duty cycle of 50%
		    status = PWMSP001_SetPwmFreqAndDutyCycle((PWMSP001_HandleType*)&PWMSP001_Handle0, FFAST, 50);
10001344:	4917      	ldr	r1, [pc, #92]	; (100013a4 <CCU40_3_IRQHandler+0x78>)
10001346:	4a18      	ldr	r2, [pc, #96]	; (100013a8 <CCU40_3_IRQHandler+0x7c>)
10001348:	4b18      	ldr	r3, [pc, #96]	; (100013ac <CCU40_3_IRQHandler+0x80>)
1000134a:	1c08      	adds	r0, r1, #0
1000134c:	1c11      	adds	r1, r2, #0
1000134e:	1c1a      	adds	r2, r3, #0
10001350:	f000 ff18 	bl	10002184 <PWMSP001_SetPwmFreqAndDutyCycle>
10001354:	1c03      	adds	r3, r0, #0
10001356:	607b      	str	r3, [r7, #4]
		    break;
10001358:	e00b      	b.n	10001372 <CCU40_3_IRQHandler+0x46>
		
		case PERCHANGE: //status =  PWMSP001_SetCompare(&PWMSP001_Handle0, 0x0855); /* Updating of duty cycle to 90% */
		    // Change PWM frequency to 10 Hz and duty cycle of 50%
		    status = PWMSP001_SetPwmFreqAndDutyCycle((PWMSP001_HandleType*)&PWMSP001_Handle0, FSLOW, 50);
1000135a:	4912      	ldr	r1, [pc, #72]	; (100013a4 <CCU40_3_IRQHandler+0x78>)
1000135c:	4a14      	ldr	r2, [pc, #80]	; (100013b0 <CCU40_3_IRQHandler+0x84>)
1000135e:	4b13      	ldr	r3, [pc, #76]	; (100013ac <CCU40_3_IRQHandler+0x80>)
10001360:	1c08      	adds	r0, r1, #0
10001362:	1c11      	adds	r1, r2, #0
10001364:	1c1a      	adds	r2, r3, #0
10001366:	f000 ff0d 	bl	10002184 <PWMSP001_SetPwmFreqAndDutyCycle>
1000136a:	1c03      	adds	r3, r0, #0
1000136c:	607b      	str	r3, [r7, #4]
		    break;
1000136e:	e000      	b.n	10001372 <CCU40_3_IRQHandler+0x46>

		default:
			break;
10001370:	46c0      	nop			; (mov r8, r8)
	}

	/* Updation of the state machine */
	state++;
10001372:	4b0b      	ldr	r3, [pc, #44]	; (100013a0 <CCU40_3_IRQHandler+0x74>)
10001374:	681b      	ldr	r3, [r3, #0]
10001376:	1c5a      	adds	r2, r3, #1
10001378:	4b09      	ldr	r3, [pc, #36]	; (100013a0 <CCU40_3_IRQHandler+0x74>)
1000137a:	601a      	str	r2, [r3, #0]
	if(state>=PERIODE)
1000137c:	4b08      	ldr	r3, [pc, #32]	; (100013a0 <CCU40_3_IRQHandler+0x74>)
1000137e:	681b      	ldr	r3, [r3, #0]
10001380:	2b27      	cmp	r3, #39	; 0x27
10001382:	d902      	bls.n	1000138a <CCU40_3_IRQHandler+0x5e>
	{
		state= 0;
10001384:	4b06      	ldr	r3, [pc, #24]	; (100013a0 <CCU40_3_IRQHandler+0x74>)
10001386:	2200      	movs	r2, #0
10001388:	601a      	str	r2, [r3, #0]
	}

	if(status != DAVEApp_SUCCESS)
1000138a:	687b      	ldr	r3, [r7, #4]
1000138c:	2b00      	cmp	r3, #0
1000138e:	d003      	beq.n	10001398 <CCU40_3_IRQHandler+0x6c>
	{
		PWMSP001_Stop((PWMSP001_HandleType*)&PWMSP001_Handle0);
10001390:	4b04      	ldr	r3, [pc, #16]	; (100013a4 <CCU40_3_IRQHandler+0x78>)
10001392:	1c18      	adds	r0, r3, #0
10001394:	f000 fbf6 	bl	10001b84 <PWMSP001_Stop>
	}
}
10001398:	46bd      	mov	sp, r7
1000139a:	b002      	add	sp, #8
1000139c:	bd80      	pop	{r7, pc}
1000139e:	46c0      	nop			; (mov r8, r8)
100013a0:	20000920 	.word	0x20000920
100013a4:	10003e30 	.word	0x10003e30
100013a8:	41200000 	.word	0x41200000
100013ac:	42480000 	.word	0x42480000
100013b0:	40a00000 	.word	0x40a00000

100013b4 <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
100013b4:	b580      	push	{r7, lr}
100013b6:	b084      	sub	sp, #16
100013b8:	af00      	add	r7, sp, #0
100013ba:	60f8      	str	r0, [r7, #12]
100013bc:	60b9      	str	r1, [r7, #8]
100013be:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
100013c0:	2301      	movs	r3, #1
100013c2:	425b      	negs	r3, r3
}
100013c4:	1c18      	adds	r0, r3, #0
100013c6:	46bd      	mov	sp, r7
100013c8:	b004      	add	sp, #16
100013ca:	bd80      	pop	{r7, pc}

100013cc <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
100013cc:	b580      	push	{r7, lr}
100013ce:	b084      	sub	sp, #16
100013d0:	af00      	add	r7, sp, #0
100013d2:	60f8      	str	r0, [r7, #12]
100013d4:	60b9      	str	r1, [r7, #8]
100013d6:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
100013d8:	2301      	movs	r3, #1
100013da:	425b      	negs	r3, r3
}
100013dc:	1c18      	adds	r0, r3, #0
100013de:	46bd      	mov	sp, r7
100013e0:	b004      	add	sp, #16
100013e2:	bd80      	pop	{r7, pc}

100013e4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100013e4:	b580      	push	{r7, lr}
100013e6:	b084      	sub	sp, #16
100013e8:	af00      	add	r7, sp, #0
100013ea:	60f8      	str	r0, [r7, #12]
100013ec:	60b9      	str	r1, [r7, #8]
100013ee:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
100013f0:	2300      	movs	r3, #0
}
100013f2:	1c18      	adds	r0, r3, #0
100013f4:	46bd      	mov	sp, r7
100013f6:	b004      	add	sp, #16
100013f8:	bd80      	pop	{r7, pc}
100013fa:	46c0      	nop			; (mov r8, r8)

100013fc <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
100013fc:	b580      	push	{r7, lr}
100013fe:	b084      	sub	sp, #16
10001400:	af00      	add	r7, sp, #0
10001402:	60f8      	str	r0, [r7, #12]
10001404:	60b9      	str	r1, [r7, #8]
10001406:	607a      	str	r2, [r7, #4]
 return -1;
10001408:	2301      	movs	r3, #1
1000140a:	425b      	negs	r3, r3
}
1000140c:	1c18      	adds	r0, r3, #0
1000140e:	46bd      	mov	sp, r7
10001410:	b004      	add	sp, #16
10001412:	bd80      	pop	{r7, pc}

10001414 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
10001414:	b580      	push	{r7, lr}
10001416:	af00      	add	r7, sp, #0
 return -1;
10001418:	2301      	movs	r3, #1
1000141a:	425b      	negs	r3, r3
}
1000141c:	1c18      	adds	r0, r3, #0
1000141e:	46bd      	mov	sp, r7
10001420:	bd80      	pop	{r7, pc}
10001422:	46c0      	nop			; (mov r8, r8)

10001424 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
10001424:	b580      	push	{r7, lr}
10001426:	b082      	sub	sp, #8
10001428:	af00      	add	r7, sp, #0
1000142a:	6078      	str	r0, [r7, #4]
1000142c:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
1000142e:	683b      	ldr	r3, [r7, #0]
10001430:	2b00      	cmp	r3, #0
10001432:	d002      	beq.n	1000143a <_fstat+0x16>
  return -1;
10001434:	2301      	movs	r3, #1
10001436:	425b      	negs	r3, r3
10001438:	e001      	b.n	1000143e <_fstat+0x1a>
 else
  return -2;
1000143a:	2302      	movs	r3, #2
1000143c:	425b      	negs	r3, r3
}
1000143e:	1c18      	adds	r0, r3, #0
10001440:	46bd      	mov	sp, r7
10001442:	b002      	add	sp, #8
10001444:	bd80      	pop	{r7, pc}
10001446:	46c0      	nop			; (mov r8, r8)

10001448 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
10001448:	b580      	push	{r7, lr}
1000144a:	b082      	sub	sp, #8
1000144c:	af00      	add	r7, sp, #0
1000144e:	6078      	str	r0, [r7, #4]
10001450:	6039      	str	r1, [r7, #0]
 if (old == new)
10001452:	687a      	ldr	r2, [r7, #4]
10001454:	683b      	ldr	r3, [r7, #0]
10001456:	429a      	cmp	r2, r3
10001458:	d102      	bne.n	10001460 <_link+0x18>
  return -1;
1000145a:	2301      	movs	r3, #1
1000145c:	425b      	negs	r3, r3
1000145e:	e001      	b.n	10001464 <_link+0x1c>
 else
  return -2;
10001460:	2302      	movs	r3, #2
10001462:	425b      	negs	r3, r3
}
10001464:	1c18      	adds	r0, r3, #0
10001466:	46bd      	mov	sp, r7
10001468:	b002      	add	sp, #8
1000146a:	bd80      	pop	{r7, pc}

1000146c <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
1000146c:	b580      	push	{r7, lr}
1000146e:	b082      	sub	sp, #8
10001470:	af00      	add	r7, sp, #0
10001472:	6078      	str	r0, [r7, #4]
 return -1;
10001474:	2301      	movs	r3, #1
10001476:	425b      	negs	r3, r3
}
10001478:	1c18      	adds	r0, r3, #0
1000147a:	46bd      	mov	sp, r7
1000147c:	b002      	add	sp, #8
1000147e:	bd80      	pop	{r7, pc}

10001480 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10001480:	b580      	push	{r7, lr}
10001482:	b086      	sub	sp, #24
10001484:	af00      	add	r7, sp, #0
10001486:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10001488:	4b14      	ldr	r3, [pc, #80]	; (100014dc <_sbrk+0x5c>)
1000148a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
1000148c:	4b14      	ldr	r3, [pc, #80]	; (100014e0 <_sbrk+0x60>)
1000148e:	681b      	ldr	r3, [r3, #0]
10001490:	2b00      	cmp	r3, #0
10001492:	d108      	bne.n	100014a6 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
10001494:	4b12      	ldr	r3, [pc, #72]	; (100014e0 <_sbrk+0x60>)
10001496:	4a13      	ldr	r2, [pc, #76]	; (100014e4 <_sbrk+0x64>)
10001498:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
1000149a:	4b11      	ldr	r3, [pc, #68]	; (100014e0 <_sbrk+0x60>)
1000149c:	681a      	ldr	r2, [r3, #0]
1000149e:	697b      	ldr	r3, [r7, #20]
100014a0:	18d2      	adds	r2, r2, r3
100014a2:	4b11      	ldr	r3, [pc, #68]	; (100014e8 <_sbrk+0x68>)
100014a4:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
100014a6:	4b0e      	ldr	r3, [pc, #56]	; (100014e0 <_sbrk+0x60>)
100014a8:	681b      	ldr	r3, [r3, #0]
100014aa:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100014ac:	4b0c      	ldr	r3, [pc, #48]	; (100014e0 <_sbrk+0x60>)
100014ae:	681b      	ldr	r3, [r3, #0]
100014b0:	1c1a      	adds	r2, r3, #0
100014b2:	687b      	ldr	r3, [r7, #4]
100014b4:	18d3      	adds	r3, r2, r3
100014b6:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
100014b8:	2207      	movs	r2, #7
100014ba:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100014bc:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
100014be:	4b0a      	ldr	r3, [pc, #40]	; (100014e8 <_sbrk+0x68>)
100014c0:	681b      	ldr	r3, [r3, #0]
100014c2:	68fa      	ldr	r2, [r7, #12]
100014c4:	429a      	cmp	r2, r3
100014c6:	d301      	bcc.n	100014cc <_sbrk+0x4c>
  return ((unsigned char *)NULL);
100014c8:	2300      	movs	r3, #0
100014ca:	e003      	b.n	100014d4 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
100014cc:	4b04      	ldr	r3, [pc, #16]	; (100014e0 <_sbrk+0x60>)
100014ce:	68fa      	ldr	r2, [r7, #12]
100014d0:	601a      	str	r2, [r3, #0]
  return CurrBreak;
100014d2:	693b      	ldr	r3, [r7, #16]
 }
}
100014d4:	1c18      	adds	r0, r3, #0
100014d6:	46bd      	mov	sp, r7
100014d8:	b006      	add	sp, #24
100014da:	bd80      	pop	{r7, pc}
100014dc:	000036b8 	.word	0x000036b8
100014e0:	20000928 	.word	0x20000928
100014e4:	20000948 	.word	0x20000948
100014e8:	2000092c 	.word	0x2000092c

100014ec <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
100014ec:	b580      	push	{r7, lr}
100014ee:	b082      	sub	sp, #8
100014f0:	af00      	add	r7, sp, #0
100014f2:	6078      	str	r0, [r7, #4]
 return -1;
100014f4:	2301      	movs	r3, #1
100014f6:	425b      	negs	r3, r3
}
100014f8:	1c18      	adds	r0, r3, #0
100014fa:	46bd      	mov	sp, r7
100014fc:	b002      	add	sp, #8
100014fe:	bd80      	pop	{r7, pc}

10001500 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10001500:	b580      	push	{r7, lr}
10001502:	b082      	sub	sp, #8
10001504:	af00      	add	r7, sp, #0
10001506:	6078      	str	r0, [r7, #4]
 return -1;
10001508:	2301      	movs	r3, #1
1000150a:	425b      	negs	r3, r3
}
1000150c:	1c18      	adds	r0, r3, #0
1000150e:	46bd      	mov	sp, r7
10001510:	b002      	add	sp, #8
10001512:	bd80      	pop	{r7, pc}

10001514 <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
10001514:	b580      	push	{r7, lr}
10001516:	b082      	sub	sp, #8
10001518:	af00      	add	r7, sp, #0
1000151a:	6078      	str	r0, [r7, #4]
1000151c:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
1000151e:	2301      	movs	r3, #1
10001520:	425b      	negs	r3, r3
}
10001522:	1c18      	adds	r0, r3, #0
10001524:	46bd      	mov	sp, r7
10001526:	b002      	add	sp, #8
10001528:	bd80      	pop	{r7, pc}
1000152a:	46c0      	nop			; (mov r8, r8)

1000152c <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
1000152c:	b580      	push	{r7, lr}
1000152e:	af00      	add	r7, sp, #0
 return -1;
10001530:	2301      	movs	r3, #1
10001532:	425b      	negs	r3, r3
}
10001534:	1c18      	adds	r0, r3, #0
10001536:	46bd      	mov	sp, r7
10001538:	bd80      	pop	{r7, pc}
1000153a:	46c0      	nop			; (mov r8, r8)

1000153c <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
1000153c:	b580      	push	{r7, lr}
1000153e:	af00      	add	r7, sp, #0
 return -1;
10001540:	2301      	movs	r3, #1
10001542:	425b      	negs	r3, r3
}
10001544:	1c18      	adds	r0, r3, #0
10001546:	46bd      	mov	sp, r7
10001548:	bd80      	pop	{r7, pc}
1000154a:	46c0      	nop			; (mov r8, r8)

1000154c <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
1000154c:	b580      	push	{r7, lr}
1000154e:	b082      	sub	sp, #8
10001550:	af00      	add	r7, sp, #0
10001552:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
10001554:	e7fe      	b.n	10001554 <_exit+0x8>
10001556:	46c0      	nop			; (mov r8, r8)

10001558 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
10001558:	b580      	push	{r7, lr}
1000155a:	af00      	add	r7, sp, #0
1000155c:	46bd      	mov	sp, r7
1000155e:	bd80      	pop	{r7, pc}

10001560 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
10001560:	b580      	push	{r7, lr}
10001562:	b082      	sub	sp, #8
10001564:	af00      	add	r7, sp, #0
10001566:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10001568:	2301      	movs	r3, #1
1000156a:	425b      	negs	r3, r3
}
1000156c:	1c18      	adds	r0, r3, #0
1000156e:	46bd      	mov	sp, r7
10001570:	b002      	add	sp, #8
10001572:	bd80      	pop	{r7, pc}

10001574 <PWMSP001_Init>:
 **                 Function definitions                                       **
 *******************************************************************************/
   
/* This function initializes the app */
void PWMSP001_Init(void)
{
10001574:	b580      	push	{r7, lr}
10001576:	b082      	sub	sp, #8
10001578:	af00      	add	r7, sp, #0
  status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000157a:	2301      	movs	r3, #1
1000157c:	607b      	str	r3, [r7, #4]
  CCU4GLOBAL_Init();
1000157e:	f001 fd5b 	bl	10003038 <CCU4GLOBAL_Init>
  Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
10001582:	4b10      	ldr	r3, [pc, #64]	; (100015c4 <PWMSP001_Init+0x50>)
10001584:	1c18      	adds	r0, r3, #0
10001586:	f000 f823 	bl	100015d0 <PWMSP001_lInit>
1000158a:	1c03      	adds	r3, r0, #0
1000158c:	607b      	str	r3, [r7, #4]
  /* Start the app if "Start after initialization" is checked */
  if(Error == (uint32_t)DAVEApp_SUCCESS)
1000158e:	687b      	ldr	r3, [r7, #4]
10001590:	2b00      	cmp	r3, #0
10001592:	d109      	bne.n	100015a8 <PWMSP001_Init+0x34>
  {   
    if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
10001594:	4b0b      	ldr	r3, [pc, #44]	; (100015c4 <PWMSP001_Init+0x50>)
10001596:	785b      	ldrb	r3, [r3, #1]
10001598:	2b01      	cmp	r3, #1
1000159a:	d105      	bne.n	100015a8 <PWMSP001_Init+0x34>
    {
      Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
1000159c:	4b09      	ldr	r3, [pc, #36]	; (100015c4 <PWMSP001_Init+0x50>)
1000159e:	1c18      	adds	r0, r3, #0
100015a0:	f000 fa34 	bl	10001a0c <PWMSP001_Start>
100015a4:	1c03      	adds	r3, r0, #0
100015a6:	607b      	str	r3, [r7, #4]
      DBG002_N(Error != DAVEApp_SUCCESS);
    }
  }
    
      PORT0->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
100015a8:	4b07      	ldr	r3, [pc, #28]	; (100015c8 <PWMSP001_Init+0x54>)
100015aa:	4a07      	ldr	r2, [pc, #28]	; (100015c8 <PWMSP001_Init+0x54>)
100015ac:	6951      	ldr	r1, [r2, #20]
100015ae:	4a07      	ldr	r2, [pc, #28]	; (100015cc <PWMSP001_Init+0x58>)
100015b0:	400a      	ands	r2, r1
100015b2:	615a      	str	r2, [r3, #20]
      PORT0->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
100015b4:	4b04      	ldr	r3, [pc, #16]	; (100015c8 <PWMSP001_Init+0x54>)
100015b6:	4a04      	ldr	r2, [pc, #16]	; (100015c8 <PWMSP001_Init+0x54>)
100015b8:	6952      	ldr	r2, [r2, #20]
100015ba:	615a      	str	r2, [r3, #20]
                                   (uint32_t)PORT_IOCR_PC1_PO_Msk);
}
100015bc:	46bd      	mov	sp, r7
100015be:	b002      	add	sp, #8
100015c0:	bd80      	pop	{r7, pc}
100015c2:	46c0      	nop			; (mov r8, r8)
100015c4:	10003e30 	.word	0x10003e30
100015c8:	40040000 	.word	0x40040000
100015cc:	ffffbfff 	.word	0xffffbfff

100015d0 <PWMSP001_lInit>:

/*<<<DD_PWMSP001_API_1>>>*/
/* This function initializes an instance of the app */
status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
{
100015d0:	b5b0      	push	{r4, r5, r7, lr}
100015d2:	b084      	sub	sp, #16
100015d4:	af00      	add	r7, sp, #0
100015d6:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100015d8:	2301      	movs	r3, #1
100015da:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
100015dc:	687b      	ldr	r3, [r7, #4]
100015de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100015e0:	781b      	ldrb	r3, [r3, #0]
100015e2:	2b00      	cmp	r3, #0
100015e4:	d000      	beq.n	100015e8 <PWMSP001_lInit+0x18>
100015e6:	e156      	b.n	10001896 <PWMSP001_lInit+0x2c6>
    {
      break;
    }
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
100015e8:	687b      	ldr	r3, [r7, #4]
100015ea:	699b      	ldr	r3, [r3, #24]
100015ec:	2207      	movs	r2, #7
100015ee:	611a      	str	r2, [r3, #16]

    /*<<<DD_PWMSP001_API_1_3>>>*/
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	7bdb      	ldrb	r3, [r3, #15]
100015f4:	2b01      	cmp	r3, #1
100015f6:	d125      	bne.n	10001644 <PWMSP001_lInit+0x74>
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
100015f8:	687b      	ldr	r3, [r7, #4]
100015fa:	699b      	ldr	r3, [r3, #24]
100015fc:	687a      	ldr	r2, [r7, #4]
100015fe:	6992      	ldr	r2, [r2, #24]
10001600:	6811      	ldr	r1, [r2, #0]
10001602:	4aa8      	ldr	r2, [pc, #672]	; (100018a4 <PWMSP001_lInit+0x2d4>)
10001604:	400a      	ands	r2, r1
10001606:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
10001608:	687b      	ldr	r3, [r7, #4]
1000160a:	699b      	ldr	r3, [r3, #24]
1000160c:	687a      	ldr	r2, [r7, #4]
1000160e:	6992      	ldr	r2, [r2, #24]
10001610:	6852      	ldr	r2, [r2, #4]
10001612:	210c      	movs	r1, #12
10001614:	438a      	bics	r2, r1
10001616:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
10001618:	687b      	ldr	r3, [r7, #4]
1000161a:	699b      	ldr	r3, [r3, #24]
1000161c:	687a      	ldr	r2, [r7, #4]
1000161e:	6992      	ldr	r2, [r2, #24]
10001620:	6811      	ldr	r1, [r2, #0]
10001622:	6878      	ldr	r0, [r7, #4]
10001624:	2224      	movs	r2, #36	; 0x24
10001626:	5c82      	ldrb	r2, [r0, r2]
10001628:	0490      	lsls	r0, r2, #18
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
1000162a:	22c0      	movs	r2, #192	; 0xc0
1000162c:	0312      	lsls	r2, r2, #12
1000162e:	4002      	ands	r2, r0
    /* If external stop trigger is setelected */
    if (HandlePtr->kExtStopTrig == (uint8_t)SET)
    {
      HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LPF1M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
      HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV1EM_Pos)\
10001630:	430a      	orrs	r2, r1
10001632:	601a      	str	r2, [r3, #0]
	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)\
		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	699b      	ldr	r3, [r3, #24]
10001638:	687a      	ldr	r2, [r7, #4]
1000163a:	6992      	ldr	r2, [r2, #24]
1000163c:	6852      	ldr	r2, [r2, #4]
1000163e:	2108      	movs	r1, #8
10001640:	430a      	orrs	r2, r1
10001642:	605a      	str	r2, [r3, #4]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
10001644:	687b      	ldr	r3, [r7, #4]
10001646:	7c5b      	ldrb	r3, [r3, #17]
10001648:	2b01      	cmp	r3, #1
1000164a:	d12a      	bne.n	100016a2 <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
1000164c:	687a      	ldr	r2, [r7, #4]
1000164e:	2320      	movs	r3, #32
10001650:	5cd3      	ldrb	r3, [r2, r3]
          (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
    }/*End of if (HandlePtr->kExtStopTrig == SET)*/

    /*<<<DD_PWMSP001_API_1_4>>>*/
    /* Trap configurations if trap is enabled */
    if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
10001652:	2b01      	cmp	r3, #1
10001654:	d025      	beq.n	100016a2 <PWMSP001_lInit+0xd2>
        ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
10001656:	687b      	ldr	r3, [r7, #4]
10001658:	699b      	ldr	r3, [r3, #24]
1000165a:	687a      	ldr	r2, [r7, #4]
1000165c:	6992      	ldr	r2, [r2, #24]
1000165e:	6811      	ldr	r1, [r2, #0]
10001660:	4a91      	ldr	r2, [pc, #580]	; (100018a8 <PWMSP001_lInit+0x2d8>)
10001662:	400a      	ands	r2, r1
10001664:	601a      	str	r2, [r3, #0]
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
10001666:	687b      	ldr	r3, [r7, #4]
10001668:	699b      	ldr	r3, [r3, #24]
1000166a:	687a      	ldr	r2, [r7, #4]
1000166c:	6992      	ldr	r2, [r2, #24]
1000166e:	6851      	ldr	r1, [r2, #4]
10001670:	4a8e      	ldr	r2, [pc, #568]	; (100018ac <PWMSP001_lInit+0x2dc>)
10001672:	400a      	ands	r2, r1
10001674:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
10001676:	687b      	ldr	r3, [r7, #4]
10001678:	699b      	ldr	r3, [r3, #24]
1000167a:	687a      	ldr	r2, [r7, #4]
1000167c:	6992      	ldr	r2, [r2, #24]
1000167e:	6811      	ldr	r1, [r2, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
10001680:	687a      	ldr	r2, [r7, #4]
10001682:	7812      	ldrb	r2, [r2, #0]
10001684:	0610      	lsls	r0, r2, #24
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
10001686:	2280      	movs	r2, #128	; 0x80
10001688:	0452      	lsls	r2, r2, #17
1000168a:	4002      	ands	r2, r0
    )
    {
      HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
      HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
      HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
1000168c:	430a      	orrs	r2, r1
1000168e:	601a      	str	r2, [r3, #0]
	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));

      HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
10001690:	687b      	ldr	r3, [r7, #4]
10001692:	699b      	ldr	r3, [r3, #24]
10001694:	687a      	ldr	r2, [r7, #4]
10001696:	6992      	ldr	r2, [r2, #24]
10001698:	6852      	ldr	r2, [r2, #4]
1000169a:	2180      	movs	r1, #128	; 0x80
1000169c:	0289      	lsls	r1, r1, #10
1000169e:	430a      	orrs	r2, r1
100016a0:	605a      	str	r2, [r3, #4]
    }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
100016a2:	687b      	ldr	r3, [r7, #4]
100016a4:	699b      	ldr	r3, [r3, #24]
100016a6:	687a      	ldr	r2, [r7, #4]
100016a8:	6992      	ldr	r2, [r2, #24]
100016aa:	6951      	ldr	r1, [r2, #20]
100016ac:	4a80      	ldr	r2, [pc, #512]	; (100018b0 <PWMSP001_lInit+0x2e0>)
100016ae:	400a      	ands	r2, r1
100016b0:	615a      	str	r2, [r3, #20]
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
100016b2:	687b      	ldr	r3, [r7, #4]
100016b4:	699b      	ldr	r3, [r3, #24]
100016b6:	687a      	ldr	r2, [r7, #4]
100016b8:	6992      	ldr	r2, [r2, #24]
100016ba:	6951      	ldr	r1, [r2, #20]
100016bc:	6878      	ldr	r0, [r7, #4]
100016be:	2236      	movs	r2, #54	; 0x36
100016c0:	5c82      	ldrb	r2, [r0, r2]
100016c2:	1c10      	adds	r0, r2, #0
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
100016c4:	2201      	movs	r2, #1
100016c6:	4010      	ands	r0, r2
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
100016c8:	687c      	ldr	r4, [r7, #4]
100016ca:	2234      	movs	r2, #52	; 0x34
100016cc:	5ca2      	ldrb	r2, [r4, r2]
100016ce:	0294      	lsls	r4, r2, #10
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100016d0:	2280      	movs	r2, #128	; 0x80
100016d2:	00d2      	lsls	r2, r2, #3
100016d4:	4022      	ands	r2, r4
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
100016d6:	4310      	orrs	r0, r2
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100016d8:	687c      	ldr	r4, [r7, #4]
100016da:	2235      	movs	r2, #53	; 0x35
100016dc:	5ca2      	ldrb	r2, [r4, r2]
100016de:	0214      	lsls	r4, r2, #8
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
100016e0:	22c0      	movs	r2, #192	; 0xc0
100016e2:	0092      	lsls	r2, r2, #2
100016e4:	4022      	ands	r2, r4
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
100016e6:	4302      	orrs	r2, r0
    
    HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
    
    HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
100016e8:	430a      	orrs	r2, r1
100016ea:	615a      	str	r2, [r3, #20]
				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
    /*
     * If timer concatenation is enabled during single shot mode lower timer 
     * should be free running
     */
	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
100016ec:	687a      	ldr	r2, [r7, #4]
100016ee:	2320      	movs	r3, #32
100016f0:	5cd3      	ldrb	r3, [r2, r3]
100016f2:	2b01      	cmp	r3, #1
100016f4:	d00d      	beq.n	10001712 <PWMSP001_lInit+0x142>
	{
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
100016f6:	687b      	ldr	r3, [r7, #4]
100016f8:	699b      	ldr	r3, [r3, #24]
100016fa:	687a      	ldr	r2, [r7, #4]
100016fc:	7b12      	ldrb	r2, [r2, #12]
100016fe:	0051      	lsls	r1, r2, #1
10001700:	2202      	movs	r2, #2
10001702:	4011      	ands	r1, r2
10001704:	687a      	ldr	r2, [r7, #4]
10001706:	6992      	ldr	r2, [r2, #24]
10001708:	6952      	ldr	r2, [r2, #20]
1000170a:	2002      	movs	r0, #2
1000170c:	4382      	bics	r2, r0
1000170e:	430a      	orrs	r2, r1
10001710:	615a      	str	r2, [r3, #20]
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
10001712:	687b      	ldr	r3, [r7, #4]
10001714:	699b      	ldr	r3, [r3, #24]
10001716:	687a      	ldr	r2, [r7, #4]
10001718:	6992      	ldr	r2, [r2, #24]
1000171a:	6951      	ldr	r1, [r2, #20]
1000171c:	6878      	ldr	r0, [r7, #4]
1000171e:	2221      	movs	r2, #33	; 0x21
10001720:	5c82      	ldrb	r2, [r0, r2]
10001722:	0350      	lsls	r0, r2, #13
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
10001724:	22c0      	movs	r2, #192	; 0xc0
10001726:	01d2      	lsls	r2, r2, #7
10001728:	4002      	ands	r2, r0
		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
	} 
    
    /*Set the dither mode setting*/
    HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
1000172a:	430a      	orrs	r2, r1
1000172c:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
    
    WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
1000172e:	687b      	ldr	r3, [r7, #4]
10001730:	699b      	ldr	r3, [r3, #24]
10001732:	687a      	ldr	r2, [r7, #4]
10001734:	7b52      	ldrb	r2, [r2, #13]
10001736:	1c11      	adds	r1, r2, #0
10001738:	220f      	movs	r2, #15
1000173a:	4011      	ands	r1, r2
1000173c:	687a      	ldr	r2, [r7, #4]
1000173e:	6992      	ldr	r2, [r2, #24]
10001740:	6a12      	ldr	r2, [r2, #32]
10001742:	200f      	movs	r0, #15
10001744:	4382      	bics	r2, r0
10001746:	430a      	orrs	r2, r1
10001748:	621a      	str	r2, [r3, #32]
      (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

    /*Configure Trap mode as per GUI*/
    if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
1000174a:	687a      	ldr	r2, [r7, #4]
1000174c:	2320      	movs	r3, #32
1000174e:	5cd3      	ldrb	r3, [r2, r3]
10001750:	2b01      	cmp	r3, #1
10001752:	d02c      	beq.n	100017ae <PWMSP001_lInit+0x1de>
    {
      /*<<<DD_PWMSP001_API_1_6>>>*/
      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
10001754:	687b      	ldr	r3, [r7, #4]
10001756:	699b      	ldr	r3, [r3, #24]
10001758:	687a      	ldr	r2, [r7, #4]
1000175a:	7c92      	ldrb	r2, [r2, #18]
1000175c:	0551      	lsls	r1, r2, #21
1000175e:	2280      	movs	r2, #128	; 0x80
10001760:	0392      	lsls	r2, r2, #14
10001762:	4011      	ands	r1, r2
10001764:	687a      	ldr	r2, [r7, #4]
10001766:	6992      	ldr	r2, [r2, #24]
10001768:	6950      	ldr	r0, [r2, #20]
1000176a:	4a52      	ldr	r2, [pc, #328]	; (100018b4 <PWMSP001_lInit+0x2e4>)
1000176c:	4002      	ands	r2, r0
1000176e:	430a      	orrs	r2, r1
10001770:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

      WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
10001772:	687b      	ldr	r3, [r7, #4]
10001774:	699b      	ldr	r3, [r3, #24]
10001776:	687a      	ldr	r2, [r7, #4]
10001778:	7cd2      	ldrb	r2, [r2, #19]
1000177a:	0591      	lsls	r1, r2, #22
1000177c:	2280      	movs	r2, #128	; 0x80
1000177e:	03d2      	lsls	r2, r2, #15
10001780:	4011      	ands	r1, r2
10001782:	687a      	ldr	r2, [r7, #4]
10001784:	6992      	ldr	r2, [r2, #24]
10001786:	6950      	ldr	r0, [r2, #20]
10001788:	4a4b      	ldr	r2, [pc, #300]	; (100018b8 <PWMSP001_lInit+0x2e8>)
1000178a:	4002      	ands	r2, r0
1000178c:	430a      	orrs	r2, r1
1000178e:	615a      	str	r2, [r3, #20]
          (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
      
	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
10001790:	687b      	ldr	r3, [r7, #4]
10001792:	699b      	ldr	r3, [r3, #24]
10001794:	687a      	ldr	r2, [r7, #4]
10001796:	7c52      	ldrb	r2, [r2, #17]
10001798:	0451      	lsls	r1, r2, #17
1000179a:	2280      	movs	r2, #128	; 0x80
1000179c:	0292      	lsls	r2, r2, #10
1000179e:	4011      	ands	r1, r2
100017a0:	687a      	ldr	r2, [r7, #4]
100017a2:	6992      	ldr	r2, [r2, #24]
100017a4:	6950      	ldr	r0, [r2, #20]
100017a6:	4a41      	ldr	r2, [pc, #260]	; (100018ac <PWMSP001_lInit+0x2dc>)
100017a8:	4002      	ands	r2, r0
100017aa:	430a      	orrs	r2, r1
100017ac:	615a      	str	r2, [r3, #20]
		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
    }
    /*Set the prescalar divider and passive level of the o/p signal.*/
    WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
100017ae:	687b      	ldr	r3, [r7, #4]
100017b0:	699b      	ldr	r3, [r3, #24]
100017b2:	6879      	ldr	r1, [r7, #4]
100017b4:	2222      	movs	r2, #34	; 0x22
100017b6:	5c8a      	ldrb	r2, [r1, r2]
100017b8:	1c11      	adds	r1, r2, #0
100017ba:	220f      	movs	r2, #15
100017bc:	4011      	ands	r1, r2
100017be:	687a      	ldr	r2, [r7, #4]
100017c0:	6992      	ldr	r2, [r2, #24]
100017c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
100017c4:	200f      	movs	r0, #15
100017c6:	4382      	bics	r2, r0
100017c8:	430a      	orrs	r2, r1
100017ca:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
    HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
100017cc:	687b      	ldr	r3, [r7, #4]
100017ce:	699b      	ldr	r3, [r3, #24]
100017d0:	687a      	ldr	r2, [r7, #4]
100017d2:	7c12      	ldrb	r2, [r2, #16]
100017d4:	619a      	str	r2, [r3, #24]

    /*<<<DD_PWMSP001_API_1_7>>>*/
    /*Setting period register's value*/
    HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
100017d6:	687b      	ldr	r3, [r7, #4]
100017d8:	699b      	ldr	r3, [r3, #24]
100017da:	687a      	ldr	r2, [r7, #4]
100017dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
100017de:	0412      	lsls	r2, r2, #16
100017e0:	0c12      	lsrs	r2, r2, #16
100017e2:	635a      	str	r2, [r3, #52]	; 0x34
    /*Setting compare register's value*/
    HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
100017e4:	687b      	ldr	r3, [r7, #4]
100017e6:	699b      	ldr	r3, [r3, #24]
100017e8:	687a      	ldr	r2, [r7, #4]
100017ea:	6892      	ldr	r2, [r2, #8]
100017ec:	0412      	lsls	r2, r2, #16
100017ee:	0c12      	lsrs	r2, r2, #16
100017f0:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
100017f2:	687b      	ldr	r3, [r7, #4]
100017f4:	699a      	ldr	r2, [r3, #24]
100017f6:	687b      	ldr	r3, [r7, #4]
100017f8:	6999      	ldr	r1, [r3, #24]
100017fa:	23b0      	movs	r3, #176	; 0xb0
100017fc:	58cb      	ldr	r3, [r1, r3]
100017fe:	492f      	ldr	r1, [pc, #188]	; (100018bc <PWMSP001_lInit+0x2ec>)
10001800:	4319      	orrs	r1, r3
10001802:	23b0      	movs	r3, #176	; 0xb0
10001804:	50d1      	str	r1, [r2, r3]

    /*Applying register's settings for the second slice if timer concatenation
     * is set */
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001806:	687a      	ldr	r2, [r7, #4]
10001808:	2320      	movs	r3, #32
1000180a:	5cd3      	ldrb	r3, [r2, r3]
1000180c:	2b01      	cmp	r3, #1
1000180e:	d10f      	bne.n	10001830 <PWMSP001_lInit+0x260>
    {
      PWMSP001_lConfigureSecondSlice(HandlePtr);
10001810:	687b      	ldr	r3, [r7, #4]
10001812:	1c18      	adds	r0, r3, #0
10001814:	f000 ff98 	bl	10002748 <PWMSP001_lConfigureSecondSlice>
      HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
10001818:	687b      	ldr	r3, [r7, #4]
1000181a:	69da      	ldr	r2, [r3, #28]
1000181c:	687b      	ldr	r3, [r7, #4]
1000181e:	69d9      	ldr	r1, [r3, #28]
10001820:	23a4      	movs	r3, #164	; 0xa4
10001822:	58c9      	ldr	r1, [r1, r3]
10001824:	687b      	ldr	r3, [r7, #4]
10001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001828:	4319      	orrs	r1, r3
1000182a:	23a4      	movs	r3, #164	; 0xa4
1000182c:	50d1      	str	r1, [r2, r3]
1000182e:	e00a      	b.n	10001846 <PWMSP001_lInit+0x276>

    } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
    else
    {
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
10001830:	687b      	ldr	r3, [r7, #4]
10001832:	699a      	ldr	r2, [r3, #24]
10001834:	687b      	ldr	r3, [r7, #4]
10001836:	6999      	ldr	r1, [r3, #24]
10001838:	23a4      	movs	r3, #164	; 0xa4
1000183a:	58c9      	ldr	r1, [r1, r3]
1000183c:	687b      	ldr	r3, [r7, #4]
1000183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001840:	4319      	orrs	r1, r3
10001842:	23a4      	movs	r3, #164	; 0xa4
10001844:	50d1      	str	r1, [r2, r3]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10001846:	687b      	ldr	r3, [r7, #4]
10001848:	695b      	ldr	r3, [r3, #20]
1000184a:	687a      	ldr	r2, [r7, #4]
1000184c:	6952      	ldr	r2, [r2, #20]
1000184e:	6911      	ldr	r1, [r2, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
10001850:	6878      	ldr	r0, [r7, #4]
10001852:	2237      	movs	r2, #55	; 0x37
10001854:	5c82      	ldrb	r2, [r0, r2]
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10001856:	0092      	lsls	r2, r2, #2
10001858:	2001      	movs	r0, #1
1000185a:	4090      	lsls	r0, r2
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
1000185c:	687c      	ldr	r4, [r7, #4]
1000185e:	2237      	movs	r2, #55	; 0x37
10001860:	5ca2      	ldrb	r2, [r4, r2]
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
10001862:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
10001864:	3201      	adds	r2, #1
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
10001866:	2401      	movs	r4, #1
10001868:	1c25      	adds	r5, r4, #0
1000186a:	4095      	lsls	r5, r2
1000186c:	1c2a      	adds	r2, r5, #0
1000186e:	4310      	orrs	r0, r2
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
10001870:	687c      	ldr	r4, [r7, #4]
10001872:	2237      	movs	r2, #55	; 0x37
10001874:	5ca2      	ldrb	r2, [r4, r2]
10001876:	0092      	lsls	r2, r2, #2
10001878:	3202      	adds	r2, #2
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
1000187a:	2401      	movs	r4, #1
1000187c:	1c25      	adds	r5, r4, #0
1000187e:	4095      	lsls	r5, r2
10001880:	1c2a      	adds	r2, r5, #0
10001882:	4302      	orrs	r2, r0
      HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
    }
    
    
    /*Request SW shadow transfer for period, compare, dither and prescalar level*/
    HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
10001884:	430a      	orrs	r2, r1
10001886:	611a      	str	r2, [r3, #16]
	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));

    Status = (uint32_t)DAVEApp_SUCCESS;
10001888:	2300      	movs	r3, #0
1000188a:	60fb      	str	r3, [r7, #12]
    HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
1000188c:	687b      	ldr	r3, [r7, #4]
1000188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001890:	2201      	movs	r2, #1
10001892:	701a      	strb	r2, [r3, #0]
10001894:	e000      	b.n	10001898 <PWMSP001_lInit+0x2c8>
  do
  {
    /*<<<DD_PWMSP001_API_1_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
    {
      break;
10001896:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10001898:	68fb      	ldr	r3, [r7, #12]
}
1000189a:	1c18      	adds	r0, r3, #0
1000189c:	46bd      	mov	sp, r7
1000189e:	b004      	add	sp, #16
100018a0:	bdb0      	pop	{r4, r5, r7, pc}
100018a2:	46c0      	nop			; (mov r8, r8)
100018a4:	e7f3ffff 	.word	0xe7f3ffff
100018a8:	9ecfffff 	.word	0x9ecfffff
100018ac:	fffdffff 	.word	0xfffdffff
100018b0:	ffff98f6 	.word	0xffff98f6
100018b4:	ffdfffff 	.word	0xffdfffff
100018b8:	ffbfffff 	.word	0xffbfffff
100018bc:	00000f0f 	.word	0x00000f0f

100018c0 <PWMSP001_Deinit>:

/*<<<DD_PWMSP001_API_2>>>*/
/* This function de-initializes the app */
status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
{
100018c0:	b590      	push	{r4, r7, lr}
100018c2:	b089      	sub	sp, #36	; 0x24
100018c4:	af00      	add	r7, sp, #0
100018c6:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100018c8:	2301      	movs	r3, #1
100018ca:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  uint32_t Temp4;

     /*<<<DD_PWMSP001_API_2_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
100018cc:	687b      	ldr	r3, [r7, #4]
100018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018d0:	781b      	ldrb	r3, [r3, #0]
100018d2:	2b00      	cmp	r3, #0
100018d4:	d100      	bne.n	100018d8 <PWMSP001_Deinit+0x18>
100018d6:	e091      	b.n	100019fc <PWMSP001_Deinit+0x13c>
    {
    /*<<<DD_PWMSP001_API_2_3>>>*/
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
100018d8:	687b      	ldr	r3, [r7, #4]
100018da:	699b      	ldr	r3, [r3, #24]
100018dc:	2207      	movs	r2, #7
100018de:	611a      	str	r2, [r3, #16]
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
100018e0:	687b      	ldr	r3, [r7, #4]
100018e2:	699a      	ldr	r2, [r3, #24]
100018e4:	23b0      	movs	r3, #176	; 0xb0
100018e6:	4948      	ldr	r1, [pc, #288]	; (10001a08 <PWMSP001_Deinit+0x148>)
100018e8:	50d1      	str	r1, [r2, r3]
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;
100018ea:	687b      	ldr	r3, [r7, #4]
100018ec:	699a      	ldr	r2, [r3, #24]
100018ee:	23a4      	movs	r3, #164	; 0xa4
100018f0:	2100      	movs	r1, #0
100018f2:	50d1      	str	r1, [r2, r3]

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
100018f4:	687b      	ldr	r3, [r7, #4]
100018f6:	695b      	ldr	r3, [r3, #20]
100018f8:	687a      	ldr	r2, [r7, #4]
100018fa:	6952      	ldr	r2, [r2, #20]
100018fc:	6891      	ldr	r1, [r2, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
100018fe:	6878      	ldr	r0, [r7, #4]
10001900:	2237      	movs	r2, #55	; 0x37
10001902:	5c82      	ldrb	r2, [r0, r2]
    HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    HandlePtr->CC4yRegsPtr->INTE = 0x00U;

    /*Set IDLE mode for selected slice*/
    HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
10001904:	2001      	movs	r0, #1
10001906:	1c04      	adds	r4, r0, #0
10001908:	4094      	lsls	r4, r2
1000190a:	1c22      	adds	r2, r4, #0
1000190c:	430a      	orrs	r2, r1
1000190e:	21c0      	movs	r1, #192	; 0xc0
10001910:	0089      	lsls	r1, r1, #2
10001912:	430a      	orrs	r2, r1
10001914:	609a      	str	r2, [r3, #8]
	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));

    /*Clear all the registers*/
    HandlePtr->CC4yRegsPtr->INS = 0x00U;
10001916:	687b      	ldr	r3, [r7, #4]
10001918:	699b      	ldr	r3, [r3, #24]
1000191a:	2200      	movs	r2, #0
1000191c:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegsPtr->CMC = 0x00U;
1000191e:	687b      	ldr	r3, [r7, #4]
10001920:	699b      	ldr	r3, [r3, #24]
10001922:	2200      	movs	r2, #0
10001924:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegsPtr->TC = 0x00U;
10001926:	687b      	ldr	r3, [r7, #4]
10001928:	699b      	ldr	r3, [r3, #24]
1000192a:	2200      	movs	r2, #0
1000192c:	615a      	str	r2, [r3, #20]
    HandlePtr->CC4yRegsPtr->PSC = 0x00U;
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	699b      	ldr	r3, [r3, #24]
10001932:	2200      	movs	r2, #0
10001934:	625a      	str	r2, [r3, #36]	; 0x24
    HandlePtr->CC4yRegsPtr->PSL = 0x00U;
10001936:	687b      	ldr	r3, [r7, #4]
10001938:	699b      	ldr	r3, [r3, #24]
1000193a:	2200      	movs	r2, #0
1000193c:	619a      	str	r2, [r3, #24]
    HandlePtr->CC4yRegsPtr->DITS = 0x00U;
1000193e:	687b      	ldr	r3, [r7, #4]
10001940:	699b      	ldr	r3, [r3, #24]
10001942:	2200      	movs	r2, #0
10001944:	621a      	str	r2, [r3, #32]
    HandlePtr->CC4yRegsPtr->CRS = 0x00U;
10001946:	687b      	ldr	r3, [r7, #4]
10001948:	699b      	ldr	r3, [r3, #24]
1000194a:	2200      	movs	r2, #0
1000194c:	63da      	str	r2, [r3, #60]	; 0x3c
    HandlePtr->CC4yRegsPtr->PRS = 0x00U;
1000194e:	687b      	ldr	r3, [r7, #4]
10001950:	699b      	ldr	r3, [r3, #24]
10001952:	2200      	movs	r2, #0
10001954:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_2_2>>>*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001956:	687a      	ldr	r2, [r7, #4]
10001958:	2320      	movs	r3, #32
1000195a:	5cd3      	ldrb	r3, [r2, r3]
1000195c:	2b01      	cmp	r3, #1
1000195e:	d147      	bne.n	100019f0 <PWMSP001_Deinit+0x130>
    {
      /*<<<DD_PWMSP001_API_2_3>>>*/
      HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
10001960:	687b      	ldr	r3, [r7, #4]
10001962:	69db      	ldr	r3, [r3, #28]
10001964:	2207      	movs	r2, #7
10001966:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10001968:	687b      	ldr	r3, [r7, #4]
1000196a:	69da      	ldr	r2, [r3, #28]
1000196c:	23b0      	movs	r3, #176	; 0xb0
1000196e:	4926      	ldr	r1, [pc, #152]	; (10001a08 <PWMSP001_Deinit+0x148>)
10001970:	50d1      	str	r1, [r2, r3]
      HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
10001972:	687b      	ldr	r3, [r7, #4]
10001974:	69da      	ldr	r2, [r3, #28]
10001976:	23a4      	movs	r3, #164	; 0xa4
10001978:	2100      	movs	r1, #0
1000197a:	50d1      	str	r1, [r2, r3]

      /*Set IDLE mode for selected slice*/
      Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
1000197c:	2380      	movs	r3, #128	; 0x80
1000197e:	009b      	lsls	r3, r3, #2
10001980:	61bb      	str	r3, [r7, #24]
      Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
10001982:	2380      	movs	r3, #128	; 0x80
10001984:	005b      	lsls	r3, r3, #1
10001986:	617b      	str	r3, [r7, #20]
      Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
10001988:	687a      	ldr	r2, [r7, #4]
1000198a:	2338      	movs	r3, #56	; 0x38
1000198c:	5cd3      	ldrb	r3, [r2, r3]
1000198e:	613b      	str	r3, [r7, #16]
      Temp1 = Temp3 | Temp4;
10001990:	697a      	ldr	r2, [r7, #20]
10001992:	69bb      	ldr	r3, [r7, #24]
10001994:	4313      	orrs	r3, r2
10001996:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
10001998:	687b      	ldr	r3, [r7, #4]
1000199a:	695b      	ldr	r3, [r3, #20]
1000199c:	687a      	ldr	r2, [r7, #4]
1000199e:	6952      	ldr	r2, [r2, #20]
100019a0:	6891      	ldr	r1, [r2, #8]
100019a2:	693a      	ldr	r2, [r7, #16]
100019a4:	2001      	movs	r0, #1
100019a6:	4090      	lsls	r0, r2
100019a8:	68fa      	ldr	r2, [r7, #12]
100019aa:	4302      	orrs	r2, r0
100019ac:	430a      	orrs	r2, r1
100019ae:	609a      	str	r2, [r3, #8]
      /*   Temp3 | Temp4 ); */

      /*Clear all the registers*/
      HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
100019b0:	687b      	ldr	r3, [r7, #4]
100019b2:	69db      	ldr	r3, [r3, #28]
100019b4:	2200      	movs	r2, #0
100019b6:	601a      	str	r2, [r3, #0]
      HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
100019b8:	687b      	ldr	r3, [r7, #4]
100019ba:	69db      	ldr	r3, [r3, #28]
100019bc:	2200      	movs	r2, #0
100019be:	605a      	str	r2, [r3, #4]
      HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
100019c0:	687b      	ldr	r3, [r7, #4]
100019c2:	69db      	ldr	r3, [r3, #28]
100019c4:	2200      	movs	r2, #0
100019c6:	615a      	str	r2, [r3, #20]
      HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
100019c8:	687b      	ldr	r3, [r7, #4]
100019ca:	69db      	ldr	r3, [r3, #28]
100019cc:	2200      	movs	r2, #0
100019ce:	625a      	str	r2, [r3, #36]	; 0x24
      HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
100019d0:	687b      	ldr	r3, [r7, #4]
100019d2:	69db      	ldr	r3, [r3, #28]
100019d4:	2200      	movs	r2, #0
100019d6:	619a      	str	r2, [r3, #24]
      HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
100019d8:	687b      	ldr	r3, [r7, #4]
100019da:	69db      	ldr	r3, [r3, #28]
100019dc:	2200      	movs	r2, #0
100019de:	621a      	str	r2, [r3, #32]
      HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
100019e0:	687b      	ldr	r3, [r7, #4]
100019e2:	69db      	ldr	r3, [r3, #28]
100019e4:	2200      	movs	r2, #0
100019e6:	63da      	str	r2, [r3, #60]	; 0x3c
      HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
100019e8:	687b      	ldr	r3, [r7, #4]
100019ea:	69db      	ldr	r3, [r3, #28]
100019ec:	2200      	movs	r2, #0
100019ee:	635a      	str	r2, [r3, #52]	; 0x34
    }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

    HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
100019f0:	687b      	ldr	r3, [r7, #4]
100019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100019f4:	2200      	movs	r2, #0
100019f6:	701a      	strb	r2, [r3, #0]

    Status = (uint32_t)DAVEApp_SUCCESS;
100019f8:	2300      	movs	r3, #0
100019fa:	61fb      	str	r3, [r7, #28]

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
100019fc:	69fb      	ldr	r3, [r7, #28]
}
100019fe:	1c18      	adds	r0, r3, #0
10001a00:	46bd      	mov	sp, r7
10001a02:	b009      	add	sp, #36	; 0x24
10001a04:	bd90      	pop	{r4, r7, pc}
10001a06:	46c0      	nop			; (mov r8, r8)
10001a08:	00000f0f 	.word	0x00000f0f

10001a0c <PWMSP001_Start>:

/*<<<DD_PWMSP001_API_3>>>*/
/* This function starts the app. 
 * This needs to be called even if external start is configured.*/
status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
{
10001a0c:	b590      	push	{r4, r7, lr}
10001a0e:	b085      	sub	sp, #20
10001a10:	af00      	add	r7, sp, #0
10001a12:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10001a14:	2301      	movs	r3, #1
10001a16:	60fb      	str	r3, [r7, #12]

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10001a18:	687b      	ldr	r3, [r7, #4]
10001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001a1c:	781b      	ldrb	r3, [r3, #0]
10001a1e:	2b01      	cmp	r3, #1
10001a20:	d005      	beq.n	10001a2e <PWMSP001_Start+0x22>
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
10001a22:	687b      	ldr	r3, [r7, #4]
10001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001a26:	781b      	ldrb	r3, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;

  do
  {
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10001a28:	2b03      	cmp	r3, #3
10001a2a:	d000      	beq.n	10001a2e <PWMSP001_Start+0x22>
10001a2c:	e09f      	b.n	10001b6e <PWMSP001_Start+0x162>
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
10001a2e:	687b      	ldr	r3, [r7, #4]
10001a30:	699a      	ldr	r2, [r3, #24]
10001a32:	23b0      	movs	r3, #176	; 0xb0
10001a34:	4951      	ldr	r1, [pc, #324]	; (10001b7c <PWMSP001_Start+0x170>)
10001a36:	50d1      	str	r1, [r2, r3]
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
10001a38:	687b      	ldr	r3, [r7, #4]
10001a3a:	695b      	ldr	r3, [r3, #20]
10001a3c:	687a      	ldr	r2, [r7, #4]
10001a3e:	6952      	ldr	r2, [r2, #20]
10001a40:	68d1      	ldr	r1, [r2, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
10001a42:	6878      	ldr	r0, [r7, #4]
10001a44:	2237      	movs	r2, #55	; 0x37
10001a46:	5c82      	ldrb	r2, [r0, r2]

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
10001a48:	2001      	movs	r0, #1
10001a4a:	1c04      	adds	r4, r0, #0
10001a4c:	4094      	lsls	r4, r2
10001a4e:	1c22      	adds	r2, r4, #0
    }

    HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
    
    /*<<<DD_PWMSP001_API_3_2>>>*/
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
10001a50:	430a      	orrs	r2, r1
10001a52:	60da      	str	r2, [r3, #12]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001a54:	687a      	ldr	r2, [r7, #4]
10001a56:	2320      	movs	r3, #32
10001a58:	5cd3      	ldrb	r3, [r2, r3]
10001a5a:	2b01      	cmp	r3, #1
10001a5c:	d10d      	bne.n	10001a7a <PWMSP001_Start+0x6e>
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
10001a5e:	687b      	ldr	r3, [r7, #4]
10001a60:	695b      	ldr	r3, [r3, #20]
10001a62:	687a      	ldr	r2, [r7, #4]
10001a64:	6952      	ldr	r2, [r2, #20]
10001a66:	68d1      	ldr	r1, [r2, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
10001a68:	6878      	ldr	r0, [r7, #4]
10001a6a:	2238      	movs	r2, #56	; 0x38
10001a6c:	5c82      	ldrb	r2, [r0, r2]
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
10001a6e:	2001      	movs	r0, #1
10001a70:	1c04      	adds	r4, r0, #0
10001a72:	4094      	lsls	r4, r2
10001a74:	1c22      	adds	r2, r4, #0
	HandlePtr->CC4yKernRegsPtr->GIDLC |=
		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->FirstSlice)) );
	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
	{
	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
10001a76:	430a      	orrs	r2, r1
10001a78:	60da      	str	r2, [r3, #12]
		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
			(uint32_t)HandlePtr->SecondSlice));
	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
	
    /*Set run bit of slices if external start is not configured*/
    if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
10001a7a:	687b      	ldr	r3, [r7, #4]
10001a7c:	7b9b      	ldrb	r3, [r3, #14]
10001a7e:	2b00      	cmp	r3, #0
10001a80:	d115      	bne.n	10001aae <PWMSP001_Start+0xa2>
    {
      HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
10001a82:	687b      	ldr	r3, [r7, #4]
10001a84:	699b      	ldr	r3, [r3, #24]
10001a86:	687a      	ldr	r2, [r7, #4]
10001a88:	6992      	ldr	r2, [r2, #24]
10001a8a:	68d2      	ldr	r2, [r2, #12]
10001a8c:	2101      	movs	r1, #1
10001a8e:	430a      	orrs	r2, r1
10001a90:	60da      	str	r2, [r3, #12]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001a92:	687a      	ldr	r2, [r7, #4]
10001a94:	2320      	movs	r3, #32
10001a96:	5cd3      	ldrb	r3, [r2, r3]
10001a98:	2b01      	cmp	r3, #1
10001a9a:	d161      	bne.n	10001b60 <PWMSP001_Start+0x154>
      {
        HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
10001a9c:	687b      	ldr	r3, [r7, #4]
10001a9e:	69db      	ldr	r3, [r3, #28]
10001aa0:	687a      	ldr	r2, [r7, #4]
10001aa2:	69d2      	ldr	r2, [r2, #28]
10001aa4:	68d2      	ldr	r2, [r2, #12]
10001aa6:	2101      	movs	r1, #1
10001aa8:	430a      	orrs	r2, r1
10001aaa:	60da      	str	r2, [r3, #12]
10001aac:	e058      	b.n	10001b60 <PWMSP001_Start+0x154>
      }
    }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
    else
    {
      /*<<<DD_PWMSP001_API_1_2>>>*/
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
10001aae:	687b      	ldr	r3, [r7, #4]
10001ab0:	7b9b      	ldrb	r3, [r3, #14]
10001ab2:	2b01      	cmp	r3, #1
10001ab4:	d125      	bne.n	10001b02 <PWMSP001_Start+0xf6>
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
10001ab6:	687b      	ldr	r3, [r7, #4]
10001ab8:	699b      	ldr	r3, [r3, #24]
10001aba:	687a      	ldr	r2, [r7, #4]
10001abc:	6992      	ldr	r2, [r2, #24]
10001abe:	6811      	ldr	r1, [r2, #0]
10001ac0:	4a2f      	ldr	r2, [pc, #188]	; (10001b80 <PWMSP001_Start+0x174>)
10001ac2:	400a      	ands	r2, r1
10001ac4:	601a      	str	r2, [r3, #0]
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
10001ac6:	687b      	ldr	r3, [r7, #4]
10001ac8:	699b      	ldr	r3, [r3, #24]
10001aca:	687a      	ldr	r2, [r7, #4]
10001acc:	6992      	ldr	r2, [r2, #24]
10001ace:	6852      	ldr	r2, [r2, #4]
10001ad0:	2103      	movs	r1, #3
10001ad2:	438a      	bics	r2, r1
10001ad4:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegsPtr->INS |=
10001ad6:	687b      	ldr	r3, [r7, #4]
10001ad8:	699b      	ldr	r3, [r3, #24]
10001ada:	687a      	ldr	r2, [r7, #4]
10001adc:	6992      	ldr	r2, [r2, #24]
10001ade:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
10001ae0:	6878      	ldr	r0, [r7, #4]
10001ae2:	2223      	movs	r2, #35	; 0x23
10001ae4:	5c82      	ldrb	r2, [r0, r2]
10001ae6:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
10001ae8:	22c0      	movs	r2, #192	; 0xc0
10001aea:	0292      	lsls	r2, r2, #10
10001aec:	4002      	ands	r2, r0
      if (HandlePtr->kExtStartTrig == (uint8_t)SET)
      {
        HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
        HandlePtr->CC4yRegsPtr->INS |=
10001aee:	430a      	orrs	r2, r1
10001af0:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	699b      	ldr	r3, [r3, #24]
10001af6:	687a      	ldr	r2, [r7, #4]
10001af8:	6992      	ldr	r2, [r2, #24]
10001afa:	6852      	ldr	r2, [r2, #4]
10001afc:	2101      	movs	r1, #1
10001afe:	430a      	orrs	r2, r1
10001b00:	605a      	str	r2, [r3, #4]
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
10001b02:	687b      	ldr	r3, [r7, #4]
10001b04:	7b9b      	ldrb	r3, [r3, #14]
10001b06:	2b01      	cmp	r3, #1
10001b08:	d12a      	bne.n	10001b60 <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001b0a:	687a      	ldr	r2, [r7, #4]
10001b0c:	2320      	movs	r3, #32
10001b0e:	5cd3      	ldrb	r3, [r2, r3]
                (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
            (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
      /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
      if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
10001b10:	2b01      	cmp	r3, #1
10001b12:	d125      	bne.n	10001b60 <PWMSP001_Start+0x154>
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
10001b14:	687b      	ldr	r3, [r7, #4]
10001b16:	69db      	ldr	r3, [r3, #28]
10001b18:	687a      	ldr	r2, [r7, #4]
10001b1a:	69d2      	ldr	r2, [r2, #28]
10001b1c:	6811      	ldr	r1, [r2, #0]
10001b1e:	4a18      	ldr	r2, [pc, #96]	; (10001b80 <PWMSP001_Start+0x174>)
10001b20:	400a      	ands	r2, r1
10001b22:	601a      	str	r2, [r3, #0]
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
10001b24:	687b      	ldr	r3, [r7, #4]
10001b26:	69db      	ldr	r3, [r3, #28]
10001b28:	687a      	ldr	r2, [r7, #4]
10001b2a:	69d2      	ldr	r2, [r2, #28]
10001b2c:	6852      	ldr	r2, [r2, #4]
10001b2e:	2103      	movs	r1, #3
10001b30:	438a      	bics	r2, r1
10001b32:	605a      	str	r2, [r3, #4]
        HandlePtr->CC4yRegs1Ptr->INS |=
10001b34:	687b      	ldr	r3, [r7, #4]
10001b36:	69db      	ldr	r3, [r3, #28]
10001b38:	687a      	ldr	r2, [r7, #4]
10001b3a:	69d2      	ldr	r2, [r2, #28]
10001b3c:	6811      	ldr	r1, [r2, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
10001b3e:	6878      	ldr	r0, [r7, #4]
10001b40:	2223      	movs	r2, #35	; 0x23
10001b42:	5c82      	ldrb	r2, [r0, r2]
10001b44:	0410      	lsls	r0, r2, #16
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
10001b46:	22c0      	movs	r2, #192	; 0xc0
10001b48:	0292      	lsls	r2, r2, #10
10001b4a:	4002      	ands	r2, r0
          (HandlePtr->kTimerConcatenation == (uint8_t)SET)
      )
      {
        HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk);
        HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
        HandlePtr->CC4yRegs1Ptr->INS |=
10001b4c:	430a      	orrs	r2, r1
10001b4e:	601a      	str	r2, [r3, #0]
            ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
                    (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
        HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
10001b50:	687b      	ldr	r3, [r7, #4]
10001b52:	69db      	ldr	r3, [r3, #28]
10001b54:	687a      	ldr	r2, [r7, #4]
10001b56:	69d2      	ldr	r2, [r2, #28]
10001b58:	6852      	ldr	r2, [r2, #4]
10001b5a:	2101      	movs	r1, #1
10001b5c:	430a      	orrs	r2, r1
10001b5e:	605a      	str	r2, [r3, #4]
		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
      }/*End of if (HandlePtr->kExtStartTrig == SET)*/
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
10001b60:	687b      	ldr	r3, [r7, #4]
10001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001b64:	2202      	movs	r2, #2
10001b66:	701a      	strb	r2, [r3, #0]
    Status = (uint32_t)DAVEApp_SUCCESS;
10001b68:	2300      	movs	r3, #0
10001b6a:	60fb      	str	r3, [r7, #12]
10001b6c:	e000      	b.n	10001b70 <PWMSP001_Start+0x164>
    /*<<<DD_PWMSP001_API_3_1>>>*/
    if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
        (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
    {
      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
      break;
10001b6e:	46c0      	nop			; (mov r8, r8)
    }

    HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
    Status = (uint32_t)DAVEApp_SUCCESS;
  } while (0);
  return Status;
10001b70:	68fb      	ldr	r3, [r7, #12]
}
10001b72:	1c18      	adds	r0, r3, #0
10001b74:	46bd      	mov	sp, r7
10001b76:	b005      	add	sp, #20
10001b78:	bd90      	pop	{r4, r7, pc}
10001b7a:	46c0      	nop			; (mov r8, r8)
10001b7c:	00000f0f 	.word	0x00000f0f
10001b80:	f9fcffff 	.word	0xf9fcffff

10001b84 <PWMSP001_Stop>:

/*<<<DD_PWMSP001_API_4>>>*/
/* This function stops the app */
status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
{
10001b84:	b580      	push	{r7, lr}
10001b86:	b086      	sub	sp, #24
10001b88:	af00      	add	r7, sp, #0
10001b8a:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10001b8c:	2301      	movs	r3, #1
10001b8e:	617b      	str	r3, [r7, #20]
  uint32_t Temp2;
  
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
10001b90:	687b      	ldr	r3, [r7, #4]
10001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001b94:	781b      	ldrb	r3, [r3, #0]
10001b96:	2b02      	cmp	r3, #2
10001b98:	d139      	bne.n	10001c0e <PWMSP001_Stop+0x8a>
    {
      break;
    }
    else
    {
      Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
10001b9a:	687a      	ldr	r2, [r7, #4]
10001b9c:	2337      	movs	r3, #55	; 0x37
10001b9e:	5cd3      	ldrb	r3, [r2, r3]
10001ba0:	613b      	str	r3, [r7, #16]
      Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
10001ba2:	2380      	movs	r3, #128	; 0x80
10001ba4:	009b      	lsls	r3, r3, #2
10001ba6:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
10001ba8:	687b      	ldr	r3, [r7, #4]
10001baa:	699b      	ldr	r3, [r3, #24]
10001bac:	2207      	movs	r2, #7
10001bae:	611a      	str	r2, [r3, #16]
      HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
10001bb0:	687b      	ldr	r3, [r7, #4]
10001bb2:	695b      	ldr	r3, [r3, #20]
10001bb4:	687a      	ldr	r2, [r7, #4]
10001bb6:	6952      	ldr	r2, [r2, #20]
10001bb8:	6891      	ldr	r1, [r2, #8]
10001bba:	693a      	ldr	r2, [r7, #16]
10001bbc:	2001      	movs	r0, #1
10001bbe:	4090      	lsls	r0, r2
10001bc0:	68fa      	ldr	r2, [r7, #12]
10001bc2:	4302      	orrs	r2, r0
10001bc4:	430a      	orrs	r2, r1
10001bc6:	609a      	str	r2, [r3, #8]

      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001bc8:	687a      	ldr	r2, [r7, #4]
10001bca:	2320      	movs	r3, #32
10001bcc:	5cd3      	ldrb	r3, [r2, r3]
10001bce:	2b01      	cmp	r3, #1
10001bd0:	d116      	bne.n	10001c00 <PWMSP001_Stop+0x7c>
      {
        HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
10001bd2:	687b      	ldr	r3, [r7, #4]
10001bd4:	69db      	ldr	r3, [r3, #28]
10001bd6:	2207      	movs	r2, #7
10001bd8:	611a      	str	r2, [r3, #16]
        Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
10001bda:	687a      	ldr	r2, [r7, #4]
10001bdc:	2338      	movs	r3, #56	; 0x38
10001bde:	5cd3      	ldrb	r3, [r2, r3]
10001be0:	613b      	str	r3, [r7, #16]
        Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
10001be2:	2380      	movs	r3, #128	; 0x80
10001be4:	009b      	lsls	r3, r3, #2
10001be6:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
10001be8:	687b      	ldr	r3, [r7, #4]
10001bea:	695b      	ldr	r3, [r3, #20]
10001bec:	687a      	ldr	r2, [r7, #4]
10001bee:	6952      	ldr	r2, [r2, #20]
10001bf0:	6891      	ldr	r1, [r2, #8]
10001bf2:	693a      	ldr	r2, [r7, #16]
10001bf4:	2001      	movs	r0, #1
10001bf6:	4090      	lsls	r0, r2
10001bf8:	68fa      	ldr	r2, [r7, #12]
10001bfa:	4302      	orrs	r2, r0
10001bfc:	430a      	orrs	r2, r1
10001bfe:	609a      	str	r2, [r3, #8]
      }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/

      HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
10001c00:	687b      	ldr	r3, [r7, #4]
10001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001c04:	2203      	movs	r2, #3
10001c06:	701a      	strb	r2, [r3, #0]
      Status = (uint32_t)DAVEApp_SUCCESS;
10001c08:	2300      	movs	r3, #0
10001c0a:	617b      	str	r3, [r7, #20]
10001c0c:	e000      	b.n	10001c10 <PWMSP001_Stop+0x8c>
  do
  {
    /*<<<DD_PWMSP001_API_4_1>>>*/
    if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
    {
      break;
10001c0e:	46c0      	nop			; (mov r8, r8)

  if (Status != (uint32_t)DAVEApp_SUCCESS)
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  return Status;
10001c10:	697b      	ldr	r3, [r7, #20]
}
10001c12:	1c18      	adds	r0, r3, #0
10001c14:	46bd      	mov	sp, r7
10001c16:	b006      	add	sp, #24
10001c18:	bd80      	pop	{r7, pc}
10001c1a:	46c0      	nop			; (mov r8, r8)

10001c1c <PWMSP001_SetCompare>:
status_t PWMSP001_SetCompare
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Compare
)
{
10001c1c:	b580      	push	{r7, lr}
10001c1e:	b084      	sub	sp, #16
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
10001c24:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10001c26:	2301      	movs	r3, #1
10001c28:	60fb      	str	r3, [r7, #12]
  uint32_t period;

  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10001c2a:	687a      	ldr	r2, [r7, #4]
10001c2c:	2320      	movs	r3, #32
10001c2e:	5cd3      	ldrb	r3, [r2, r3]
10001c30:	2b01      	cmp	r3, #1
10001c32:	d109      	bne.n	10001c48 <PWMSP001_SetCompare+0x2c>
	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr->PRS);
10001c34:	687b      	ldr	r3, [r7, #4]
10001c36:	69db      	ldr	r3, [r3, #28]
10001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001c3a:	041a      	lsls	r2, r3, #16
10001c3c:	687b      	ldr	r3, [r7, #4]
10001c3e:	699b      	ldr	r3, [r3, #24]
10001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001c42:	4313      	orrs	r3, r2
10001c44:	60bb      	str	r3, [r7, #8]
10001c46:	e003      	b.n	10001c50 <PWMSP001_SetCompare+0x34>
  else
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	699b      	ldr	r3, [r3, #24]
10001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001c4e:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10001c50:	687b      	ldr	r3, [r7, #4]
10001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001c54:	781b      	ldrb	r3, [r3, #0]
10001c56:	2b00      	cmp	r3, #0
10001c58:	d01c      	beq.n	10001c94 <PWMSP001_SetCompare+0x78>
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10001c5a:	687b      	ldr	r3, [r7, #4]
10001c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10001c5e:	683b      	ldr	r3, [r7, #0]
10001c60:	429a      	cmp	r2, r3
10001c62:	d207      	bcs.n	10001c74 <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
10001c64:	687a      	ldr	r2, [r7, #4]
10001c66:	2320      	movs	r3, #32
10001c68:	5cd3      	ldrb	r3, [r2, r3]
	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;

  /*<<<DD_PWMSP001_API_5_1>>>*/
  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
  {
    if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10001c6a:	2b00      	cmp	r3, #0
10001c6c:	d102      	bne.n	10001c74 <PWMSP001_SetCompare+0x58>
        (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10001c6e:	2302      	movs	r3, #2
10001c70:	60fb      	str	r3, [r7, #12]
10001c72:	e00f      	b.n	10001c94 <PWMSP001_SetCompare+0x78>
    }
    else
    {
      /*if compare value is greater or equal to the period value, output should be with 0% dutycycle.
	  Since setting exact period value will create the spikes,we are adding 1 and setting to the register*/
	  if (Compare >= (uint32_t)period)
10001c74:	683a      	ldr	r2, [r7, #0]
10001c76:	68bb      	ldr	r3, [r7, #8]
10001c78:	429a      	cmp	r2, r3
10001c7a:	d302      	bcc.n	10001c82 <PWMSP001_SetCompare+0x66>
	  {
		  Compare = (uint32_t)period + 1U;
10001c7c:	68bb      	ldr	r3, [r7, #8]
10001c7e:	3301      	adds	r3, #1
10001c80:	603b      	str	r3, [r7, #0]
	  }
      /* Call function as per the configured mode */
      HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
10001c82:	687b      	ldr	r3, [r7, #4]
10001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001c86:	6879      	ldr	r1, [r7, #4]
10001c88:	683a      	ldr	r2, [r7, #0]
10001c8a:	1c08      	adds	r0, r1, #0
10001c8c:	1c11      	adds	r1, r2, #0
10001c8e:	4798      	blx	r3
      Status = (uint32_t)DAVEApp_SUCCESS;
10001c90:	2300      	movs	r3, #0
10001c92:	60fb      	str	r3, [r7, #12]
    }
  }
  return Status;
10001c94:	68fb      	ldr	r3, [r7, #12]
}
10001c96:	1c18      	adds	r0, r3, #0
10001c98:	46bd      	mov	sp, r7
10001c9a:	b004      	add	sp, #16
10001c9c:	bd80      	pop	{r7, pc}
10001c9e:	46c0      	nop			; (mov r8, r8)

10001ca0 <PWMSP001_lSetCompareEdgeAlign>:
void PWMSP001_lSetCompareEdgeAlign
(
    void* Handle,
    uint32_t Compare
)
{
10001ca0:	b590      	push	{r4, r7, lr}
10001ca2:	b087      	sub	sp, #28
10001ca4:	af00      	add	r7, sp, #0
10001ca6:	6078      	str	r0, [r7, #4]
10001ca8:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001caa:	687b      	ldr	r3, [r7, #4]
10001cac:	617b      	str	r3, [r7, #20]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
10001cae:	697b      	ldr	r3, [r7, #20]
10001cb0:	699b      	ldr	r3, [r3, #24]
10001cb2:	683a      	ldr	r2, [r7, #0]
10001cb4:	0412      	lsls	r2, r2, #16
10001cb6:	0c12      	lsrs	r2, r2, #16
10001cb8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
10001cba:	697a      	ldr	r2, [r7, #20]
10001cbc:	2337      	movs	r3, #55	; 0x37
10001cbe:	5cd3      	ldrb	r3, [r2, r3]
10001cc0:	009b      	lsls	r3, r3, #2
10001cc2:	613b      	str	r3, [r7, #16]
  Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
10001cc4:	693b      	ldr	r3, [r7, #16]
10001cc6:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
10001cc8:	697b      	ldr	r3, [r7, #20]
10001cca:	695b      	ldr	r3, [r3, #20]
10001ccc:	697a      	ldr	r2, [r7, #20]
10001cce:	6952      	ldr	r2, [r2, #20]
10001cd0:	6911      	ldr	r1, [r2, #16]
10001cd2:	68fa      	ldr	r2, [r7, #12]
10001cd4:	2001      	movs	r0, #1
10001cd6:	1c04      	adds	r4, r0, #0
10001cd8:	4094      	lsls	r4, r2
10001cda:	1c22      	adds	r2, r4, #0
10001cdc:	430a      	orrs	r2, r1
10001cde:	611a      	str	r2, [r3, #16]
}
10001ce0:	46bd      	mov	sp, r7
10001ce2:	b007      	add	sp, #28
10001ce4:	bd90      	pop	{r4, r7, pc}
10001ce6:	46c0      	nop			; (mov r8, r8)

10001ce8 <PWMSP001_lSetCompareEdgeAlignTimerConcat>:
void PWMSP001_lSetCompareEdgeAlignTimerConcat
(
    void* Handle,
    uint32_t Compare
)
{
10001ce8:	b5b0      	push	{r4, r5, r7, lr}
10001cea:	b088      	sub	sp, #32
10001cec:	af00      	add	r7, sp, #0
10001cee:	6078      	str	r0, [r7, #4]
10001cf0:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = 0x00U;
10001cf2:	2300      	movs	r3, #0
10001cf4:	61fb      	str	r3, [r7, #28]
  uint32_t SecondSliceCompareVal = 0x00U;
10001cf6:	2300      	movs	r3, #0
10001cf8:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001cfa:	687b      	ldr	r3, [r7, #4]
10001cfc:	617b      	str	r3, [r7, #20]
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
10001cfe:	697b      	ldr	r3, [r7, #20]
10001d00:	699b      	ldr	r3, [r3, #24]
10001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001d04:	b29b      	uxth	r3, r3
   * compare register of first slice and quotient is written in compare
   * register of second slice.
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
10001d06:	683a      	ldr	r2, [r7, #0]
10001d08:	1c10      	adds	r0, r2, #0
10001d0a:	1c19      	adds	r1, r3, #0
10001d0c:	f001 fa3c 	bl	10003188 <__aeabi_uidivmod>
10001d10:	1c0b      	adds	r3, r1, #0
10001d12:	61fb      	str	r3, [r7, #28]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
10001d14:	697b      	ldr	r3, [r7, #20]
10001d16:	699b      	ldr	r3, [r3, #24]
10001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001d1a:	b29b      	uxth	r3, r3
   * This is done to achieve compare register value of first slice
   * to be less than period register value.
   */
  FirstSliceCompareVal = (uint32_t)Compare % \
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  SecondSliceCompareVal = (uint32_t)Compare /
10001d1c:	6838      	ldr	r0, [r7, #0]
10001d1e:	1c19      	adds	r1, r3, #0
10001d20:	f001 f9ee 	bl	10003100 <__aeabi_uidiv>
10001d24:	1c03      	adds	r3, r0, #0
10001d26:	61bb      	str	r3, [r7, #24]
      (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
  
  HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
10001d28:	697b      	ldr	r3, [r7, #20]
10001d2a:	699b      	ldr	r3, [r3, #24]
10001d2c:	69fa      	ldr	r2, [r7, #28]
10001d2e:	0412      	lsls	r2, r2, #16
10001d30:	0c12      	lsrs	r2, r2, #16
10001d32:	63da      	str	r2, [r3, #60]	; 0x3c
  HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
10001d34:	697b      	ldr	r3, [r7, #20]
10001d36:	69db      	ldr	r3, [r3, #28]
10001d38:	69ba      	ldr	r2, [r7, #24]
10001d3a:	0412      	lsls	r2, r2, #16
10001d3c:	0c12      	lsrs	r2, r2, #16
10001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
10001d40:	697a      	ldr	r2, [r7, #20]
10001d42:	2338      	movs	r3, #56	; 0x38
10001d44:	5cd3      	ldrb	r3, [r2, r3]
10001d46:	009b      	lsls	r3, r3, #2
10001d48:	613b      	str	r3, [r7, #16]
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10001d4a:	697a      	ldr	r2, [r7, #20]
10001d4c:	2337      	movs	r3, #55	; 0x37
10001d4e:	5cd3      	ldrb	r3, [r2, r3]
10001d50:	009b      	lsls	r3, r3, #2
10001d52:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Temp1));
10001d54:	697b      	ldr	r3, [r7, #20]
10001d56:	695b      	ldr	r3, [r3, #20]
10001d58:	697a      	ldr	r2, [r7, #20]
10001d5a:	6952      	ldr	r2, [r2, #20]
10001d5c:	6911      	ldr	r1, [r2, #16]
10001d5e:	68fa      	ldr	r2, [r7, #12]
10001d60:	2001      	movs	r0, #1
10001d62:	4090      	lsls	r0, r2
10001d64:	693a      	ldr	r2, [r7, #16]
10001d66:	2401      	movs	r4, #1
10001d68:	1c25      	adds	r5, r4, #0
10001d6a:	4095      	lsls	r5, r2
10001d6c:	1c2a      	adds	r2, r5, #0
10001d6e:	4302      	orrs	r2, r0
10001d70:	430a      	orrs	r2, r1
10001d72:	611a      	str	r2, [r3, #16]
}
10001d74:	46bd      	mov	sp, r7
10001d76:	b008      	add	sp, #32
10001d78:	bdb0      	pop	{r4, r5, r7, pc}
10001d7a:	46c0      	nop			; (mov r8, r8)

10001d7c <PWMSP001_lSetCompareCenterAlign>:
void PWMSP001_lSetCompareCenterAlign
(
    void* Handle,
    uint32_t Compare
)
{
10001d7c:	b590      	push	{r4, r7, lr}
10001d7e:	b085      	sub	sp, #20
10001d80:	af00      	add	r7, sp, #0
10001d82:	6078      	str	r0, [r7, #4]
10001d84:	6039      	str	r1, [r7, #0]
  uint32_t Temp1;
  /*<<<DD_PWMSP001_API_5_3>>>*/
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
10001d8a:	68fb      	ldr	r3, [r7, #12]
10001d8c:	699b      	ldr	r3, [r3, #24]
10001d8e:	683a      	ldr	r2, [r7, #0]
10001d90:	0412      	lsls	r2, r2, #16
10001d92:	0c12      	lsrs	r2, r2, #16
10001d94:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Request shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
10001d96:	68fa      	ldr	r2, [r7, #12]
10001d98:	2337      	movs	r3, #55	; 0x37
10001d9a:	5cd3      	ldrb	r3, [r2, r3]
10001d9c:	009b      	lsls	r3, r3, #2
10001d9e:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
10001da0:	68fb      	ldr	r3, [r7, #12]
10001da2:	695b      	ldr	r3, [r3, #20]
10001da4:	68fa      	ldr	r2, [r7, #12]
10001da6:	6952      	ldr	r2, [r2, #20]
10001da8:	6911      	ldr	r1, [r2, #16]
10001daa:	68ba      	ldr	r2, [r7, #8]
10001dac:	2001      	movs	r0, #1
10001dae:	1c04      	adds	r4, r0, #0
10001db0:	4094      	lsls	r4, r2
10001db2:	1c22      	adds	r2, r4, #0
10001db4:	430a      	orrs	r2, r1
10001db6:	611a      	str	r2, [r3, #16]
}
10001db8:	46bd      	mov	sp, r7
10001dba:	b005      	add	sp, #20
10001dbc:	bd90      	pop	{r4, r7, pc}
10001dbe:	46c0      	nop			; (mov r8, r8)

10001dc0 <PWMSP001_SetDutyCycle>:
status_t PWMSP001_SetDutyCycle
(
    const PWMSP001_HandleType* HandlePtr,
    float Duty
)
{
10001dc0:	b580      	push	{r7, lr}
10001dc2:	b084      	sub	sp, #16
10001dc4:	af00      	add	r7, sp, #0
10001dc6:	6078      	str	r0, [r7, #4]
10001dc8:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10001dca:	2301      	movs	r3, #1
10001dcc:	60fb      	str	r3, [r7, #12]

  if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
10001dce:	687b      	ldr	r3, [r7, #4]
10001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001dd2:	781b      	ldrb	r3, [r3, #0]
10001dd4:	2b00      	cmp	r3, #0
10001dd6:	d019      	beq.n	10001e0c <PWMSP001_SetDutyCycle+0x4c>
  {
  if((Duty > (float)100) || ((float)Duty < (float)0))
10001dd8:	6838      	ldr	r0, [r7, #0]
10001dda:	490f      	ldr	r1, [pc, #60]	; (10001e18 <PWMSP001_SetDutyCycle+0x58>)
10001ddc:	f001 fa66 	bl	100032ac <__aeabi_fcmpgt>
10001de0:	1c03      	adds	r3, r0, #0
10001de2:	2b00      	cmp	r3, #0
10001de4:	d106      	bne.n	10001df4 <PWMSP001_SetDutyCycle+0x34>
10001de6:	6838      	ldr	r0, [r7, #0]
10001de8:	2100      	movs	r1, #0
10001dea:	f001 fa4b 	bl	10003284 <__aeabi_fcmplt>
10001dee:	1c03      	adds	r3, r0, #0
10001df0:	2b00      	cmp	r3, #0
10001df2:	d002      	beq.n	10001dfa <PWMSP001_SetDutyCycle+0x3a>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10001df4:	2302      	movs	r3, #2
10001df6:	60fb      	str	r3, [r7, #12]
10001df8:	e008      	b.n	10001e0c <PWMSP001_SetDutyCycle+0x4c>
  }
  else
  {
    /* Call the function as per configured mode */
    HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
10001dfa:	687b      	ldr	r3, [r7, #4]
10001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10001dfe:	6879      	ldr	r1, [r7, #4]
10001e00:	683a      	ldr	r2, [r7, #0]
10001e02:	1c08      	adds	r0, r1, #0
10001e04:	1c11      	adds	r1, r2, #0
10001e06:	4798      	blx	r3
    Status = (uint32_t)DAVEApp_SUCCESS;
10001e08:	2300      	movs	r3, #0
10001e0a:	60fb      	str	r3, [r7, #12]
  }
  }
  return (Status);
10001e0c:	68fb      	ldr	r3, [r7, #12]
}
10001e0e:	1c18      	adds	r0, r3, #0
10001e10:	46bd      	mov	sp, r7
10001e12:	b004      	add	sp, #16
10001e14:	bd80      	pop	{r7, pc}
10001e16:	46c0      	nop			; (mov r8, r8)
10001e18:	42c80000 	.word	0x42c80000

10001e1c <PWMSP001_lSetDutyEdgeAlign>:
void PWMSP001_lSetDutyEdgeAlign
(
    void* Handle,
    float Duty
)
{
10001e1c:	b590      	push	{r4, r7, lr}
10001e1e:	b089      	sub	sp, #36	; 0x24
10001e20:	af00      	add	r7, sp, #0
10001e22:	6078      	str	r0, [r7, #4]
10001e24:	6039      	str	r1, [r7, #0]
  uint32_t FirstSliceCompareVal = (uint32_t)0;
10001e26:	2300      	movs	r3, #0
10001e28:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001e2a:	687b      	ldr	r3, [r7, #4]
10001e2c:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
10001e2e:	683b      	ldr	r3, [r7, #0]
10001e30:	617b      	str	r3, [r7, #20]
  
  /*<<<DD_PWMSP001_API_15_3>>>*/
  
  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
10001e32:	481c      	ldr	r0, [pc, #112]	; (10001ea4 <PWMSP001_lSetDutyEdgeAlign+0x88>)
10001e34:	6979      	ldr	r1, [r7, #20]
10001e36:	f001 fd87 	bl	10003948 <__aeabi_fsub>
10001e3a:	1c03      	adds	r3, r0, #0
10001e3c:	1c18      	adds	r0, r3, #0
10001e3e:	4919      	ldr	r1, [pc, #100]	; (10001ea4 <PWMSP001_lSetDutyEdgeAlign+0x88>)
10001e40:	f001 fa60 	bl	10003304 <__aeabi_fdiv>
10001e44:	1c03      	adds	r3, r0, #0
10001e46:	617b      	str	r3, [r7, #20]
  fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
10001e48:	69bb      	ldr	r3, [r7, #24]
10001e4a:	699b      	ldr	r3, [r3, #24]
10001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001e4e:	3301      	adds	r3, #1
10001e50:	1c18      	adds	r0, r3, #0
10001e52:	f001 ff73 	bl	10003d3c <__aeabi_ui2f>
10001e56:	1c03      	adds	r3, r0, #0
10001e58:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10001e5a:	6938      	ldr	r0, [r7, #16]
10001e5c:	6979      	ldr	r1, [r7, #20]
10001e5e:	f001 fc43 	bl	100036e8 <__aeabi_fmul>
10001e62:	1c03      	adds	r3, r0, #0
10001e64:	1c18      	adds	r0, r3, #0
10001e66:	f001 fa35 	bl	100032d4 <__aeabi_f2uiz>
10001e6a:	1c03      	adds	r3, r0, #0
10001e6c:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
10001e6e:	69bb      	ldr	r3, [r7, #24]
10001e70:	699b      	ldr	r3, [r3, #24]
10001e72:	69fa      	ldr	r2, [r7, #28]
10001e74:	0412      	lsls	r2, r2, #16
10001e76:	0c12      	lsrs	r2, r2, #16
10001e78:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /*Shadow transfer */
  Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
10001e7a:	69ba      	ldr	r2, [r7, #24]
10001e7c:	2337      	movs	r3, #55	; 0x37
10001e7e:	5cd3      	ldrb	r3, [r2, r3]
10001e80:	009b      	lsls	r3, r3, #2
10001e82:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
10001e84:	69bb      	ldr	r3, [r7, #24]
10001e86:	695b      	ldr	r3, [r3, #20]
10001e88:	69ba      	ldr	r2, [r7, #24]
10001e8a:	6952      	ldr	r2, [r2, #20]
10001e8c:	6911      	ldr	r1, [r2, #16]
10001e8e:	68fa      	ldr	r2, [r7, #12]
10001e90:	2001      	movs	r0, #1
10001e92:	1c04      	adds	r4, r0, #0
10001e94:	4094      	lsls	r4, r2
10001e96:	1c22      	adds	r2, r4, #0
10001e98:	430a      	orrs	r2, r1
10001e9a:	611a      	str	r2, [r3, #16]
  /*Update dynamic handle */
}
10001e9c:	46bd      	mov	sp, r7
10001e9e:	b009      	add	sp, #36	; 0x24
10001ea0:	bd90      	pop	{r4, r7, pc}
10001ea2:	46c0      	nop			; (mov r8, r8)
10001ea4:	42c80000 	.word	0x42c80000

10001ea8 <PWMSP001_lSetDutyEdgeAlignTimerConcat>:
void PWMSP001_lSetDutyEdgeAlignTimerConcat
(
    void* Handle,
    float Duty
)
{
10001ea8:	b5b0      	push	{r4, r5, r7, lr}
10001eaa:	b08a      	sub	sp, #40	; 0x28
10001eac:	af00      	add	r7, sp, #0
10001eae:	6078      	str	r0, [r7, #4]
10001eb0:	6039      	str	r1, [r7, #0]
  uint32_t Compare = (uint32_t)0;
10001eb2:	2300      	movs	r3, #0
10001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FirstSliceCompareVal = (uint32_t)0;
10001eb6:	2300      	movs	r3, #0
10001eb8:	623b      	str	r3, [r7, #32]
  uint32_t SecondSliceCompareVal = (uint32_t)0;
10001eba:	2300      	movs	r3, #0
10001ebc:	61fb      	str	r3, [r7, #28]
  uint32_t Temp2;
  uint32_t Temp3;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001ebe:	687b      	ldr	r3, [r7, #4]
10001ec0:	61bb      	str	r3, [r7, #24]
  
  fDuty = Duty;
10001ec2:	683b      	ldr	r3, [r7, #0]
10001ec4:	617b      	str	r3, [r7, #20]
  /*<<<DD_PWMSP001_API_15_4>>>*/
  /* Find the compare register value from the duty cycle and period register value */
  Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
10001ec6:	69bb      	ldr	r3, [r7, #24]
10001ec8:	69db      	ldr	r3, [r3, #28]
10001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001ecc:	3301      	adds	r3, #1
10001ece:	627b      	str	r3, [r7, #36]	; 0x24
  Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
10001ed0:	69bb      	ldr	r3, [r7, #24]
10001ed2:	699b      	ldr	r3, [r3, #24]
10001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001ed6:	041b      	lsls	r3, r3, #16
10001ed8:	0c1b      	lsrs	r3, r3, #16
10001eda:	1c5a      	adds	r2, r3, #1
10001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001ede:	4353      	muls	r3, r2
10001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  Compare +=  (uint32_t)1;
10001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001ee4:	3301      	adds	r3, #1
10001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
10001ee8:	482c      	ldr	r0, [pc, #176]	; (10001f9c <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
10001eea:	6979      	ldr	r1, [r7, #20]
10001eec:	f001 fd2c 	bl	10003948 <__aeabi_fsub>
10001ef0:	1c03      	adds	r3, r0, #0
10001ef2:	1c18      	adds	r0, r3, #0
10001ef4:	4929      	ldr	r1, [pc, #164]	; (10001f9c <PWMSP001_lSetDutyEdgeAlignTimerConcat+0xf4>)
10001ef6:	f001 fa05 	bl	10003304 <__aeabi_fdiv>
10001efa:	1c03      	adds	r3, r0, #0
10001efc:	617b      	str	r3, [r7, #20]
  fPRS = (float)(Compare);
10001efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
10001f00:	f001 ff1c 	bl	10003d3c <__aeabi_ui2f>
10001f04:	1c03      	adds	r3, r0, #0
10001f06:	613b      	str	r3, [r7, #16]
  Compare = (uint32_t)( fPRS * fDuty);
10001f08:	6938      	ldr	r0, [r7, #16]
10001f0a:	6979      	ldr	r1, [r7, #20]
10001f0c:	f001 fbec 	bl	100036e8 <__aeabi_fmul>
10001f10:	1c03      	adds	r3, r0, #0
10001f12:	1c18      	adds	r0, r3, #0
10001f14:	f001 f9de 	bl	100032d4 <__aeabi_f2uiz>
10001f18:	1c03      	adds	r3, r0, #0
10001f1a:	627b      	str	r3, [r7, #36]	; 0x24

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
10001f1c:	69bb      	ldr	r3, [r7, #24]
10001f1e:	699b      	ldr	r3, [r3, #24]
10001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001f22:	041b      	lsls	r3, r3, #16
10001f24:	0c1b      	lsrs	r3, r3, #16
  
  fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
  fPRS = (float)(Compare);
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
10001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10001f28:	1c10      	adds	r0, r2, #0
10001f2a:	1c19      	adds	r1, r3, #0
10001f2c:	f001 f92c 	bl	10003188 <__aeabi_uidivmod>
10001f30:	1c0b      	adds	r3, r1, #0
10001f32:	623b      	str	r3, [r7, #32]
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
10001f34:	69bb      	ldr	r3, [r7, #24]
10001f36:	699b      	ldr	r3, [r3, #24]
10001f38:	6a3a      	ldr	r2, [r7, #32]
10001f3a:	0412      	lsls	r2, r2, #16
10001f3c:	0c12      	lsrs	r2, r2, #16
10001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  SecondSliceCompareVal = (uint32_t)
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
10001f40:	69bb      	ldr	r3, [r7, #24]
10001f42:	699b      	ldr	r3, [r3, #24]
10001f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001f46:	041b      	lsls	r3, r3, #16
10001f48:	0c1b      	lsrs	r3, r3, #16
  Compare = (uint32_t)( fPRS * fDuty);

  FirstSliceCompareVal =(uint32_t)
                    ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
  SecondSliceCompareVal = (uint32_t)
10001f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
10001f4c:	1c19      	adds	r1, r3, #0
10001f4e:	f001 f8d7 	bl	10003100 <__aeabi_uidiv>
10001f52:	1c03      	adds	r3, r0, #0
10001f54:	61fb      	str	r3, [r7, #28]
                    ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU)));
  HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
10001f56:	69bb      	ldr	r3, [r7, #24]
10001f58:	69db      	ldr	r3, [r3, #28]
10001f5a:	69fa      	ldr	r2, [r7, #28]
10001f5c:	0412      	lsls	r2, r2, #16
10001f5e:	0c12      	lsrs	r2, r2, #16
10001f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /** shadow transfer */
  Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10001f62:	69ba      	ldr	r2, [r7, #24]
10001f64:	2337      	movs	r3, #55	; 0x37
10001f66:	5cd3      	ldrb	r3, [r2, r3]
10001f68:	009b      	lsls	r3, r3, #2
10001f6a:	60fb      	str	r3, [r7, #12]
  Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
10001f6c:	69ba      	ldr	r2, [r7, #24]
10001f6e:	2338      	movs	r3, #56	; 0x38
10001f70:	5cd3      	ldrb	r3, [r2, r3]
10001f72:	009b      	lsls	r3, r3, #2
10001f74:	60bb      	str	r3, [r7, #8]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 << (uint32_t)Temp3));
10001f76:	69bb      	ldr	r3, [r7, #24]
10001f78:	695b      	ldr	r3, [r3, #20]
10001f7a:	69ba      	ldr	r2, [r7, #24]
10001f7c:	6952      	ldr	r2, [r2, #20]
10001f7e:	6911      	ldr	r1, [r2, #16]
10001f80:	68fa      	ldr	r2, [r7, #12]
10001f82:	2001      	movs	r0, #1
10001f84:	4090      	lsls	r0, r2
10001f86:	68ba      	ldr	r2, [r7, #8]
10001f88:	2401      	movs	r4, #1
10001f8a:	1c25      	adds	r5, r4, #0
10001f8c:	4095      	lsls	r5, r2
10001f8e:	1c2a      	adds	r2, r5, #0
10001f90:	4302      	orrs	r2, r0
10001f92:	430a      	orrs	r2, r1
10001f94:	611a      	str	r2, [r3, #16]
}
10001f96:	46bd      	mov	sp, r7
10001f98:	b00a      	add	sp, #40	; 0x28
10001f9a:	bdb0      	pop	{r4, r5, r7, pc}
10001f9c:	42c80000 	.word	0x42c80000

10001fa0 <PWMSP001_lSetDutyCenterAlign>:
void PWMSP001_lSetDutyCenterAlign
(
    void* Handle,
    float Duty
)
{
10001fa0:	b590      	push	{r4, r7, lr}
10001fa2:	b089      	sub	sp, #36	; 0x24
10001fa4:	af00      	add	r7, sp, #0
10001fa6:	6078      	str	r0, [r7, #4]
10001fa8:	6039      	str	r1, [r7, #0]
  /*<<<DD_PWMSP001_API_15_5>>>*/
  uint32_t FirstSliceCompareVal = (uint32_t)0x00;
10001faa:	2300      	movs	r3, #0
10001fac:	61fb      	str	r3, [r7, #28]
  uint32_t Temp1;
  float fDuty, fPRS ;
  PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
10001fae:	687b      	ldr	r3, [r7, #4]
10001fb0:	61bb      	str	r3, [r7, #24]
  fDuty = Duty;
10001fb2:	683b      	ldr	r3, [r7, #0]
10001fb4:	617b      	str	r3, [r7, #20]

  fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
10001fb6:	481b      	ldr	r0, [pc, #108]	; (10002024 <PWMSP001_lSetDutyCenterAlign+0x84>)
10001fb8:	6979      	ldr	r1, [r7, #20]
10001fba:	f001 fcc5 	bl	10003948 <__aeabi_fsub>
10001fbe:	1c03      	adds	r3, r0, #0
10001fc0:	1c18      	adds	r0, r3, #0
10001fc2:	4918      	ldr	r1, [pc, #96]	; (10002024 <PWMSP001_lSetDutyCenterAlign+0x84>)
10001fc4:	f001 f99e 	bl	10003304 <__aeabi_fdiv>
10001fc8:	1c03      	adds	r3, r0, #0
10001fca:	617b      	str	r3, [r7, #20]
  fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
10001fcc:	69bb      	ldr	r3, [r7, #24]
10001fce:	699b      	ldr	r3, [r3, #24]
10001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001fd2:	1c18      	adds	r0, r3, #0
10001fd4:	f001 feb2 	bl	10003d3c <__aeabi_ui2f>
10001fd8:	1c03      	adds	r3, r0, #0
10001fda:	613b      	str	r3, [r7, #16]
  FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
10001fdc:	6938      	ldr	r0, [r7, #16]
10001fde:	6979      	ldr	r1, [r7, #20]
10001fe0:	f001 fb82 	bl	100036e8 <__aeabi_fmul>
10001fe4:	1c03      	adds	r3, r0, #0
10001fe6:	1c18      	adds	r0, r3, #0
10001fe8:	f001 f974 	bl	100032d4 <__aeabi_f2uiz>
10001fec:	1c03      	adds	r3, r0, #0
10001fee:	61fb      	str	r3, [r7, #28]
  HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
10001ff0:	69bb      	ldr	r3, [r7, #24]
10001ff2:	699b      	ldr	r3, [r3, #24]
10001ff4:	69fa      	ldr	r2, [r7, #28]
10001ff6:	0412      	lsls	r2, r2, #16
10001ff8:	0c12      	lsrs	r2, r2, #16
10001ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /*shadow transfer */
  Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
10001ffc:	69ba      	ldr	r2, [r7, #24]
10001ffe:	2337      	movs	r3, #55	; 0x37
10002000:	5cd3      	ldrb	r3, [r2, r3]
10002002:	009b      	lsls	r3, r3, #2
10002004:	60fb      	str	r3, [r7, #12]
  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
10002006:	69bb      	ldr	r3, [r7, #24]
10002008:	695b      	ldr	r3, [r3, #20]
1000200a:	69ba      	ldr	r2, [r7, #24]
1000200c:	6952      	ldr	r2, [r2, #20]
1000200e:	6911      	ldr	r1, [r2, #16]
10002010:	68fa      	ldr	r2, [r7, #12]
10002012:	2001      	movs	r0, #1
10002014:	1c04      	adds	r4, r0, #0
10002016:	4094      	lsls	r4, r2
10002018:	1c22      	adds	r2, r4, #0
1000201a:	430a      	orrs	r2, r1
1000201c:	611a      	str	r2, [r3, #16]
}
1000201e:	46bd      	mov	sp, r7
10002020:	b009      	add	sp, #36	; 0x24
10002022:	bd90      	pop	{r4, r7, pc}
10002024:	42c80000 	.word	0x42c80000

10002028 <PWMSP001_SetPeriodAndCompare>:
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period,
    uint32_t Compare
)
{
10002028:	b580      	push	{r7, lr}
1000202a:	b086      	sub	sp, #24
1000202c:	af00      	add	r7, sp, #0
1000202e:	60f8      	str	r0, [r7, #12]
10002030:	60b9      	str	r1, [r7, #8]
10002032:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002034:	2301      	movs	r3, #1
10002036:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0UL;
10002038:	2300      	movs	r3, #0
1000203a:	613b      	str	r3, [r7, #16]
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
1000203c:	68fb      	ldr	r3, [r7, #12]
1000203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002040:	781b      	ldrb	r3, [r3, #0]
10002042:	2b00      	cmp	r3, #0
10002044:	d037      	beq.n	100020b6 <PWMSP001_SetPeriodAndCompare+0x8e>
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
10002046:	68bb      	ldr	r3, [r7, #8]
10002048:	2b00      	cmp	r3, #0
1000204a:	d009      	beq.n	10002060 <PWMSP001_SetPeriodAndCompare+0x38>
1000204c:	68fb      	ldr	r3, [r7, #12]
1000204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10002050:	687b      	ldr	r3, [r7, #4]
10002052:	429a      	cmp	r2, r3
10002054:	d207      	bcs.n	10002066 <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
10002056:	68fa      	ldr	r2, [r7, #12]
10002058:	2320      	movs	r3, #32
1000205a:	5cd3      	ldrb	r3, [r2, r3]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  uint32_t PeriodVal = 0UL;
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
  {
   if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
1000205c:	2b00      	cmp	r3, #0
1000205e:	d102      	bne.n	10002066 <PWMSP001_SetPeriodAndCompare+0x3e>
       (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
10002060:	2302      	movs	r3, #2
10002062:	617b      	str	r3, [r7, #20]
10002064:	e027      	b.n	100020b6 <PWMSP001_SetPeriodAndCompare+0x8e>
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
10002066:	68fb      	ldr	r3, [r7, #12]
10002068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000206a:	68bb      	ldr	r3, [r7, #8]
1000206c:	429a      	cmp	r2, r3
1000206e:	d207      	bcs.n	10002080 <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
10002070:	68fa      	ldr	r2, [r7, #12]
10002072:	2320      	movs	r3, #32
10002074:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
10002076:	2b01      	cmp	r3, #1
10002078:	d002      	beq.n	10002080 <PWMSP001_SetPeriodAndCompare+0x58>
          ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
          )
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000207a:	2302      	movs	r3, #2
1000207c:	617b      	str	r3, [r7, #20]
1000207e:	e01a      	b.n	100020b6 <PWMSP001_SetPeriodAndCompare+0x8e>
      }
      else
      {
        PeriodVal = Period;
10002080:	68bb      	ldr	r3, [r7, #8]
10002082:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002084:	68fa      	ldr	r2, [r7, #12]
10002086:	2320      	movs	r3, #32
10002088:	5cd3      	ldrb	r3, [r2, r3]
1000208a:	2b01      	cmp	r3, #1
1000208c:	d104      	bne.n	10002098 <PWMSP001_SetPeriodAndCompare+0x70>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
1000208e:	68fb      	ldr	r3, [r7, #12]
10002090:	69db      	ldr	r3, [r3, #28]
10002092:	693a      	ldr	r2, [r7, #16]
10002094:	0c12      	lsrs	r2, r2, #16
10002096:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /*<<<DD_PWMSP001_API_6_3>>>*/
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
10002098:	68fb      	ldr	r3, [r7, #12]
1000209a:	699b      	ldr	r3, [r3, #24]
1000209c:	693a      	ldr	r2, [r7, #16]
1000209e:	0412      	lsls	r2, r2, #16
100020a0:	0c12      	lsrs	r2, r2, #16
100020a2:	635a      	str	r2, [r3, #52]	; 0x34
        /* Call function as per the configured mode */
        HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
100020a4:	68fb      	ldr	r3, [r7, #12]
100020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100020a8:	68f9      	ldr	r1, [r7, #12]
100020aa:	687a      	ldr	r2, [r7, #4]
100020ac:	1c08      	adds	r0, r1, #0
100020ae:	1c11      	adds	r1, r2, #0
100020b0:	4798      	blx	r3
        Status = (uint32_t)DAVEApp_SUCCESS;
100020b2:	2300      	movs	r3, #0
100020b4:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
100020b6:	697b      	ldr	r3, [r7, #20]
}
100020b8:	1c18      	adds	r0, r3, #0
100020ba:	46bd      	mov	sp, r7
100020bc:	b006      	add	sp, #24
100020be:	bd80      	pop	{r7, pc}

100020c0 <PWMSP001_SetPeriod>:
status_t PWMSP001_SetPeriod
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t Period
)
{
100020c0:	b590      	push	{r4, r7, lr}
100020c2:	b087      	sub	sp, #28
100020c4:	af00      	add	r7, sp, #0
100020c6:	6078      	str	r0, [r7, #4]
100020c8:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100020ca:	2301      	movs	r3, #1
100020cc:	617b      	str	r3, [r7, #20]
  uint32_t PeriodVal = 0X00U;
100020ce:	2300      	movs	r3, #0
100020d0:	613b      	str	r3, [r7, #16]
  uint32_t Temp1;
  
  /*<<<DD_PWMSP001_API_6_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
100020d2:	687b      	ldr	r3, [r7, #4]
100020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100020d6:	781b      	ldrb	r3, [r3, #0]
100020d8:	2b00      	cmp	r3, #0
100020da:	d04d      	beq.n	10002178 <PWMSP001_SetPeriod+0xb8>
  {
    if(Period == (uint32_t)0)
100020dc:	683b      	ldr	r3, [r7, #0]
100020de:	2b00      	cmp	r3, #0
100020e0:	d102      	bne.n	100020e8 <PWMSP001_SetPeriod+0x28>
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100020e2:	2302      	movs	r3, #2
100020e4:	617b      	str	r3, [r7, #20]
100020e6:	e047      	b.n	10002178 <PWMSP001_SetPeriod+0xb8>
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
100020e8:	687b      	ldr	r3, [r7, #4]
100020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
100020ec:	683b      	ldr	r3, [r7, #0]
100020ee:	429a      	cmp	r2, r3
100020f0:	d207      	bcs.n	10002102 <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
100020f2:	687a      	ldr	r2, [r7, #4]
100020f4:	2320      	movs	r3, #32
100020f6:	5cd3      	ldrb	r3, [r2, r3]
    {
      Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
    }
    else
    {
      if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
100020f8:	2b01      	cmp	r3, #1
100020fa:	d002      	beq.n	10002102 <PWMSP001_SetPeriod+0x42>
         (HandlePtr->kTimerConcatenation != (uint8_t)SET))
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100020fc:	2302      	movs	r3, #2
100020fe:	617b      	str	r3, [r7, #20]
10002100:	e03a      	b.n	10002178 <PWMSP001_SetPeriod+0xb8>
      }
      else
      {
        PeriodVal = Period;
10002102:	683b      	ldr	r3, [r7, #0]
10002104:	613b      	str	r3, [r7, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002106:	687a      	ldr	r2, [r7, #4]
10002108:	2320      	movs	r3, #32
1000210a:	5cd3      	ldrb	r3, [r2, r3]
1000210c:	2b01      	cmp	r3, #1
1000210e:	d104      	bne.n	1000211a <PWMSP001_SetPeriod+0x5a>
        {
          HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
10002110:	687b      	ldr	r3, [r7, #4]
10002112:	69db      	ldr	r3, [r3, #28]
10002114:	693a      	ldr	r2, [r7, #16]
10002116:	0c12      	lsrs	r2, r2, #16
10002118:	635a      	str	r2, [r3, #52]	; 0x34
        }
        HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
1000211a:	687b      	ldr	r3, [r7, #4]
1000211c:	699b      	ldr	r3, [r3, #24]
1000211e:	693a      	ldr	r2, [r7, #16]
10002120:	0412      	lsls	r2, r2, #16
10002122:	0c12      	lsrs	r2, r2, #16
10002124:	635a      	str	r2, [r3, #52]	; 0x34
        /*Request shadow transfer for the First slice*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
10002126:	687a      	ldr	r2, [r7, #4]
10002128:	2337      	movs	r3, #55	; 0x37
1000212a:	5cd3      	ldrb	r3, [r2, r3]
1000212c:	009b      	lsls	r3, r3, #2
1000212e:	60fb      	str	r3, [r7, #12]
        HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
10002130:	687b      	ldr	r3, [r7, #4]
10002132:	695b      	ldr	r3, [r3, #20]
10002134:	687a      	ldr	r2, [r7, #4]
10002136:	6952      	ldr	r2, [r2, #20]
10002138:	6911      	ldr	r1, [r2, #16]
1000213a:	68fa      	ldr	r2, [r7, #12]
1000213c:	2001      	movs	r0, #1
1000213e:	1c04      	adds	r4, r0, #0
10002140:	4094      	lsls	r4, r2
10002142:	1c22      	adds	r2, r4, #0
10002144:	430a      	orrs	r2, r1
10002146:	611a      	str	r2, [r3, #16]
        if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002148:	687a      	ldr	r2, [r7, #4]
1000214a:	2320      	movs	r3, #32
1000214c:	5cd3      	ldrb	r3, [r2, r3]
1000214e:	2b01      	cmp	r3, #1
10002150:	d110      	bne.n	10002174 <PWMSP001_SetPeriod+0xb4>
        {
          /*Request shadow transfer for the First slice*/
          Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
10002152:	687a      	ldr	r2, [r7, #4]
10002154:	2338      	movs	r3, #56	; 0x38
10002156:	5cd3      	ldrb	r3, [r2, r3]
10002158:	009b      	lsls	r3, r3, #2
1000215a:	60fb      	str	r3, [r7, #12]
          HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
1000215c:	687b      	ldr	r3, [r7, #4]
1000215e:	695b      	ldr	r3, [r3, #20]
10002160:	687a      	ldr	r2, [r7, #4]
10002162:	6952      	ldr	r2, [r2, #20]
10002164:	6911      	ldr	r1, [r2, #16]
10002166:	68fa      	ldr	r2, [r7, #12]
10002168:	2001      	movs	r0, #1
1000216a:	1c04      	adds	r4, r0, #0
1000216c:	4094      	lsls	r4, r2
1000216e:	1c22      	adds	r2, r4, #0
10002170:	430a      	orrs	r2, r1
10002172:	611a      	str	r2, [r3, #16]
        }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
        Status = (uint32_t)DAVEApp_SUCCESS;
10002174:	2300      	movs	r3, #0
10002176:	617b      	str	r3, [r7, #20]
      }
    }
  }
  return Status;
10002178:	697b      	ldr	r3, [r7, #20]
}
1000217a:	1c18      	adds	r0, r3, #0
1000217c:	46bd      	mov	sp, r7
1000217e:	b007      	add	sp, #28
10002180:	bd90      	pop	{r4, r7, pc}
10002182:	46c0      	nop			; (mov r8, r8)

10002184 <PWMSP001_SetPwmFreqAndDutyCycle>:
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq,
    float Duty
)
{
10002184:	b580      	push	{r7, lr}
10002186:	b088      	sub	sp, #32
10002188:	af00      	add	r7, sp, #0
1000218a:	60f8      	str	r0, [r7, #12]
1000218c:	60b9      	str	r1, [r7, #8]
1000218e:	607a      	str	r2, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002190:	2301      	movs	r3, #1
10002192:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0UL;
10002194:	2300      	movs	r3, #0
10002196:	61bb      	str	r3, [r7, #24]
  float fPwmFreq ;
  /*<<<DD_PWMSP001_API_16_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
10002198:	68fb      	ldr	r3, [r7, #12]
1000219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000219c:	781b      	ldrb	r3, [r3, #0]
1000219e:	2b00      	cmp	r3, #0
100021a0:	d068      	beq.n	10002274 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  {
  if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
100021a2:	68b8      	ldr	r0, [r7, #8]
100021a4:	2100      	movs	r1, #0
100021a6:	f001 f867 	bl	10003278 <__aeabi_fcmpeq>
100021aa:	1c03      	adds	r3, r0, #0
100021ac:	2b00      	cmp	r3, #0
100021ae:	d10d      	bne.n	100021cc <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
100021b0:	6878      	ldr	r0, [r7, #4]
100021b2:	4933      	ldr	r1, [pc, #204]	; (10002280 <PWMSP001_SetPwmFreqAndDutyCycle+0xfc>)
100021b4:	f001 f87a 	bl	100032ac <__aeabi_fcmpgt>
100021b8:	1c03      	adds	r3, r0, #0
100021ba:	2b00      	cmp	r3, #0
100021bc:	d106      	bne.n	100021cc <PWMSP001_SetPwmFreqAndDutyCycle+0x48>
100021be:	6878      	ldr	r0, [r7, #4]
100021c0:	2100      	movs	r1, #0
100021c2:	f001 f85f 	bl	10003284 <__aeabi_fcmplt>
100021c6:	1c03      	adds	r3, r0, #0
100021c8:	2b00      	cmp	r3, #0
100021ca:	d002      	beq.n	100021d2 <PWMSP001_SetPwmFreqAndDutyCycle+0x4e>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100021cc:	2302      	movs	r3, #2
100021ce:	61fb      	str	r3, [r7, #28]
100021d0:	e050      	b.n	10002274 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
  }
  else
  {
      fPwmFreq=(float)HandlePtr->kResolution;
100021d2:	68fb      	ldr	r3, [r7, #12]
100021d4:	685b      	ldr	r3, [r3, #4]
100021d6:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
100021d8:	6978      	ldr	r0, [r7, #20]
100021da:	68b9      	ldr	r1, [r7, #8]
100021dc:	f001 fa84 	bl	100036e8 <__aeabi_fmul>
100021e0:	1c03      	adds	r3, r0, #0
100021e2:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
100021e4:	4827      	ldr	r0, [pc, #156]	; (10002284 <PWMSP001_SetPwmFreqAndDutyCycle+0x100>)
100021e6:	6979      	ldr	r1, [r7, #20]
100021e8:	f001 f88c 	bl	10003304 <__aeabi_fdiv>
100021ec:	1c03      	adds	r3, r0, #0
100021ee:	1c18      	adds	r0, r3, #0
100021f0:	f001 f870 	bl	100032d4 <__aeabi_f2uiz>
100021f4:	1c03      	adds	r3, r0, #0
100021f6:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
100021f8:	68fa      	ldr	r2, [r7, #12]
100021fa:	2320      	movs	r3, #32
100021fc:	5cd3      	ldrb	r3, [r2, r3]
100021fe:	2b00      	cmp	r3, #0
10002200:	d11a      	bne.n	10002238 <PWMSP001_SetPwmFreqAndDutyCycle+0xb4>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
10002202:	69ba      	ldr	r2, [r7, #24]
10002204:	4b20      	ldr	r3, [pc, #128]	; (10002288 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
10002206:	429a      	cmp	r2, r3
10002208:	d902      	bls.n	10002210 <PWMSP001_SetPwmFreqAndDutyCycle+0x8c>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000220a:	2302      	movs	r3, #2
1000220c:	61fb      	str	r3, [r7, #28]
1000220e:	e027      	b.n	10002260 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
10002210:	68fa      	ldr	r2, [r7, #12]
10002212:	2336      	movs	r3, #54	; 0x36
10002214:	5cd3      	ldrb	r3, [r2, r3]
10002216:	2b00      	cmp	r3, #0
10002218:	d105      	bne.n	10002226 <PWMSP001_SetPwmFreqAndDutyCycle+0xa2>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
1000221a:	68fb      	ldr	r3, [r7, #12]
1000221c:	699b      	ldr	r3, [r3, #24]
1000221e:	69ba      	ldr	r2, [r7, #24]
10002220:	3a01      	subs	r2, #1
10002222:	635a      	str	r2, [r3, #52]	; 0x34
10002224:	e005      	b.n	10002232 <PWMSP001_SetPwmFreqAndDutyCycle+0xae>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
10002226:	68fb      	ldr	r3, [r7, #12]
10002228:	699b      	ldr	r3, [r3, #24]
1000222a:	69ba      	ldr	r2, [r7, #24]
1000222c:	3a01      	subs	r2, #1
1000222e:	0852      	lsrs	r2, r2, #1
10002230:	635a      	str	r2, [r3, #52]	; 0x34
        }
        Status = (uint32_t)DAVEApp_SUCCESS;
10002232:	2300      	movs	r3, #0
10002234:	61fb      	str	r3, [r7, #28]
10002236:	e013      	b.n	10002260 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
      }
    }
    else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
10002238:	68fa      	ldr	r2, [r7, #12]
1000223a:	2320      	movs	r3, #32
1000223c:	5cd3      	ldrb	r3, [r2, r3]
1000223e:	2b01      	cmp	r3, #1
10002240:	d106      	bne.n	10002250 <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
10002242:	69ba      	ldr	r2, [r7, #24]
10002244:	4b10      	ldr	r3, [pc, #64]	; (10002288 <PWMSP001_SetPwmFreqAndDutyCycle+0x104>)
10002246:	429a      	cmp	r2, r3
10002248:	d802      	bhi.n	10002250 <PWMSP001_SetPwmFreqAndDutyCycle+0xcc>
    		                                   (PwmTime <= PWMSP001_MAX_VALUE))
    {
    	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
1000224a:	2302      	movs	r3, #2
1000224c:	61fb      	str	r3, [r7, #28]
1000224e:	e007      	b.n	10002260 <PWMSP001_SetPwmFreqAndDutyCycle+0xdc>
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
10002250:	68fa      	ldr	r2, [r7, #12]
10002252:	69bb      	ldr	r3, [r7, #24]
10002254:	1c10      	adds	r0, r2, #0
10002256:	1c19      	adds	r1, r3, #0
10002258:	f000 f8a4 	bl	100023a4 <PWMSP001_lSetPwmFreqTimerConcat>
1000225c:	1c03      	adds	r3, r0, #0
1000225e:	61fb      	str	r3, [r7, #28]
    }
    if(Status == (uint32_t)DAVEApp_SUCCESS)
10002260:	69fb      	ldr	r3, [r7, #28]
10002262:	2b00      	cmp	r3, #0
10002264:	d106      	bne.n	10002274 <PWMSP001_SetPwmFreqAndDutyCycle+0xf0>
    {
     /* Call the function as per configured mode */
     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
10002266:	68fb      	ldr	r3, [r7, #12]
10002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1000226a:	68f9      	ldr	r1, [r7, #12]
1000226c:	687a      	ldr	r2, [r7, #4]
1000226e:	1c08      	adds	r0, r1, #0
10002270:	1c11      	adds	r1, r2, #0
10002272:	4798      	blx	r3
    }
   }
  }
  return (Status);
10002274:	69fb      	ldr	r3, [r7, #28]
}
10002276:	1c18      	adds	r0, r3, #0
10002278:	46bd      	mov	sp, r7
1000227a:	b008      	add	sp, #32
1000227c:	bd80      	pop	{r7, pc}
1000227e:	46c0      	nop			; (mov r8, r8)
10002280:	42c80000 	.word	0x42c80000
10002284:	4e6e6b28 	.word	0x4e6e6b28
10002288:	0000ffff 	.word	0x0000ffff

1000228c <PWMSP001_SetPwmFreq>:
status_t PWMSP001_SetPwmFreq
(
    const PWMSP001_HandleType* HandlePtr,
    float PwmFreq
)
{
1000228c:	b5b0      	push	{r4, r5, r7, lr}
1000228e:	b088      	sub	sp, #32
10002290:	af00      	add	r7, sp, #0
10002292:	6078      	str	r0, [r7, #4]
10002294:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002296:	2301      	movs	r3, #1
10002298:	61fb      	str	r3, [r7, #28]
  uint32_t PwmTime = 0x00U;
1000229a:	2300      	movs	r3, #0
1000229c:	61bb      	str	r3, [r7, #24]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;
  float fPwmFreq ;
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100022a2:	781b      	ldrb	r3, [r3, #0]
100022a4:	2b00      	cmp	r3, #0
100022a6:	d100      	bne.n	100022aa <PWMSP001_SetPwmFreq+0x1e>
100022a8:	e072      	b.n	10002390 <PWMSP001_SetPwmFreq+0x104>
  {
  if(PwmFreq == (float)0)
100022aa:	6838      	ldr	r0, [r7, #0]
100022ac:	2100      	movs	r1, #0
100022ae:	f000 ffe3 	bl	10003278 <__aeabi_fcmpeq>
100022b2:	1c03      	adds	r3, r0, #0
100022b4:	2b00      	cmp	r3, #0
100022b6:	d002      	beq.n	100022be <PWMSP001_SetPwmFreq+0x32>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100022b8:	2302      	movs	r3, #2
100022ba:	61fb      	str	r3, [r7, #28]
100022bc:	e068      	b.n	10002390 <PWMSP001_SetPwmFreq+0x104>
  }
  else
  {
	  fPwmFreq=(float)HandlePtr->kResolution;
100022be:	687b      	ldr	r3, [r7, #4]
100022c0:	685b      	ldr	r3, [r3, #4]
100022c2:	617b      	str	r3, [r7, #20]
	  fPwmFreq=(float)fPwmFreq*PwmFreq;
100022c4:	6978      	ldr	r0, [r7, #20]
100022c6:	6839      	ldr	r1, [r7, #0]
100022c8:	f001 fa0e 	bl	100036e8 <__aeabi_fmul>
100022cc:	1c03      	adds	r3, r0, #0
100022ce:	617b      	str	r3, [r7, #20]
	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
100022d0:	4832      	ldr	r0, [pc, #200]	; (1000239c <PWMSP001_SetPwmFreq+0x110>)
100022d2:	6979      	ldr	r1, [r7, #20]
100022d4:	f001 f816 	bl	10003304 <__aeabi_fdiv>
100022d8:	1c03      	adds	r3, r0, #0
100022da:	1c18      	adds	r0, r3, #0
100022dc:	f000 fffa 	bl	100032d4 <__aeabi_f2uiz>
100022e0:	1c03      	adds	r3, r0, #0
100022e2:	61bb      	str	r3, [r7, #24]
    /*<<<DD_PWMSP001_API_16_2>>>*/
    if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
100022e4:	687a      	ldr	r2, [r7, #4]
100022e6:	2320      	movs	r3, #32
100022e8:	5cd3      	ldrb	r3, [r2, r3]
100022ea:	2b00      	cmp	r3, #0
100022ec:	d12b      	bne.n	10002346 <PWMSP001_SetPwmFreq+0xba>
    {
      if(PwmTime > PWMSP001_MAX_VALUE)
100022ee:	69ba      	ldr	r2, [r7, #24]
100022f0:	4b2b      	ldr	r3, [pc, #172]	; (100023a0 <PWMSP001_SetPwmFreq+0x114>)
100022f2:	429a      	cmp	r2, r3
100022f4:	d902      	bls.n	100022fc <PWMSP001_SetPwmFreq+0x70>
      {
        Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100022f6:	2302      	movs	r3, #2
100022f8:	61fb      	str	r3, [r7, #28]
100022fa:	e049      	b.n	10002390 <PWMSP001_SetPwmFreq+0x104>
      }
      else
      {
        if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
100022fc:	687a      	ldr	r2, [r7, #4]
100022fe:	2336      	movs	r3, #54	; 0x36
10002300:	5cd3      	ldrb	r3, [r2, r3]
10002302:	2b00      	cmp	r3, #0
10002304:	d105      	bne.n	10002312 <PWMSP001_SetPwmFreq+0x86>
        {
          HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
10002306:	687b      	ldr	r3, [r7, #4]
10002308:	699b      	ldr	r3, [r3, #24]
1000230a:	69ba      	ldr	r2, [r7, #24]
1000230c:	3a01      	subs	r2, #1
1000230e:	635a      	str	r2, [r3, #52]	; 0x34
10002310:	e005      	b.n	1000231e <PWMSP001_SetPwmFreq+0x92>
        }
        else
        {
          HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
10002312:	687b      	ldr	r3, [r7, #4]
10002314:	699b      	ldr	r3, [r3, #24]
10002316:	69ba      	ldr	r2, [r7, #24]
10002318:	3a01      	subs	r2, #1
1000231a:	0852      	lsrs	r2, r2, #1
1000231c:	635a      	str	r2, [r3, #52]	; 0x34
        }
        /** Update dynamic handle*/
        Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
1000231e:	687a      	ldr	r2, [r7, #4]
10002320:	2337      	movs	r3, #55	; 0x37
10002322:	5cd3      	ldrb	r3, [r2, r3]
10002324:	009b      	lsls	r3, r3, #2
10002326:	613b      	str	r3, [r7, #16]
        HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
10002328:	687b      	ldr	r3, [r7, #4]
1000232a:	695b      	ldr	r3, [r3, #20]
1000232c:	687a      	ldr	r2, [r7, #4]
1000232e:	6952      	ldr	r2, [r2, #20]
10002330:	6911      	ldr	r1, [r2, #16]
10002332:	693a      	ldr	r2, [r7, #16]
10002334:	2001      	movs	r0, #1
10002336:	1c04      	adds	r4, r0, #0
10002338:	4094      	lsls	r4, r2
1000233a:	1c22      	adds	r2, r4, #0
1000233c:	430a      	orrs	r2, r1
1000233e:	611a      	str	r2, [r3, #16]
        Status = (uint32_t)DAVEApp_SUCCESS;
10002340:	2300      	movs	r3, #0
10002342:	61fb      	str	r3, [r7, #28]
10002344:	e024      	b.n	10002390 <PWMSP001_SetPwmFreq+0x104>
      }
    }
    /*<<<DD_PWMSP001_API_16_3>>>*/
    else
    {
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
10002346:	687a      	ldr	r2, [r7, #4]
10002348:	69bb      	ldr	r3, [r7, #24]
1000234a:	1c10      	adds	r0, r2, #0
1000234c:	1c19      	adds	r1, r3, #0
1000234e:	f000 f829 	bl	100023a4 <PWMSP001_lSetPwmFreqTimerConcat>
10002352:	1c03      	adds	r3, r0, #0
10002354:	61fb      	str	r3, [r7, #28]
      if(Status == (uint32_t)DAVEApp_SUCCESS)
10002356:	69fb      	ldr	r3, [r7, #28]
10002358:	2b00      	cmp	r3, #0
1000235a:	d119      	bne.n	10002390 <PWMSP001_SetPwmFreq+0x104>
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
1000235c:	687a      	ldr	r2, [r7, #4]
1000235e:	2337      	movs	r3, #55	; 0x37
10002360:	5cd3      	ldrb	r3, [r2, r3]
10002362:	009b      	lsls	r3, r3, #2
10002364:	60fb      	str	r3, [r7, #12]
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
10002366:	687a      	ldr	r2, [r7, #4]
10002368:	2338      	movs	r3, #56	; 0x38
1000236a:	5cd3      	ldrb	r3, [r2, r3]
1000236c:	009b      	lsls	r3, r3, #2
1000236e:	60bb      	str	r3, [r7, #8]
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
10002370:	687b      	ldr	r3, [r7, #4]
10002372:	695b      	ldr	r3, [r3, #20]
10002374:	687a      	ldr	r2, [r7, #4]
10002376:	6952      	ldr	r2, [r2, #20]
10002378:	6911      	ldr	r1, [r2, #16]
1000237a:	68fa      	ldr	r2, [r7, #12]
1000237c:	2001      	movs	r0, #1
1000237e:	4090      	lsls	r0, r2
            ((uint32_t)0x01 << Temp3));
10002380:	68ba      	ldr	r2, [r7, #8]
10002382:	2401      	movs	r4, #1
10002384:	1c25      	adds	r5, r4, #0
10002386:	4095      	lsls	r5, r2
10002388:	1c2a      	adds	r2, r5, #0
      Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
      if(Status == (uint32_t)DAVEApp_SUCCESS)
      {
        Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
        Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
        HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
1000238a:	4302      	orrs	r2, r0
1000238c:	430a      	orrs	r2, r1
1000238e:	611a      	str	r2, [r3, #16]
            ((uint32_t)0x01 << Temp3));
      }
    }
  }
 }
  return (Status);
10002390:	69fb      	ldr	r3, [r7, #28]
}
10002392:	1c18      	adds	r0, r3, #0
10002394:	46bd      	mov	sp, r7
10002396:	b008      	add	sp, #32
10002398:	bdb0      	pop	{r4, r5, r7, pc}
1000239a:	46c0      	nop			; (mov r8, r8)
1000239c:	4e6e6b28 	.word	0x4e6e6b28
100023a0:	0000ffff 	.word	0x0000ffff

100023a4 <PWMSP001_lSetPwmFreqTimerConcat>:
status_t PWMSP001_lSetPwmFreqTimerConcat
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t PwmTime
)
{
100023a4:	b580      	push	{r7, lr}
100023a6:	b088      	sub	sp, #32
100023a8:	af00      	add	r7, sp, #0
100023aa:	6078      	str	r0, [r7, #4]
100023ac:	6039      	str	r1, [r7, #0]
  uint32_t PeriodVal = PwmTime;
100023ae:	683b      	ldr	r3, [r7, #0]
100023b0:	61fb      	str	r3, [r7, #28]
  uint32_t MsbPeriodVal, LsbPeriodVal;
  uint8_t Count = 0x00U;
100023b2:	1c3b      	adds	r3, r7, #0
100023b4:	3313      	adds	r3, #19
100023b6:	2200      	movs	r2, #0
100023b8:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100023ba:	2301      	movs	r3, #1
100023bc:	60fb      	str	r3, [r7, #12]

  if(PwmTime >= PWMSP001_TC_MAX_VALUE)
100023be:	683b      	ldr	r3, [r7, #0]
100023c0:	3301      	adds	r3, #1
100023c2:	d102      	bne.n	100023ca <PWMSP001_lSetPwmFreqTimerConcat+0x26>
  {
    Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
100023c4:	2302      	movs	r3, #2
100023c6:	60fb      	str	r3, [r7, #12]
100023c8:	e03a      	b.n	10002440 <PWMSP001_lSetPwmFreqTimerConcat+0x9c>
  }

  else
  {

    if(PwmTime > PWMSP001_MAX_VALUE)
100023ca:	683a      	ldr	r2, [r7, #0]
100023cc:	4b1f      	ldr	r3, [pc, #124]	; (1000244c <PWMSP001_lSetPwmFreqTimerConcat+0xa8>)
100023ce:	429a      	cmp	r2, r3
100023d0:	d919      	bls.n	10002406 <PWMSP001_lSetPwmFreqTimerConcat+0x62>
    {
      do
      {
        PeriodVal = PeriodVal >> 1;
100023d2:	69fb      	ldr	r3, [r7, #28]
100023d4:	085b      	lsrs	r3, r3, #1
100023d6:	61fb      	str	r3, [r7, #28]
        Count++;
100023d8:	1c3b      	adds	r3, r7, #0
100023da:	3313      	adds	r3, #19
100023dc:	1c3a      	adds	r2, r7, #0
100023de:	3213      	adds	r2, #19
100023e0:	7812      	ldrb	r2, [r2, #0]
100023e2:	3201      	adds	r2, #1
100023e4:	701a      	strb	r2, [r3, #0]
      }while(PeriodVal >= PWMSP001_MAX_VALUE);
100023e6:	69fa      	ldr	r2, [r7, #28]
100023e8:	4b19      	ldr	r3, [pc, #100]	; (10002450 <PWMSP001_lSetPwmFreqTimerConcat+0xac>)
100023ea:	429a      	cmp	r2, r3
100023ec:	d8f1      	bhi.n	100023d2 <PWMSP001_lSetPwmFreqTimerConcat+0x2e>

      MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
100023ee:	1c3b      	adds	r3, r7, #0
100023f0:	3313      	adds	r3, #19
100023f2:	781b      	ldrb	r3, [r3, #0]
100023f4:	2201      	movs	r2, #1
100023f6:	1c11      	adds	r1, r2, #0
100023f8:	4099      	lsls	r1, r3
100023fa:	1c0b      	adds	r3, r1, #0
100023fc:	3b01      	subs	r3, #1
100023fe:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = PeriodVal;
10002400:	69fb      	ldr	r3, [r7, #28]
10002402:	617b      	str	r3, [r7, #20]
10002404:	e003      	b.n	1000240e <PWMSP001_lSetPwmFreqTimerConcat+0x6a>
    }
    else
    {
      LsbPeriodVal = PwmTime;
10002406:	683b      	ldr	r3, [r7, #0]
10002408:	617b      	str	r3, [r7, #20]
      MsbPeriodVal = (uint32_t)0x00;
1000240a:	2300      	movs	r3, #0
1000240c:	61bb      	str	r3, [r7, #24]
    }

    /*<<<DD_PWMSP001_API_16_4>>>*/
    if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
1000240e:	687a      	ldr	r2, [r7, #4]
10002410:	2336      	movs	r3, #54	; 0x36
10002412:	5cd3      	ldrb	r3, [r2, r3]
10002414:	2b01      	cmp	r3, #1
10002416:	d105      	bne.n	10002424 <PWMSP001_lSetPwmFreqTimerConcat+0x80>
    {
      MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
10002418:	69bb      	ldr	r3, [r7, #24]
1000241a:	085b      	lsrs	r3, r3, #1
1000241c:	61bb      	str	r3, [r7, #24]
      LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
1000241e:	697b      	ldr	r3, [r7, #20]
10002420:	085b      	lsrs	r3, r3, #1
10002422:	617b      	str	r3, [r7, #20]
    }

    HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
10002424:	687b      	ldr	r3, [r7, #4]
10002426:	699b      	ldr	r3, [r3, #24]
10002428:	697a      	ldr	r2, [r7, #20]
1000242a:	0412      	lsls	r2, r2, #16
1000242c:	0c12      	lsrs	r2, r2, #16
1000242e:	635a      	str	r2, [r3, #52]	; 0x34
    HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
10002430:	687b      	ldr	r3, [r7, #4]
10002432:	69db      	ldr	r3, [r3, #28]
10002434:	69ba      	ldr	r2, [r7, #24]
10002436:	0412      	lsls	r2, r2, #16
10002438:	0c12      	lsrs	r2, r2, #16
1000243a:	635a      	str	r2, [r3, #52]	; 0x34

    /*<<<DD_PWMSP001_API_16_5>>>*/
    Status = (uint32_t)DAVEApp_SUCCESS;
1000243c:	2300      	movs	r3, #0
1000243e:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10002440:	68fb      	ldr	r3, [r7, #12]
}
10002442:	1c18      	adds	r0, r3, #0
10002444:	46bd      	mov	sp, r7
10002446:	b008      	add	sp, #32
10002448:	bd80      	pop	{r7, pc}
1000244a:	46c0      	nop			; (mov r8, r8)
1000244c:	0000ffff 	.word	0x0000ffff
10002450:	0000fffe 	.word	0x0000fffe

10002454 <PWMSP001_SetTimerVal>:
status_t PWMSP001_SetTimerVal
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t TimerVal
)
{
10002454:	b580      	push	{r7, lr}
10002456:	b084      	sub	sp, #16
10002458:	af00      	add	r7, sp, #0
1000245a:	6078      	str	r0, [r7, #4]
1000245c:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
1000245e:	2301      	movs	r3, #1
10002460:	60fb      	str	r3, [r7, #12]
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10002462:	687b      	ldr	r3, [r7, #4]
10002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002466:	781b      	ldrb	r3, [r3, #0]
10002468:	2b01      	cmp	r3, #1
1000246a:	d004      	beq.n	10002476 <PWMSP001_SetTimerVal+0x22>
      (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
1000246c:	687b      	ldr	r3, [r7, #4]
1000246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002470:	781b      	ldrb	r3, [r3, #0]
    uint32_t TimerVal
)
{
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  /*<<<DD_PWMSP001_API_7_1>>>*/
  if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
10002472:	2b03      	cmp	r3, #3
10002474:	d111      	bne.n	1000249a <PWMSP001_SetTimerVal+0x46>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_7_1>>>*/
  else
  {
    HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	699b      	ldr	r3, [r3, #24]
1000247a:	683a      	ldr	r2, [r7, #0]
1000247c:	0412      	lsls	r2, r2, #16
1000247e:	0c12      	lsrs	r2, r2, #16
10002480:	671a      	str	r2, [r3, #112]	; 0x70
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002482:	687a      	ldr	r2, [r7, #4]
10002484:	2320      	movs	r3, #32
10002486:	5cd3      	ldrb	r3, [r2, r3]
10002488:	2b01      	cmp	r3, #1
1000248a:	d104      	bne.n	10002496 <PWMSP001_SetTimerVal+0x42>
    {
      HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
1000248c:	687b      	ldr	r3, [r7, #4]
1000248e:	69db      	ldr	r3, [r3, #28]
10002490:	683a      	ldr	r2, [r7, #0]
10002492:	0c12      	lsrs	r2, r2, #16
10002494:	671a      	str	r2, [r3, #112]	; 0x70
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10002496:	2300      	movs	r3, #0
10002498:	60fb      	str	r3, [r7, #12]
  }
  return Status;
1000249a:	68fb      	ldr	r3, [r7, #12]
}
1000249c:	1c18      	adds	r0, r3, #0
1000249e:	46bd      	mov	sp, r7
100024a0:	b004      	add	sp, #16
100024a2:	bd80      	pop	{r7, pc}

100024a4 <PWMSP001_GetTimerStatus>:
status_t PWMSP001_GetTimerStatus
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* TimerStatus
)
{
100024a4:	b580      	push	{r7, lr}
100024a6:	b084      	sub	sp, #16
100024a8:	af00      	add	r7, sp, #0
100024aa:	6078      	str	r0, [r7, #4]
100024ac:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100024ae:	2301      	movs	r3, #1
100024b0:	60fb      	str	r3, [r7, #12]
  uint32_t SecondTimerStatus = (uint32_t)0;
100024b2:	2300      	movs	r3, #0
100024b4:	60bb      	str	r3, [r7, #8]
  /*<<<DD_PWMSP001_API_8_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100024b6:	687b      	ldr	r3, [r7, #4]
100024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100024ba:	781b      	ldrb	r3, [r3, #0]
100024bc:	2b00      	cmp	r3, #0
100024be:	d01d      	beq.n	100024fc <PWMSP001_GetTimerStatus+0x58>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_8_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100024c0:	687a      	ldr	r2, [r7, #4]
100024c2:	2320      	movs	r3, #32
100024c4:	5cd3      	ldrb	r3, [r2, r3]
100024c6:	2b01      	cmp	r3, #1
100024c8:	d10f      	bne.n	100024ea <PWMSP001_GetTimerStatus+0x46>
    {
      SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
100024ca:	687b      	ldr	r3, [r7, #4]
100024cc:	69db      	ldr	r3, [r3, #28]
100024ce:	689a      	ldr	r2, [r3, #8]
100024d0:	2301      	movs	r3, #1
100024d2:	4013      	ands	r3, r2
100024d4:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
      *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
100024d6:	687b      	ldr	r3, [r7, #4]
100024d8:	699b      	ldr	r3, [r3, #24]
100024da:	689b      	ldr	r3, [r3, #8]
100024dc:	68ba      	ldr	r2, [r7, #8]
100024de:	401a      	ands	r2, r3
100024e0:	2301      	movs	r3, #1
100024e2:	401a      	ands	r2, r3
100024e4:	683b      	ldr	r3, [r7, #0]
100024e6:	601a      	str	r2, [r3, #0]
100024e8:	e006      	b.n	100024f8 <PWMSP001_GetTimerStatus+0x54>
          SecondTimerStatus
      );
    }
    else
    {
      *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
100024ea:	687b      	ldr	r3, [r7, #4]
100024ec:	699b      	ldr	r3, [r3, #24]
100024ee:	689a      	ldr	r2, [r3, #8]
100024f0:	2301      	movs	r3, #1
100024f2:	401a      	ands	r2, r3
100024f4:	683b      	ldr	r3, [r7, #0]
100024f6:	601a      	str	r2, [r3, #0]
          CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100024f8:	2300      	movs	r3, #0
100024fa:	60fb      	str	r3, [r7, #12]
  }
  return Status; 
100024fc:	68fb      	ldr	r3, [r7, #12]
}
100024fe:	1c18      	adds	r0, r3, #0
10002500:	46bd      	mov	sp, r7
10002502:	b004      	add	sp, #16
10002504:	bd80      	pop	{r7, pc}
10002506:	46c0      	nop			; (mov r8, r8)

10002508 <PWMSP001_GetTimerRegsVal>:
status_t PWMSP001_GetTimerRegsVal
(
    const PWMSP001_HandleType* HandlePtr,
    PWMSP001_TimerRegsType* TimerRegs
)
{
10002508:	b580      	push	{r7, lr}
1000250a:	b084      	sub	sp, #16
1000250c:	af00      	add	r7, sp, #0
1000250e:	6078      	str	r0, [r7, #4]
10002510:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002512:	2301      	movs	r3, #1
10002514:	60fb      	str	r3, [r7, #12]
  uint32_t ScndSlTMRVal = 0UL;
10002516:	2300      	movs	r3, #0
10002518:	60bb      	str	r3, [r7, #8]

  /*<<<DD_PWMSP001_API_9_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
1000251a:	687b      	ldr	r3, [r7, #4]
1000251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000251e:	781b      	ldrb	r3, [r3, #0]
10002520:	2b00      	cmp	r3, #0
10002522:	d051      	beq.n	100025c8 <PWMSP001_GetTimerRegsVal+0xc0>
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  /*<<<DD_PWMSP001_API_9_2>>>*/
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002524:	687a      	ldr	r2, [r7, #4]
10002526:	2320      	movs	r3, #32
10002528:	5cd3      	ldrb	r3, [r2, r3]
1000252a:	2b01      	cmp	r3, #1
1000252c:	d139      	bne.n	100025a2 <PWMSP001_GetTimerRegsVal+0x9a>
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
1000252e:	687b      	ldr	r3, [r7, #4]
10002530:	69db      	ldr	r3, [r3, #28]
10002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10002534:	041b      	lsls	r3, r3, #16
10002536:	60bb      	str	r3, [r7, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
10002538:	687b      	ldr	r3, [r7, #4]
1000253a:	699b      	ldr	r3, [r3, #24]
1000253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1000253e:	041b      	lsls	r3, r3, #16
10002540:	0c1a      	lsrs	r2, r3, #16
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
    {
      ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);

      TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
10002542:	68bb      	ldr	r3, [r7, #8]
10002544:	431a      	orrs	r2, r3
10002546:	683b      	ldr	r3, [r7, #0]
10002548:	609a      	str	r2, [r3, #8]
          (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
              CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));

      TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
1000254a:	687b      	ldr	r3, [r7, #4]
1000254c:	69db      	ldr	r3, [r3, #28]
1000254e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10002550:	683b      	ldr	r3, [r7, #0]
10002552:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
10002554:	683b      	ldr	r3, [r7, #0]
10002556:	681a      	ldr	r2, [r3, #0]
10002558:	687b      	ldr	r3, [r7, #4]
1000255a:	699b      	ldr	r3, [r3, #24]
1000255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000255e:	435a      	muls	r2, r3
10002560:	683b      	ldr	r3, [r7, #0]
10002562:	601a      	str	r2, [r3, #0]
      TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
10002564:	683b      	ldr	r3, [r7, #0]
10002566:	681a      	ldr	r2, [r3, #0]
10002568:	687b      	ldr	r3, [r7, #4]
1000256a:	699b      	ldr	r3, [r3, #24]
1000256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000256e:	18d2      	adds	r2, r2, r3
10002570:	683b      	ldr	r3, [r7, #0]
10002572:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
10002574:	687b      	ldr	r3, [r7, #4]
10002576:	69db      	ldr	r3, [r3, #28]
10002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000257a:	1c5a      	adds	r2, r3, #1
1000257c:	683b      	ldr	r3, [r7, #0]
1000257e:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
10002580:	683b      	ldr	r3, [r7, #0]
10002582:	685a      	ldr	r2, [r3, #4]
10002584:	687b      	ldr	r3, [r7, #4]
10002586:	699b      	ldr	r3, [r3, #24]
10002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000258a:	041b      	lsls	r3, r3, #16
1000258c:	0c1b      	lsrs	r3, r3, #16
1000258e:	3301      	adds	r3, #1
10002590:	435a      	muls	r2, r3
10002592:	683b      	ldr	r3, [r7, #0]
10002594:	605a      	str	r2, [r3, #4]
      TimerRegs->PeriodReg += 1U ;
10002596:	683b      	ldr	r3, [r7, #0]
10002598:	685b      	ldr	r3, [r3, #4]
1000259a:	1c5a      	adds	r2, r3, #1
1000259c:	683b      	ldr	r3, [r7, #0]
1000259e:	605a      	str	r2, [r3, #4]
100025a0:	e010      	b.n	100025c4 <PWMSP001_GetTimerRegsVal+0xbc>
    }

    else
    {
      TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
100025a2:	687b      	ldr	r3, [r7, #4]
100025a4:	699b      	ldr	r3, [r3, #24]
100025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100025a8:	041b      	lsls	r3, r3, #16
100025aa:	0c1a      	lsrs	r2, r3, #16
100025ac:	683b      	ldr	r3, [r7, #0]
100025ae:	609a      	str	r2, [r3, #8]
          CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);

      TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
100025b0:	687b      	ldr	r3, [r7, #4]
100025b2:	699b      	ldr	r3, [r3, #24]
100025b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
100025b6:	683b      	ldr	r3, [r7, #0]
100025b8:	601a      	str	r2, [r3, #0]
      TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
100025ba:	687b      	ldr	r3, [r7, #4]
100025bc:	699b      	ldr	r3, [r3, #24]
100025be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100025c0:	683b      	ldr	r3, [r7, #0]
100025c2:	605a      	str	r2, [r3, #4]

    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100025c4:	2300      	movs	r3, #0
100025c6:	60fb      	str	r3, [r7, #12]
  }
  return Status;
100025c8:	68fb      	ldr	r3, [r7, #12]
}
100025ca:	1c18      	adds	r0, r3, #0
100025cc:	46bd      	mov	sp, r7
100025ce:	b004      	add	sp, #16
100025d0:	bd80      	pop	{r7, pc}
100025d2:	46c0      	nop			; (mov r8, r8)

100025d4 <PWMSP001_GetPeriodReg>:
status_t PWMSP001_GetPeriodReg
(
    const PWMSP001_HandleType* HandlePtr,
    uint32_t* PeriodReg
)
{
100025d4:	b580      	push	{r7, lr}
100025d6:	b084      	sub	sp, #16
100025d8:	af00      	add	r7, sp, #0
100025da:	6078      	str	r0, [r7, #4]
100025dc:	6039      	str	r1, [r7, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
100025de:	2301      	movs	r3, #1
100025e0:	60fb      	str	r3, [r7, #12]

  /*<<<DD_PWMSP001_API_15_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100025e2:	687b      	ldr	r3, [r7, #4]
100025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100025e6:	781b      	ldrb	r3, [r3, #0]
100025e8:	2b00      	cmp	r3, #0
100025ea:	d022      	beq.n	10002632 <PWMSP001_GetPeriodReg+0x5e>
  {
	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100025ec:	687a      	ldr	r2, [r7, #4]
100025ee:	2320      	movs	r3, #32
100025f0:	5cd3      	ldrb	r3, [r2, r3]
100025f2:	2b01      	cmp	r3, #1
100025f4:	d116      	bne.n	10002624 <PWMSP001_GetPeriodReg+0x50>
    {
      *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
100025f6:	687b      	ldr	r3, [r7, #4]
100025f8:	69db      	ldr	r3, [r3, #28]
100025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100025fc:	1c5a      	adds	r2, r3, #1
100025fe:	683b      	ldr	r3, [r7, #0]
10002600:	601a      	str	r2, [r3, #0]
      *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
10002602:	683b      	ldr	r3, [r7, #0]
10002604:	681a      	ldr	r2, [r3, #0]
10002606:	687b      	ldr	r3, [r7, #4]
10002608:	699b      	ldr	r3, [r3, #24]
1000260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000260c:	041b      	lsls	r3, r3, #16
1000260e:	0c1b      	lsrs	r3, r3, #16
10002610:	3301      	adds	r3, #1
10002612:	435a      	muls	r2, r3
10002614:	683b      	ldr	r3, [r7, #0]
10002616:	601a      	str	r2, [r3, #0]
      *PeriodReg  += 1U;
10002618:	683b      	ldr	r3, [r7, #0]
1000261a:	681b      	ldr	r3, [r3, #0]
1000261c:	1c5a      	adds	r2, r3, #1
1000261e:	683b      	ldr	r3, [r7, #0]
10002620:	601a      	str	r2, [r3, #0]
10002622:	e004      	b.n	1000262e <PWMSP001_GetPeriodReg+0x5a>
    }
    else
    {
      *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
10002624:	687b      	ldr	r3, [r7, #4]
10002626:	699b      	ldr	r3, [r3, #24]
10002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000262a:	683b      	ldr	r3, [r7, #0]
1000262c:	601a      	str	r2, [r3, #0]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
1000262e:	2300      	movs	r3, #0
10002630:	60fb      	str	r3, [r7, #12]
  }
  return Status;
10002632:	68fb      	ldr	r3, [r7, #12]
}
10002634:	1c18      	adds	r0, r3, #0
10002636:	46bd      	mov	sp, r7
10002638:	b004      	add	sp, #16
1000263a:	bd80      	pop	{r7, pc}

1000263c <PWMSP001_SWRequestShadowTransfer>:
 */
status_t PWMSP001_SWRequestShadowTransfer
(
    const PWMSP001_HandleType* HandlePtr
)
{
1000263c:	b5b0      	push	{r4, r5, r7, lr}
1000263e:	b086      	sub	sp, #24
10002640:	af00      	add	r7, sp, #0
10002642:	6078      	str	r0, [r7, #4]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002644:	2301      	movs	r3, #1
10002646:	617b      	str	r3, [r7, #20]
  uint32_t Temp1;
  uint32_t Temp2;
  uint32_t Temp3;

  /*<<<DD_PWMSP001_API_10_1>>>*/
  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000264c:	781b      	ldrb	r3, [r3, #0]
1000264e:	2b00      	cmp	r3, #0
10002650:	d032      	beq.n	100026b8 <PWMSP001_SWRequestShadowTransfer+0x7c>
  }
  /*<<<DD_PWMSP001_API_10_2>>>*/
  else
  {
    /*Request shadow transfer for the First Slice*/
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002652:	687a      	ldr	r2, [r7, #4]
10002654:	2320      	movs	r3, #32
10002656:	5cd3      	ldrb	r3, [r2, r3]
10002658:	2b01      	cmp	r3, #1
1000265a:	d11a      	bne.n	10002692 <PWMSP001_SWRequestShadowTransfer+0x56>
    {
      /*Request shadow transfer for the Second Slice*/
      Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
1000265c:	687a      	ldr	r2, [r7, #4]
1000265e:	2337      	movs	r3, #55	; 0x37
10002660:	5cd3      	ldrb	r3, [r2, r3]
10002662:	009b      	lsls	r3, r3, #2
10002664:	613b      	str	r3, [r7, #16]
      Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
10002666:	687a      	ldr	r2, [r7, #4]
10002668:	2338      	movs	r3, #56	; 0x38
1000266a:	5cd3      	ldrb	r3, [r2, r3]
1000266c:	009b      	lsls	r3, r3, #2
1000266e:	60fb      	str	r3, [r7, #12]
      HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
10002670:	687b      	ldr	r3, [r7, #4]
10002672:	695b      	ldr	r3, [r3, #20]
10002674:	687a      	ldr	r2, [r7, #4]
10002676:	6952      	ldr	r2, [r2, #20]
10002678:	6911      	ldr	r1, [r2, #16]
1000267a:	693a      	ldr	r2, [r7, #16]
1000267c:	2001      	movs	r0, #1
1000267e:	4090      	lsls	r0, r2
10002680:	68fa      	ldr	r2, [r7, #12]
10002682:	2401      	movs	r4, #1
10002684:	1c25      	adds	r5, r4, #0
10002686:	4095      	lsls	r5, r2
10002688:	1c2a      	adds	r2, r5, #0
1000268a:	4302      	orrs	r2, r0
1000268c:	430a      	orrs	r2, r1
1000268e:	611a      	str	r2, [r3, #16]
10002690:	e010      	b.n	100026b4 <PWMSP001_SWRequestShadowTransfer+0x78>
    }
    else
    {
      Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
10002692:	687a      	ldr	r2, [r7, #4]
10002694:	2337      	movs	r3, #55	; 0x37
10002696:	5cd3      	ldrb	r3, [r2, r3]
10002698:	009b      	lsls	r3, r3, #2
1000269a:	60bb      	str	r3, [r7, #8]
      HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
1000269c:	687b      	ldr	r3, [r7, #4]
1000269e:	695b      	ldr	r3, [r3, #20]
100026a0:	687a      	ldr	r2, [r7, #4]
100026a2:	6952      	ldr	r2, [r2, #20]
100026a4:	6911      	ldr	r1, [r2, #16]
100026a6:	68ba      	ldr	r2, [r7, #8]
100026a8:	2001      	movs	r0, #1
100026aa:	1c04      	adds	r4, r0, #0
100026ac:	4094      	lsls	r4, r2
100026ae:	1c22      	adds	r2, r4, #0
100026b0:	430a      	orrs	r2, r1
100026b2:	611a      	str	r2, [r3, #16]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100026b4:	2300      	movs	r3, #0
100026b6:	617b      	str	r3, [r7, #20]
  }
  return Status;
100026b8:	697b      	ldr	r3, [r7, #20]
}
100026ba:	1c18      	adds	r0, r3, #0
100026bc:	46bd      	mov	sp, r7
100026be:	b006      	add	sp, #24
100026c0:	bdb0      	pop	{r4, r5, r7, pc}
100026c2:	46c0      	nop			; (mov r8, r8)

100026c4 <PWMSP001_ResetTrapFlag>:
/*<<<DD_PWMSP001_API_13>>>*/
/*
 * This function resets the trap flag if trap condition is inactive
 */
void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
{
100026c4:	b580      	push	{r7, lr}
100026c6:	b082      	sub	sp, #8
100026c8:	af00      	add	r7, sp, #0
100026ca:	6078      	str	r0, [r7, #4]
   if (HandlePtr->kTrapExitControl == (uint8_t)SET)
100026cc:	687b      	ldr	r3, [r7, #4]
100026ce:	7cdb      	ldrb	r3, [r3, #19]
100026d0:	2b01      	cmp	r3, #1
100026d2:	d11a      	bne.n	1000270a <PWMSP001_ResetTrapFlag+0x46>
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
100026d4:	687b      	ldr	r3, [r7, #4]
100026d6:	699a      	ldr	r2, [r3, #24]
100026d8:	687b      	ldr	r3, [r7, #4]
100026da:	6999      	ldr	r1, [r3, #24]
100026dc:	23b0      	movs	r3, #176	; 0xb0
100026de:	58cb      	ldr	r3, [r1, r3]
100026e0:	2180      	movs	r1, #128	; 0x80
100026e2:	00c9      	lsls	r1, r1, #3
100026e4:	4319      	orrs	r1, r3
100026e6:	23b0      	movs	r3, #176	; 0xb0
100026e8:	50d1      	str	r1, [r2, r3]
      if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
100026ea:	687a      	ldr	r2, [r7, #4]
100026ec:	2320      	movs	r3, #32
100026ee:	5cd3      	ldrb	r3, [r2, r3]
100026f0:	2b01      	cmp	r3, #1
100026f2:	d10a      	bne.n	1000270a <PWMSP001_ResetTrapFlag+0x46>
      {
        SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
100026f4:	687b      	ldr	r3, [r7, #4]
100026f6:	69da      	ldr	r2, [r3, #28]
100026f8:	687b      	ldr	r3, [r7, #4]
100026fa:	69d9      	ldr	r1, [r3, #28]
100026fc:	23b0      	movs	r3, #176	; 0xb0
100026fe:	58cb      	ldr	r3, [r1, r3]
10002700:	2180      	movs	r1, #128	; 0x80
10002702:	00c9      	lsls	r1, r1, #3
10002704:	4319      	orrs	r1, r3
10002706:	23b0      	movs	r3, #176	; 0xb0
10002708:	50d1      	str	r1, [r2, r3]
      }
    }
    SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
1000270a:	687b      	ldr	r3, [r7, #4]
1000270c:	699a      	ldr	r2, [r3, #24]
1000270e:	687b      	ldr	r3, [r7, #4]
10002710:	6999      	ldr	r1, [r3, #24]
10002712:	23b0      	movs	r3, #176	; 0xb0
10002714:	58cb      	ldr	r3, [r1, r3]
10002716:	2180      	movs	r1, #128	; 0x80
10002718:	0109      	lsls	r1, r1, #4
1000271a:	4319      	orrs	r1, r3
1000271c:	23b0      	movs	r3, #176	; 0xb0
1000271e:	50d1      	str	r1, [r2, r3]
    if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002720:	687a      	ldr	r2, [r7, #4]
10002722:	2320      	movs	r3, #32
10002724:	5cd3      	ldrb	r3, [r2, r3]
10002726:	2b01      	cmp	r3, #1
10002728:	d10a      	bne.n	10002740 <PWMSP001_ResetTrapFlag+0x7c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
1000272a:	687b      	ldr	r3, [r7, #4]
1000272c:	69da      	ldr	r2, [r3, #28]
1000272e:	687b      	ldr	r3, [r7, #4]
10002730:	69d9      	ldr	r1, [r3, #28]
10002732:	23b0      	movs	r3, #176	; 0xb0
10002734:	58cb      	ldr	r3, [r1, r3]
10002736:	2180      	movs	r1, #128	; 0x80
10002738:	0109      	lsls	r1, r1, #4
1000273a:	4319      	orrs	r1, r3
1000273c:	23b0      	movs	r3, #176	; 0xb0
1000273e:	50d1      	str	r1, [r2, r3]
    }
}
10002740:	46bd      	mov	sp, r7
10002742:	b002      	add	sp, #8
10002744:	bd80      	pop	{r7, pc}
10002746:	46c0      	nop			; (mov r8, r8)

10002748 <PWMSP001_lConfigureSecondSlice>:
/*
 * This function configures second slice.
 */

void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
{
10002748:	b5b0      	push	{r4, r5, r7, lr}
1000274a:	b082      	sub	sp, #8
1000274c:	af00      	add	r7, sp, #0
1000274e:	6078      	str	r0, [r7, #4]
  HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
10002750:	687b      	ldr	r3, [r7, #4]
10002752:	69db      	ldr	r3, [r3, #28]
10002754:	2207      	movs	r2, #7
10002756:	611a      	str	r2, [r3, #16]

  /*Set period and compare values for second slice*/
  HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
10002758:	687b      	ldr	r3, [r7, #4]
1000275a:	69db      	ldr	r3, [r3, #28]
1000275c:	687a      	ldr	r2, [r7, #4]
1000275e:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002760:	0c12      	lsrs	r2, r2, #16
10002762:	635a      	str	r2, [r3, #52]	; 0x34
      >> 16U);
  HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
10002764:	687b      	ldr	r3, [r7, #4]
10002766:	69db      	ldr	r3, [r3, #28]
10002768:	687a      	ldr	r2, [r7, #4]
1000276a:	6892      	ldr	r2, [r2, #8]
1000276c:	0c12      	lsrs	r2, r2, #16
1000276e:	63da      	str	r2, [r3, #60]	; 0x3c
      >> 16U);

  HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
10002770:	687b      	ldr	r3, [r7, #4]
10002772:	69db      	ldr	r3, [r3, #28]
10002774:	687a      	ldr	r2, [r7, #4]
10002776:	69d2      	ldr	r2, [r2, #28]
10002778:	6852      	ldr	r2, [r2, #4]
1000277a:	2180      	movs	r1, #128	; 0x80
1000277c:	0349      	lsls	r1, r1, #13
1000277e:	430a      	orrs	r2, r1
10002780:	605a      	str	r2, [r3, #4]

  /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
  if (HandlePtr->kExtStopTrig == (uint8_t)SET)
10002782:	687b      	ldr	r3, [r7, #4]
10002784:	7bdb      	ldrb	r3, [r3, #15]
10002786:	2b01      	cmp	r3, #1
10002788:	d125      	bne.n	100027d6 <PWMSP001_lConfigureSecondSlice+0x8e>
  {
    HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF1M_Msk);
1000278a:	687b      	ldr	r3, [r7, #4]
1000278c:	69db      	ldr	r3, [r3, #28]
1000278e:	687a      	ldr	r2, [r7, #4]
10002790:	69d2      	ldr	r2, [r2, #28]
10002792:	6811      	ldr	r1, [r2, #0]
10002794:	4a79      	ldr	r2, [pc, #484]	; (1000297c <PWMSP001_lConfigureSecondSlice+0x234>)
10002796:	400a      	ands	r2, r1
10002798:	601a      	str	r2, [r3, #0]
    HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
1000279a:	687b      	ldr	r3, [r7, #4]
1000279c:	69db      	ldr	r3, [r3, #28]
1000279e:	687a      	ldr	r2, [r7, #4]
100027a0:	69d2      	ldr	r2, [r2, #28]
100027a2:	6852      	ldr	r2, [r2, #4]
100027a4:	210c      	movs	r1, #12
100027a6:	438a      	bics	r2, r1
100027a8:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
100027aa:	687b      	ldr	r3, [r7, #4]
100027ac:	69db      	ldr	r3, [r3, #28]
100027ae:	687a      	ldr	r2, [r7, #4]
100027b0:	69d2      	ldr	r2, [r2, #28]
100027b2:	6811      	ldr	r1, [r2, #0]
100027b4:	6878      	ldr	r0, [r7, #4]
100027b6:	2224      	movs	r2, #36	; 0x24
100027b8:	5c82      	ldrb	r2, [r0, r2]
100027ba:	0490      	lsls	r0, r2, #18
100027bc:	22c0      	movs	r2, #192	; 0xc0
100027be:	0312      	lsls	r2, r2, #12
100027c0:	4002      	ands	r2, r0
100027c2:	430a      	orrs	r2, r1
100027c4:	601a      	str	r2, [r3, #0]
      (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
    HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
100027c6:	687b      	ldr	r3, [r7, #4]
100027c8:	69db      	ldr	r3, [r3, #28]
100027ca:	687a      	ldr	r2, [r7, #4]
100027cc:	69d2      	ldr	r2, [r2, #28]
100027ce:	6852      	ldr	r2, [r2, #4]
100027d0:	2108      	movs	r1, #8
100027d2:	430a      	orrs	r2, r1
100027d4:	605a      	str	r2, [r3, #4]
      (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
  }/*End of if (HandlePtr->kExtStopTrig == SET)*/

  /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
100027d6:	687b      	ldr	r3, [r7, #4]
100027d8:	7c5b      	ldrb	r3, [r3, #17]
100027da:	2b01      	cmp	r3, #1
100027dc:	d125      	bne.n	1000282a <PWMSP001_lConfigureSecondSlice+0xe2>
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
100027de:	687b      	ldr	r3, [r7, #4]
100027e0:	69db      	ldr	r3, [r3, #28]
100027e2:	687a      	ldr	r2, [r7, #4]
100027e4:	69d2      	ldr	r2, [r2, #28]
100027e6:	6811      	ldr	r1, [r2, #0]
100027e8:	4a65      	ldr	r2, [pc, #404]	; (10002980 <PWMSP001_lConfigureSecondSlice+0x238>)
100027ea:	400a      	ands	r2, r1
100027ec:	601a      	str	r2, [r3, #0]
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
100027ee:	687b      	ldr	r3, [r7, #4]
100027f0:	69db      	ldr	r3, [r3, #28]
100027f2:	687a      	ldr	r2, [r7, #4]
100027f4:	69d2      	ldr	r2, [r2, #28]
100027f6:	6851      	ldr	r1, [r2, #4]
100027f8:	4a62      	ldr	r2, [pc, #392]	; (10002984 <PWMSP001_lConfigureSecondSlice+0x23c>)
100027fa:	400a      	ands	r2, r1
100027fc:	605a      	str	r2, [r3, #4]
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
100027fe:	687b      	ldr	r3, [r7, #4]
10002800:	69db      	ldr	r3, [r3, #28]
10002802:	687a      	ldr	r2, [r7, #4]
10002804:	69d2      	ldr	r2, [r2, #28]
10002806:	6811      	ldr	r1, [r2, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
10002808:	687a      	ldr	r2, [r7, #4]
1000280a:	7812      	ldrb	r2, [r2, #0]
1000280c:	0610      	lsls	r0, r2, #24
  if (HandlePtr->kTrapEnable == (uint8_t)SET)
  {
    HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
        | CCU4_CC4_INS_LPF2M_Msk);
    HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
    HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
1000280e:	2280      	movs	r2, #128	; 0x80
10002810:	0452      	lsls	r2, r2, #17
10002812:	4002      	ands	r2, r0
10002814:	430a      	orrs	r2, r1
10002816:	601a      	str	r2, [r3, #0]
        ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
            ((((uint32_t)HandlePtr->kTrapLevel  <<	\
                CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
                    CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
    HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
10002818:	687b      	ldr	r3, [r7, #4]
1000281a:	69db      	ldr	r3, [r3, #28]
1000281c:	687a      	ldr	r2, [r7, #4]
1000281e:	69d2      	ldr	r2, [r2, #28]
10002820:	6852      	ldr	r2, [r2, #4]
10002822:	2180      	movs	r1, #128	; 0x80
10002824:	0289      	lsls	r1, r1, #10
10002826:	430a      	orrs	r2, r1
10002828:	605a      	str	r2, [r3, #4]
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
1000282a:	687b      	ldr	r3, [r7, #4]
1000282c:	69db      	ldr	r3, [r3, #28]
1000282e:	687a      	ldr	r2, [r7, #4]
10002830:	69d2      	ldr	r2, [r2, #28]
10002832:	6951      	ldr	r1, [r2, #20]
10002834:	4a54      	ldr	r2, [pc, #336]	; (10002988 <PWMSP001_lConfigureSecondSlice+0x240>)
10002836:	400a      	ands	r2, r1
10002838:	615a      	str	r2, [r3, #20]
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
1000283a:	687b      	ldr	r3, [r7, #4]
1000283c:	69db      	ldr	r3, [r3, #28]
1000283e:	6879      	ldr	r1, [r7, #4]
10002840:	2236      	movs	r2, #54	; 0x36
10002842:	5c8a      	ldrb	r2, [r1, r2]
10002844:	1c11      	adds	r1, r2, #0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
10002846:	2201      	movs	r2, #1
10002848:	4011      	ands	r1, r2
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
1000284a:	687a      	ldr	r2, [r7, #4]
1000284c:	7b12      	ldrb	r2, [r2, #12]
1000284e:	0050      	lsls	r0, r2, #1
10002850:	2202      	movs	r2, #2
10002852:	4002      	ands	r2, r0
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
10002854:	4311      	orrs	r1, r2
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
10002856:	6878      	ldr	r0, [r7, #4]
10002858:	2234      	movs	r2, #52	; 0x34
1000285a:	5c82      	ldrb	r2, [r0, r2]
1000285c:	0290      	lsls	r0, r2, #10
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
1000285e:	2280      	movs	r2, #128	; 0x80
10002860:	00d2      	lsls	r2, r2, #3
10002862:	4002      	ands	r2, r0
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
10002864:	4311      	orrs	r1, r2
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
10002866:	6878      	ldr	r0, [r7, #4]
10002868:	2235      	movs	r2, #53	; 0x35
1000286a:	5c82      	ldrb	r2, [r0, r2]
1000286c:	0210      	lsls	r0, r2, #8
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
1000286e:	22c0      	movs	r2, #192	; 0xc0
10002870:	0092      	lsls	r2, r2, #2
10002872:	4002      	ands	r2, r0
    (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
      (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
10002874:	430a      	orrs	r2, r1
  }/*End of if (HandlePtr->kTrapEnable == SET)*/

  HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
      | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
      | CCU4_CC4_TC_DITHE_Msk);
  HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
10002876:	615a      	str	r2, [r3, #20]
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	69db      	ldr	r3, [r3, #28]
1000287c:	687a      	ldr	r2, [r7, #4]
1000287e:	69d2      	ldr	r2, [r2, #28]
10002880:	6951      	ldr	r1, [r2, #20]
10002882:	6878      	ldr	r0, [r7, #4]
10002884:	2221      	movs	r2, #33	; 0x21
10002886:	5c82      	ldrb	r2, [r0, r2]
10002888:	0350      	lsls	r0, r2, #13
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
1000288a:	22c0      	movs	r2, #192	; 0xc0
1000288c:	01d2      	lsls	r2, r2, #7
1000288e:	4002      	ands	r2, r0
            (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
                (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);

  /*<<<DD_PWMSP001_API_non1_5>>>*/
  HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITHE_Pos)\
10002890:	430a      	orrs	r2, r1
10002892:	615a      	str	r2, [r3, #20]
    &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
  WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
10002894:	687b      	ldr	r3, [r7, #4]
10002896:	69db      	ldr	r3, [r3, #28]
10002898:	687a      	ldr	r2, [r7, #4]
1000289a:	7b52      	ldrb	r2, [r2, #13]
1000289c:	1c11      	adds	r1, r2, #0
1000289e:	220f      	movs	r2, #15
100028a0:	4011      	ands	r1, r2
100028a2:	687a      	ldr	r2, [r7, #4]
100028a4:	69d2      	ldr	r2, [r2, #28]
100028a6:	6a12      	ldr	r2, [r2, #32]
100028a8:	200f      	movs	r0, #15
100028aa:	4382      	bics	r2, r0
100028ac:	430a      	orrs	r2, r1
100028ae:	621a      	str	r2, [r3, #32]
    (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);

  /*<<<DD_PWMSP001_API_non1_6>>>*/
  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
100028b0:	687b      	ldr	r3, [r7, #4]
100028b2:	69db      	ldr	r3, [r3, #28]
100028b4:	687a      	ldr	r2, [r7, #4]
100028b6:	7c92      	ldrb	r2, [r2, #18]
100028b8:	0551      	lsls	r1, r2, #21
100028ba:	2280      	movs	r2, #128	; 0x80
100028bc:	0392      	lsls	r2, r2, #14
100028be:	4011      	ands	r1, r2
100028c0:	687a      	ldr	r2, [r7, #4]
100028c2:	69d2      	ldr	r2, [r2, #28]
100028c4:	6950      	ldr	r0, [r2, #20]
100028c6:	4a31      	ldr	r2, [pc, #196]	; (1000298c <PWMSP001_lConfigureSecondSlice+0x244>)
100028c8:	4002      	ands	r2, r0
100028ca:	430a      	orrs	r2, r1
100028cc:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
100028ce:	687b      	ldr	r3, [r7, #4]
100028d0:	69db      	ldr	r3, [r3, #28]
100028d2:	687a      	ldr	r2, [r7, #4]
100028d4:	7cd2      	ldrb	r2, [r2, #19]
100028d6:	0591      	lsls	r1, r2, #22
100028d8:	2280      	movs	r2, #128	; 0x80
100028da:	03d2      	lsls	r2, r2, #15
100028dc:	4011      	ands	r1, r2
100028de:	687a      	ldr	r2, [r7, #4]
100028e0:	69d2      	ldr	r2, [r2, #28]
100028e2:	6950      	ldr	r0, [r2, #20]
100028e4:	4a2a      	ldr	r2, [pc, #168]	; (10002990 <PWMSP001_lConfigureSecondSlice+0x248>)
100028e6:	4002      	ands	r2, r0
100028e8:	430a      	orrs	r2, r1
100028ea:	615a      	str	r2, [r3, #20]
      (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);

  WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
100028ec:	687b      	ldr	r3, [r7, #4]
100028ee:	69db      	ldr	r3, [r3, #28]
100028f0:	687a      	ldr	r2, [r7, #4]
100028f2:	7c52      	ldrb	r2, [r2, #17]
100028f4:	0451      	lsls	r1, r2, #17
100028f6:	2280      	movs	r2, #128	; 0x80
100028f8:	0292      	lsls	r2, r2, #10
100028fa:	4011      	ands	r1, r2
100028fc:	687a      	ldr	r2, [r7, #4]
100028fe:	69d2      	ldr	r2, [r2, #28]
10002900:	6950      	ldr	r0, [r2, #20]
10002902:	4a20      	ldr	r2, [pc, #128]	; (10002984 <PWMSP001_lConfigureSecondSlice+0x23c>)
10002904:	4002      	ands	r2, r0
10002906:	430a      	orrs	r2, r1
10002908:	615a      	str	r2, [r3, #20]
	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
  
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	69db      	ldr	r3, [r3, #28]
1000290e:	6879      	ldr	r1, [r7, #4]
10002910:	2222      	movs	r2, #34	; 0x22
10002912:	5c8a      	ldrb	r2, [r1, r2]
10002914:	1c11      	adds	r1, r2, #0
10002916:	220f      	movs	r2, #15
10002918:	4011      	ands	r1, r2
1000291a:	687a      	ldr	r2, [r7, #4]
1000291c:	69d2      	ldr	r2, [r2, #28]
1000291e:	6a52      	ldr	r2, [r2, #36]	; 0x24
10002920:	200f      	movs	r0, #15
10002922:	4382      	bics	r2, r0
10002924:	430a      	orrs	r2, r1
10002926:	625a      	str	r2, [r3, #36]	; 0x24
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
10002928:	687b      	ldr	r3, [r7, #4]
1000292a:	69db      	ldr	r3, [r3, #28]
1000292c:	687a      	ldr	r2, [r7, #4]
1000292e:	7c12      	ldrb	r2, [r2, #16]
10002930:	619a      	str	r2, [r3, #24]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	695b      	ldr	r3, [r3, #20]
10002936:	687a      	ldr	r2, [r7, #4]
10002938:	6952      	ldr	r2, [r2, #20]
1000293a:	6911      	ldr	r1, [r2, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
1000293c:	6878      	ldr	r0, [r7, #4]
1000293e:	2238      	movs	r2, #56	; 0x38
10002940:	5c82      	ldrb	r2, [r0, r2]
10002942:	0092      	lsls	r2, r2, #2
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
10002944:	2001      	movs	r0, #1
10002946:	4090      	lsls	r0, r2
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
10002948:	687c      	ldr	r4, [r7, #4]
1000294a:	2238      	movs	r2, #56	; 0x38
1000294c:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
1000294e:	0092      	lsls	r2, r2, #2
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
10002950:	3201      	adds	r2, #1

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
10002952:	2401      	movs	r4, #1
10002954:	1c25      	adds	r5, r4, #0
10002956:	4095      	lsls	r5, r2
10002958:	1c2a      	adds	r2, r5, #0
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
1000295a:	4310      	orrs	r0, r2
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
1000295c:	687c      	ldr	r4, [r7, #4]
1000295e:	2238      	movs	r2, #56	; 0x38
10002960:	5ca2      	ldrb	r2, [r4, r2]

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
10002962:	0092      	lsls	r2, r2, #2
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
10002964:	3202      	adds	r2, #2

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
10002966:	2401      	movs	r4, #1
10002968:	1c25      	adds	r5, r4, #0
1000296a:	4095      	lsls	r5, r2
1000296c:	1c2a      	adds	r2, r5, #0
  WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
      (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);

  HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;

  HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
1000296e:	4302      	orrs	r2, r0
10002970:	430a      	orrs	r2, r1
10002972:	611a      	str	r2, [r3, #16]
      ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
      ((uint32_t)0x01 << (((uint32_t)4 * \
	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
          (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
}
10002974:	46bd      	mov	sp, r7
10002976:	b002      	add	sp, #8
10002978:	bdb0      	pop	{r4, r5, r7, pc}
1000297a:	46c0      	nop			; (mov r8, r8)
1000297c:	e7f3ffff 	.word	0xe7f3ffff
10002980:	9ecfffff 	.word	0x9ecfffff
10002984:	fffdffff 	.word	0xfffdffff
10002988:	ffff98f4 	.word	0xffff98f4
1000298c:	ffdfffff 	.word	0xffdfffff
10002990:	ffbfffff 	.word	0xffbfffff

10002994 <PWMSP001_EnableEvent>:
status_t PWMSP001_EnableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10002994:	b590      	push	{r4, r7, lr}
10002996:	b085      	sub	sp, #20
10002998:	af00      	add	r7, sp, #0
1000299a:	6078      	str	r0, [r7, #4]
1000299c:	1c0a      	adds	r2, r1, #0
1000299e:	1cfb      	adds	r3, r7, #3
100029a0:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
100029a2:	2301      	movs	r3, #1
100029a4:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
100029a6:	687b      	ldr	r3, [r7, #4]
100029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100029aa:	781b      	ldrb	r3, [r3, #0]
100029ac:	2b00      	cmp	r3, #0
100029ae:	d102      	bne.n	100029b6 <PWMSP001_EnableEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
100029b0:	2301      	movs	r3, #1
100029b2:	60fb      	str	r3, [r7, #12]
100029b4:	e025      	b.n	10002a02 <PWMSP001_EnableEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
100029b6:	687a      	ldr	r2, [r7, #4]
100029b8:	2320      	movs	r3, #32
100029ba:	5cd3      	ldrb	r3, [r2, r3]
100029bc:	2b01      	cmp	r3, #1
100029be:	d10f      	bne.n	100029e0 <PWMSP001_EnableEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
100029c0:	687b      	ldr	r3, [r7, #4]
100029c2:	69da      	ldr	r2, [r3, #28]
100029c4:	687b      	ldr	r3, [r7, #4]
100029c6:	69d9      	ldr	r1, [r3, #28]
100029c8:	23a4      	movs	r3, #164	; 0xa4
100029ca:	58c9      	ldr	r1, [r1, r3]
100029cc:	1cfb      	adds	r3, r7, #3
100029ce:	781b      	ldrb	r3, [r3, #0]
100029d0:	2001      	movs	r0, #1
100029d2:	1c04      	adds	r4, r0, #0
100029d4:	409c      	lsls	r4, r3
100029d6:	1c23      	adds	r3, r4, #0
100029d8:	4319      	orrs	r1, r3
100029da:	23a4      	movs	r3, #164	; 0xa4
100029dc:	50d1      	str	r1, [r2, r3]
100029de:	e00e      	b.n	100029fe <PWMSP001_EnableEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
100029e0:	687b      	ldr	r3, [r7, #4]
100029e2:	699a      	ldr	r2, [r3, #24]
100029e4:	687b      	ldr	r3, [r7, #4]
100029e6:	6999      	ldr	r1, [r3, #24]
100029e8:	23a4      	movs	r3, #164	; 0xa4
100029ea:	58c9      	ldr	r1, [r1, r3]
100029ec:	1cfb      	adds	r3, r7, #3
100029ee:	781b      	ldrb	r3, [r3, #0]
100029f0:	2001      	movs	r0, #1
100029f2:	1c04      	adds	r4, r0, #0
100029f4:	409c      	lsls	r4, r3
100029f6:	1c23      	adds	r3, r4, #0
100029f8:	4319      	orrs	r1, r3
100029fa:	23a4      	movs	r3, #164	; 0xa4
100029fc:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
100029fe:	2300      	movs	r3, #0
10002a00:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10002a02:	68fb      	ldr	r3, [r7, #12]
}
10002a04:	1c18      	adds	r0, r3, #0
10002a06:	46bd      	mov	sp, r7
10002a08:	b005      	add	sp, #20
10002a0a:	bd90      	pop	{r4, r7, pc}

10002a0c <PWMSP001_DisableEvent>:
status_t PWMSP001_DisableEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10002a0c:	b590      	push	{r4, r7, lr}
10002a0e:	b085      	sub	sp, #20
10002a10:	af00      	add	r7, sp, #0
10002a12:	6078      	str	r0, [r7, #4]
10002a14:	1c0a      	adds	r2, r1, #0
10002a16:	1cfb      	adds	r3, r7, #3
10002a18:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002a1a:	2301      	movs	r3, #1
10002a1c:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10002a1e:	687b      	ldr	r3, [r7, #4]
10002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a22:	781b      	ldrb	r3, [r3, #0]
10002a24:	2b00      	cmp	r3, #0
10002a26:	d102      	bne.n	10002a2e <PWMSP001_DisableEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002a28:	2301      	movs	r3, #1
10002a2a:	60fb      	str	r3, [r7, #12]
10002a2c:	e027      	b.n	10002a7e <PWMSP001_DisableEvent+0x72>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002a2e:	687a      	ldr	r2, [r7, #4]
10002a30:	2320      	movs	r3, #32
10002a32:	5cd3      	ldrb	r3, [r2, r3]
10002a34:	2b01      	cmp	r3, #1
10002a36:	d110      	bne.n	10002a5a <PWMSP001_DisableEvent+0x4e>
    {
      CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
10002a38:	687b      	ldr	r3, [r7, #4]
10002a3a:	69da      	ldr	r2, [r3, #28]
10002a3c:	687b      	ldr	r3, [r7, #4]
10002a3e:	69d9      	ldr	r1, [r3, #28]
10002a40:	23a4      	movs	r3, #164	; 0xa4
10002a42:	58cb      	ldr	r3, [r1, r3]
10002a44:	1cf9      	adds	r1, r7, #3
10002a46:	7809      	ldrb	r1, [r1, #0]
10002a48:	2001      	movs	r0, #1
10002a4a:	1c04      	adds	r4, r0, #0
10002a4c:	408c      	lsls	r4, r1
10002a4e:	1c21      	adds	r1, r4, #0
10002a50:	43c9      	mvns	r1, r1
10002a52:	4019      	ands	r1, r3
10002a54:	23a4      	movs	r3, #164	; 0xa4
10002a56:	50d1      	str	r1, [r2, r3]
10002a58:	e00f      	b.n	10002a7a <PWMSP001_DisableEvent+0x6e>
    }
    else
    {
      CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	699a      	ldr	r2, [r3, #24]
10002a5e:	687b      	ldr	r3, [r7, #4]
10002a60:	6999      	ldr	r1, [r3, #24]
10002a62:	23a4      	movs	r3, #164	; 0xa4
10002a64:	58cb      	ldr	r3, [r1, r3]
10002a66:	1cf9      	adds	r1, r7, #3
10002a68:	7809      	ldrb	r1, [r1, #0]
10002a6a:	2001      	movs	r0, #1
10002a6c:	1c04      	adds	r4, r0, #0
10002a6e:	408c      	lsls	r4, r1
10002a70:	1c21      	adds	r1, r4, #0
10002a72:	43c9      	mvns	r1, r1
10002a74:	4019      	ands	r1, r3
10002a76:	23a4      	movs	r3, #164	; 0xa4
10002a78:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10002a7a:	2300      	movs	r3, #0
10002a7c:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10002a7e:	68fb      	ldr	r3, [r7, #12]
}
10002a80:	1c18      	adds	r0, r3, #0
10002a82:	46bd      	mov	sp, r7
10002a84:	b005      	add	sp, #20
10002a86:	bd90      	pop	{r4, r7, pc}

10002a88 <PWMSP001_ClearPendingEvent>:
status_t PWMSP001_ClearPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10002a88:	b590      	push	{r4, r7, lr}
10002a8a:	b085      	sub	sp, #20
10002a8c:	af00      	add	r7, sp, #0
10002a8e:	6078      	str	r0, [r7, #4]
10002a90:	1c0a      	adds	r2, r1, #0
10002a92:	1cfb      	adds	r3, r7, #3
10002a94:	701a      	strb	r2, [r3, #0]
  status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002a96:	2301      	movs	r3, #1
10002a98:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002a9e:	781b      	ldrb	r3, [r3, #0]
10002aa0:	2b00      	cmp	r3, #0
10002aa2:	d102      	bne.n	10002aaa <PWMSP001_ClearPendingEvent+0x22>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002aa4:	2301      	movs	r3, #1
10002aa6:	60fb      	str	r3, [r7, #12]
10002aa8:	e025      	b.n	10002af6 <PWMSP001_ClearPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002aaa:	687a      	ldr	r2, [r7, #4]
10002aac:	2320      	movs	r3, #32
10002aae:	5cd3      	ldrb	r3, [r2, r3]
10002ab0:	2b01      	cmp	r3, #1
10002ab2:	d10f      	bne.n	10002ad4 <PWMSP001_ClearPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
10002ab4:	687b      	ldr	r3, [r7, #4]
10002ab6:	69da      	ldr	r2, [r3, #28]
10002ab8:	687b      	ldr	r3, [r7, #4]
10002aba:	69d9      	ldr	r1, [r3, #28]
10002abc:	23b0      	movs	r3, #176	; 0xb0
10002abe:	58c9      	ldr	r1, [r1, r3]
10002ac0:	1cfb      	adds	r3, r7, #3
10002ac2:	781b      	ldrb	r3, [r3, #0]
10002ac4:	2001      	movs	r0, #1
10002ac6:	1c04      	adds	r4, r0, #0
10002ac8:	409c      	lsls	r4, r3
10002aca:	1c23      	adds	r3, r4, #0
10002acc:	4319      	orrs	r1, r3
10002ace:	23b0      	movs	r3, #176	; 0xb0
10002ad0:	50d1      	str	r1, [r2, r3]
10002ad2:	e00e      	b.n	10002af2 <PWMSP001_ClearPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
10002ad4:	687b      	ldr	r3, [r7, #4]
10002ad6:	699a      	ldr	r2, [r3, #24]
10002ad8:	687b      	ldr	r3, [r7, #4]
10002ada:	6999      	ldr	r1, [r3, #24]
10002adc:	23b0      	movs	r3, #176	; 0xb0
10002ade:	58c9      	ldr	r1, [r1, r3]
10002ae0:	1cfb      	adds	r3, r7, #3
10002ae2:	781b      	ldrb	r3, [r3, #0]
10002ae4:	2001      	movs	r0, #1
10002ae6:	1c04      	adds	r4, r0, #0
10002ae8:	409c      	lsls	r4, r3
10002aea:	1c23      	adds	r3, r4, #0
10002aec:	4319      	orrs	r1, r3
10002aee:	23b0      	movs	r3, #176	; 0xb0
10002af0:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10002af2:	2300      	movs	r3, #0
10002af4:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10002af6:	68fb      	ldr	r3, [r7, #12]
}
10002af8:	1c18      	adds	r0, r3, #0
10002afa:	46bd      	mov	sp, r7
10002afc:	b005      	add	sp, #20
10002afe:	bd90      	pop	{r4, r7, pc}

10002b00 <PWMSP001_SetPendingEvent>:
status_t PWMSP001_SetPendingEvent
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event
)
{
10002b00:	b590      	push	{r4, r7, lr}
10002b02:	b085      	sub	sp, #20
10002b04:	af00      	add	r7, sp, #0
10002b06:	6078      	str	r0, [r7, #4]
10002b08:	1c0a      	adds	r2, r1, #0
10002b0a:	1cfb      	adds	r3, r7, #3
10002b0c:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002b0e:	2301      	movs	r3, #1
10002b10:	60fb      	str	r3, [r7, #12]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10002b12:	687b      	ldr	r3, [r7, #4]
10002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002b16:	781b      	ldrb	r3, [r3, #0]
10002b18:	2b00      	cmp	r3, #0
10002b1a:	d102      	bne.n	10002b22 <PWMSP001_SetPendingEvent+0x22>
  {
    Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002b1c:	2301      	movs	r3, #1
10002b1e:	60fb      	str	r3, [r7, #12]
10002b20:	e025      	b.n	10002b6e <PWMSP001_SetPendingEvent+0x6e>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002b22:	687a      	ldr	r2, [r7, #4]
10002b24:	2320      	movs	r3, #32
10002b26:	5cd3      	ldrb	r3, [r2, r3]
10002b28:	2b01      	cmp	r3, #1
10002b2a:	d10f      	bne.n	10002b4c <PWMSP001_SetPendingEvent+0x4c>
    {
      SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
10002b2c:	687b      	ldr	r3, [r7, #4]
10002b2e:	69da      	ldr	r2, [r3, #28]
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	69d9      	ldr	r1, [r3, #28]
10002b34:	23ac      	movs	r3, #172	; 0xac
10002b36:	58c9      	ldr	r1, [r1, r3]
10002b38:	1cfb      	adds	r3, r7, #3
10002b3a:	781b      	ldrb	r3, [r3, #0]
10002b3c:	2001      	movs	r0, #1
10002b3e:	1c04      	adds	r4, r0, #0
10002b40:	409c      	lsls	r4, r3
10002b42:	1c23      	adds	r3, r4, #0
10002b44:	4319      	orrs	r1, r3
10002b46:	23ac      	movs	r3, #172	; 0xac
10002b48:	50d1      	str	r1, [r2, r3]
10002b4a:	e00e      	b.n	10002b6a <PWMSP001_SetPendingEvent+0x6a>
    }
    else
    {
      SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
10002b4c:	687b      	ldr	r3, [r7, #4]
10002b4e:	699a      	ldr	r2, [r3, #24]
10002b50:	687b      	ldr	r3, [r7, #4]
10002b52:	6999      	ldr	r1, [r3, #24]
10002b54:	23ac      	movs	r3, #172	; 0xac
10002b56:	58c9      	ldr	r1, [r1, r3]
10002b58:	1cfb      	adds	r3, r7, #3
10002b5a:	781b      	ldrb	r3, [r3, #0]
10002b5c:	2001      	movs	r0, #1
10002b5e:	1c04      	adds	r4, r0, #0
10002b60:	409c      	lsls	r4, r3
10002b62:	1c23      	adds	r3, r4, #0
10002b64:	4319      	orrs	r1, r3
10002b66:	23ac      	movs	r3, #172	; 0xac
10002b68:	50d1      	str	r1, [r2, r3]
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10002b6a:	2300      	movs	r3, #0
10002b6c:	60fb      	str	r3, [r7, #12]
  }
  return (Status);
10002b6e:	68fb      	ldr	r3, [r7, #12]
}
10002b70:	1c18      	adds	r0, r3, #0
10002b72:	46bd      	mov	sp, r7
10002b74:	b005      	add	sp, #20
10002b76:	bd90      	pop	{r4, r7, pc}

10002b78 <PWMSP001_GetPendingEvent>:
(
    const PWMSP001_HandleType * HandlePtr,
    const PWMSP001_EventNameType Event,
    uint8_t*EvtStatus
)
{
10002b78:	b580      	push	{r7, lr}
10002b7a:	b086      	sub	sp, #24
10002b7c:	af00      	add	r7, sp, #0
10002b7e:	60f8      	str	r0, [r7, #12]
10002b80:	607a      	str	r2, [r7, #4]
10002b82:	1c3b      	adds	r3, r7, #0
10002b84:	330b      	adds	r3, #11
10002b86:	1c0a      	adds	r2, r1, #0
10002b88:	701a      	strb	r2, [r3, #0]
  status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002b8a:	2301      	movs	r3, #1
10002b8c:	617b      	str	r3, [r7, #20]

  if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
10002b8e:	68fb      	ldr	r3, [r7, #12]
10002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002b92:	781b      	ldrb	r3, [r3, #0]
10002b94:	2b00      	cmp	r3, #0
10002b96:	d102      	bne.n	10002b9e <PWMSP001_GetPendingEvent+0x26>
  {
    Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
10002b98:	2301      	movs	r3, #1
10002b9a:	617b      	str	r3, [r7, #20]
10002b9c:	e03d      	b.n	10002c1a <PWMSP001_GetPendingEvent+0xa2>
    DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
  }
  else
  {
    if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
10002b9e:	68fa      	ldr	r2, [r7, #12]
10002ba0:	2320      	movs	r3, #32
10002ba2:	5cd3      	ldrb	r3, [r2, r3]
10002ba4:	2b01      	cmp	r3, #1
10002ba6:	d11b      	bne.n	10002be0 <PWMSP001_GetPendingEvent+0x68>
    {

      if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event))
10002ba8:	68fb      	ldr	r3, [r7, #12]
10002baa:	69da      	ldr	r2, [r3, #28]
10002bac:	23a0      	movs	r3, #160	; 0xa0
10002bae:	58d3      	ldr	r3, [r2, r3]
10002bb0:	1c3a      	adds	r2, r7, #0
10002bb2:	320b      	adds	r2, #11
10002bb4:	7812      	ldrb	r2, [r2, #0]
10002bb6:	2101      	movs	r1, #1
10002bb8:	1c08      	adds	r0, r1, #0
10002bba:	4090      	lsls	r0, r2
10002bbc:	1c02      	adds	r2, r0, #0
10002bbe:	401a      	ands	r2, r3
10002bc0:	1c3b      	adds	r3, r7, #0
10002bc2:	330b      	adds	r3, #11
10002bc4:	781b      	ldrb	r3, [r3, #0]
10002bc6:	1c11      	adds	r1, r2, #0
10002bc8:	40d9      	lsrs	r1, r3
10002bca:	1c0b      	adds	r3, r1, #0
10002bcc:	2b00      	cmp	r3, #0
10002bce:	d003      	beq.n	10002bd8 <PWMSP001_GetPendingEvent+0x60>
	  {
	      *EvtStatus = (uint8_t)SET;
10002bd0:	687b      	ldr	r3, [r7, #4]
10002bd2:	2201      	movs	r2, #1
10002bd4:	701a      	strb	r2, [r3, #0]
10002bd6:	e01e      	b.n	10002c16 <PWMSP001_GetPendingEvent+0x9e>
	  }
	  else
	  {
	      *EvtStatus = (uint8_t)RESET;
10002bd8:	687b      	ldr	r3, [r7, #4]
10002bda:	2200      	movs	r2, #0
10002bdc:	701a      	strb	r2, [r3, #0]
10002bde:	e01a      	b.n	10002c16 <PWMSP001_GetPendingEvent+0x9e>
	  }
    }
    else
    {
      if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
10002be0:	68fb      	ldr	r3, [r7, #12]
10002be2:	699a      	ldr	r2, [r3, #24]
10002be4:	23a0      	movs	r3, #160	; 0xa0
10002be6:	58d3      	ldr	r3, [r2, r3]
10002be8:	1c3a      	adds	r2, r7, #0
10002bea:	320b      	adds	r2, #11
10002bec:	7812      	ldrb	r2, [r2, #0]
10002bee:	2101      	movs	r1, #1
10002bf0:	1c08      	adds	r0, r1, #0
10002bf2:	4090      	lsls	r0, r2
10002bf4:	1c02      	adds	r2, r0, #0
10002bf6:	401a      	ands	r2, r3
10002bf8:	1c3b      	adds	r3, r7, #0
10002bfa:	330b      	adds	r3, #11
10002bfc:	781b      	ldrb	r3, [r3, #0]
10002bfe:	1c11      	adds	r1, r2, #0
10002c00:	40d9      	lsrs	r1, r3
10002c02:	1c0b      	adds	r3, r1, #0
10002c04:	2b00      	cmp	r3, #0
10002c06:	d003      	beq.n	10002c10 <PWMSP001_GetPendingEvent+0x98>
      {
        *EvtStatus = (uint8_t)SET;
10002c08:	687b      	ldr	r3, [r7, #4]
10002c0a:	2201      	movs	r2, #1
10002c0c:	701a      	strb	r2, [r3, #0]
10002c0e:	e002      	b.n	10002c16 <PWMSP001_GetPendingEvent+0x9e>
      }
      else
      {
        *EvtStatus = (uint8_t)RESET;
10002c10:	687b      	ldr	r3, [r7, #4]
10002c12:	2200      	movs	r2, #0
10002c14:	701a      	strb	r2, [r3, #0]
      }
      /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event)\
	   ? (uint8_t)SET : (uint8_t)RESET;	*/
    }
    Status = (uint32_t)DAVEApp_SUCCESS;
10002c16:	2300      	movs	r3, #0
10002c18:	617b      	str	r3, [r7, #20]
  }
  return (Status);
10002c1a:	697b      	ldr	r3, [r7, #20]
}
10002c1c:	1c18      	adds	r0, r3, #0
10002c1e:	46bd      	mov	sp, r7
10002c20:	b006      	add	sp, #24
10002c22:	bd80      	pop	{r7, pc}

10002c24 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002c24:	b580      	push	{r7, lr}
10002c26:	b082      	sub	sp, #8
10002c28:	af00      	add	r7, sp, #0
10002c2a:	1c02      	adds	r2, r0, #0
10002c2c:	1dfb      	adds	r3, r7, #7
10002c2e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10002c30:	4b06      	ldr	r3, [pc, #24]	; (10002c4c <NVIC_EnableIRQ+0x28>)
10002c32:	1dfa      	adds	r2, r7, #7
10002c34:	7812      	ldrb	r2, [r2, #0]
10002c36:	1c11      	adds	r1, r2, #0
10002c38:	221f      	movs	r2, #31
10002c3a:	400a      	ands	r2, r1
10002c3c:	2101      	movs	r1, #1
10002c3e:	1c08      	adds	r0, r1, #0
10002c40:	4090      	lsls	r0, r2
10002c42:	1c02      	adds	r2, r0, #0
10002c44:	601a      	str	r2, [r3, #0]
}
10002c46:	46bd      	mov	sp, r7
10002c48:	b002      	add	sp, #8
10002c4a:	bd80      	pop	{r7, pc}
10002c4c:	e000e100 	.word	0xe000e100

10002c50 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002c50:	b5b0      	push	{r4, r5, r7, lr}
10002c52:	b082      	sub	sp, #8
10002c54:	af00      	add	r7, sp, #0
10002c56:	1c02      	adds	r2, r0, #0
10002c58:	6039      	str	r1, [r7, #0]
10002c5a:	1dfb      	adds	r3, r7, #7
10002c5c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
10002c5e:	1dfb      	adds	r3, r7, #7
10002c60:	781b      	ldrb	r3, [r3, #0]
10002c62:	2b7f      	cmp	r3, #127	; 0x7f
10002c64:	d932      	bls.n	10002ccc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002c66:	4930      	ldr	r1, [pc, #192]	; (10002d28 <NVIC_SetPriority+0xd8>)
10002c68:	1dfb      	adds	r3, r7, #7
10002c6a:	781b      	ldrb	r3, [r3, #0]
10002c6c:	1c1a      	adds	r2, r3, #0
10002c6e:	230f      	movs	r3, #15
10002c70:	4013      	ands	r3, r2
10002c72:	3b08      	subs	r3, #8
10002c74:	0898      	lsrs	r0, r3, #2
10002c76:	4a2c      	ldr	r2, [pc, #176]	; (10002d28 <NVIC_SetPriority+0xd8>)
10002c78:	1dfb      	adds	r3, r7, #7
10002c7a:	781b      	ldrb	r3, [r3, #0]
10002c7c:	1c1c      	adds	r4, r3, #0
10002c7e:	230f      	movs	r3, #15
10002c80:	4023      	ands	r3, r4
10002c82:	3b08      	subs	r3, #8
10002c84:	089b      	lsrs	r3, r3, #2
10002c86:	3306      	adds	r3, #6
10002c88:	009b      	lsls	r3, r3, #2
10002c8a:	18d3      	adds	r3, r2, r3
10002c8c:	685b      	ldr	r3, [r3, #4]
10002c8e:	1dfa      	adds	r2, r7, #7
10002c90:	7812      	ldrb	r2, [r2, #0]
10002c92:	1c14      	adds	r4, r2, #0
10002c94:	2203      	movs	r2, #3
10002c96:	4022      	ands	r2, r4
10002c98:	00d2      	lsls	r2, r2, #3
10002c9a:	24ff      	movs	r4, #255	; 0xff
10002c9c:	1c25      	adds	r5, r4, #0
10002c9e:	4095      	lsls	r5, r2
10002ca0:	1c2a      	adds	r2, r5, #0
10002ca2:	43d2      	mvns	r2, r2
10002ca4:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002ca6:	683b      	ldr	r3, [r7, #0]
10002ca8:	019c      	lsls	r4, r3, #6
10002caa:	23ff      	movs	r3, #255	; 0xff
10002cac:	401c      	ands	r4, r3
10002cae:	1dfb      	adds	r3, r7, #7
10002cb0:	781b      	ldrb	r3, [r3, #0]
10002cb2:	1c1d      	adds	r5, r3, #0
10002cb4:	2303      	movs	r3, #3
10002cb6:	402b      	ands	r3, r5
10002cb8:	00db      	lsls	r3, r3, #3
10002cba:	1c25      	adds	r5, r4, #0
10002cbc:	409d      	lsls	r5, r3
10002cbe:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002cc0:	431a      	orrs	r2, r3
10002cc2:	1d83      	adds	r3, r0, #6
10002cc4:	009b      	lsls	r3, r3, #2
10002cc6:	18cb      	adds	r3, r1, r3
10002cc8:	605a      	str	r2, [r3, #4]
10002cca:	e029      	b.n	10002d20 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002ccc:	4b17      	ldr	r3, [pc, #92]	; (10002d2c <NVIC_SetPriority+0xdc>)
10002cce:	1dfa      	adds	r2, r7, #7
10002cd0:	7812      	ldrb	r2, [r2, #0]
10002cd2:	b252      	sxtb	r2, r2
10002cd4:	0892      	lsrs	r2, r2, #2
10002cd6:	4915      	ldr	r1, [pc, #84]	; (10002d2c <NVIC_SetPriority+0xdc>)
10002cd8:	1df8      	adds	r0, r7, #7
10002cda:	7800      	ldrb	r0, [r0, #0]
10002cdc:	b240      	sxtb	r0, r0
10002cde:	0880      	lsrs	r0, r0, #2
10002ce0:	30c0      	adds	r0, #192	; 0xc0
10002ce2:	0080      	lsls	r0, r0, #2
10002ce4:	5841      	ldr	r1, [r0, r1]
10002ce6:	1df8      	adds	r0, r7, #7
10002ce8:	7800      	ldrb	r0, [r0, #0]
10002cea:	1c04      	adds	r4, r0, #0
10002cec:	2003      	movs	r0, #3
10002cee:	4020      	ands	r0, r4
10002cf0:	00c0      	lsls	r0, r0, #3
10002cf2:	24ff      	movs	r4, #255	; 0xff
10002cf4:	1c25      	adds	r5, r4, #0
10002cf6:	4085      	lsls	r5, r0
10002cf8:	1c28      	adds	r0, r5, #0
10002cfa:	43c0      	mvns	r0, r0
10002cfc:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002cfe:	6839      	ldr	r1, [r7, #0]
10002d00:	018c      	lsls	r4, r1, #6
10002d02:	21ff      	movs	r1, #255	; 0xff
10002d04:	400c      	ands	r4, r1
10002d06:	1df9      	adds	r1, r7, #7
10002d08:	7809      	ldrb	r1, [r1, #0]
10002d0a:	1c0d      	adds	r5, r1, #0
10002d0c:	2103      	movs	r1, #3
10002d0e:	4029      	ands	r1, r5
10002d10:	00c9      	lsls	r1, r1, #3
10002d12:	1c25      	adds	r5, r4, #0
10002d14:	408d      	lsls	r5, r1
10002d16:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002d18:	4301      	orrs	r1, r0
10002d1a:	32c0      	adds	r2, #192	; 0xc0
10002d1c:	0092      	lsls	r2, r2, #2
10002d1e:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
10002d20:	46bd      	mov	sp, r7
10002d22:	b002      	add	sp, #8
10002d24:	bdb0      	pop	{r4, r5, r7, pc}
10002d26:	46c0      	nop			; (mov r8, r8)
10002d28:	e000ed00 	.word	0xe000ed00
10002d2c:	e000e100 	.word	0xe000e100

10002d30 <NVIC002_EnableIRQ>:
 *    NVIC002_EnableIRQ(&NVIC002_Handle0);
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void NVIC002_EnableIRQ (const NVIC002_HandleType *const Handle) {
10002d30:	b580      	push	{r7, lr}
10002d32:	b082      	sub	sp, #8
10002d34:	af00      	add	r7, sp, #0
10002d36:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(Handle->NodeID);
10002d38:	687b      	ldr	r3, [r7, #4]
10002d3a:	781b      	ldrb	r3, [r3, #0]
10002d3c:	b2db      	uxtb	r3, r3
10002d3e:	b25b      	sxtb	r3, r3
10002d40:	1c18      	adds	r0, r3, #0
10002d42:	f7ff ff6f 	bl	10002c24 <NVIC_EnableIRQ>
}
10002d46:	46bd      	mov	sp, r7
10002d48:	b002      	add	sp, #8
10002d4a:	bd80      	pop	{r7, pc}

10002d4c <NVIC002_Init>:

/**  Function to initialize the NVIC node parameters based on 
 *  UI configuration.
 */
void NVIC002_Init(void)
{
10002d4c:	b580      	push	{r7, lr}
10002d4e:	b082      	sub	sp, #8
10002d50:	af00      	add	r7, sp, #0
  uint32_t Count;
  for (Count = 0U; Count<(uint32_t)NVIC002_NUM_INSTANCES; Count++)
10002d52:	2300      	movs	r3, #0
10002d54:	607b      	str	r3, [r7, #4]
10002d56:	e009      	b.n	10002d6c <NVIC002_Init+0x20>
  {
	  NVIC002_lInit(NVIC002_HandleArray[Count]);
10002d58:	4b07      	ldr	r3, [pc, #28]	; (10002d78 <NVIC002_Init+0x2c>)
10002d5a:	687a      	ldr	r2, [r7, #4]
10002d5c:	0092      	lsls	r2, r2, #2
10002d5e:	58d3      	ldr	r3, [r2, r3]
10002d60:	1c18      	adds	r0, r3, #0
10002d62:	f000 f80b 	bl	10002d7c <NVIC002_lInit>
 *  UI configuration.
 */
void NVIC002_Init(void)
{
  uint32_t Count;
  for (Count = 0U; Count<(uint32_t)NVIC002_NUM_INSTANCES; Count++)
10002d66:	687b      	ldr	r3, [r7, #4]
10002d68:	3301      	adds	r3, #1
10002d6a:	607b      	str	r3, [r7, #4]
10002d6c:	687b      	ldr	r3, [r7, #4]
10002d6e:	2b00      	cmp	r3, #0
10002d70:	d0f2      	beq.n	10002d58 <NVIC002_Init+0xc>
  {
	  NVIC002_lInit(NVIC002_HandleArray[Count]);
  }
}
10002d72:	46bd      	mov	sp, r7
10002d74:	b002      	add	sp, #8
10002d76:	bd80      	pop	{r7, pc}
10002d78:	20000940 	.word	0x20000940

10002d7c <NVIC002_lInit>:

static void NVIC002_lInit(const NVIC002_HandleType * Handle)
{
10002d7c:	b580      	push	{r7, lr}
10002d7e:	b082      	sub	sp, #8
10002d80:	af00      	add	r7, sp, #0
10002d82:	6078      	str	r0, [r7, #4]
   /* Set Interrupt Priority for NVIC <%=NodeID%> 
      Node App Instance <%=appInst%>  */
	#if (UC_FAMILY == XMC1) 
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
10002d84:	687b      	ldr	r3, [r7, #4]
10002d86:	781b      	ldrb	r3, [r3, #0]
10002d88:	b2da      	uxtb	r2, r3
			             Handle->Priority);
10002d8a:	687b      	ldr	r3, [r7, #4]
10002d8c:	785b      	ldrb	r3, [r3, #1]
static void NVIC002_lInit(const NVIC002_HandleType * Handle)
{
   /* Set Interrupt Priority for NVIC <%=NodeID%> 
      Node App Instance <%=appInst%>  */
	#if (UC_FAMILY == XMC1) 
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
10002d8e:	b252      	sxtb	r2, r2
10002d90:	1c10      	adds	r0, r2, #0
10002d92:	1c19      	adds	r1, r3, #0
10002d94:	f7ff ff5c 	bl	10002c50 <NVIC_SetPriority>
	   NVIC_SetPriority((IRQn_Type)Handle->NodeID, 
			   	   	     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
			   	   	     Handle->Priority,
			   	   	     Handle->SubPriority));
	#endif
	if(Handle->InterruptEnable == 1)
10002d98:	687b      	ldr	r3, [r7, #4]
10002d9a:	78db      	ldrb	r3, [r3, #3]
10002d9c:	2b01      	cmp	r3, #1
10002d9e:	d103      	bne.n	10002da8 <NVIC002_lInit+0x2c>
	{
	   /* Enable Interrupt */
		NVIC002_EnableIRQ(Handle);
10002da0:	687b      	ldr	r3, [r7, #4]
10002da2:	1c18      	adds	r0, r3, #0
10002da4:	f7ff ffc4 	bl	10002d30 <NVIC002_EnableIRQ>
	}
   
}
10002da8:	46bd      	mov	sp, r7
10002daa:	b002      	add	sp, #8
10002dac:	bd80      	pop	{r7, pc}
10002dae:	46c0      	nop			; (mov r8, r8)

10002db0 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10002db0:	b580      	push	{r7, lr}
10002db2:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10002db4:	f000 f828 	bl	10002e08 <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10002db8:	f000 f82a 	bl	10002e10 <CLK002_Init>
	 
	//  Initialization of app 'CCU4GLOBAL'		     
	CCU4GLOBAL_Init();
10002dbc:	f000 f93c 	bl	10003038 <CCU4GLOBAL_Init>
	 
	//  Initialization of app 'PWMSP001'		     
	PWMSP001_Init();
10002dc0:	f7fe fbd8 	bl	10001574 <PWMSP001_Init>
	 
	//  Initialization of app 'NVIC002'		     
	NVIC002_Init();
10002dc4:	f7ff ffc2 	bl	10002d4c <NVIC002_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10002dc8:	f000 f802 	bl	10002dd0 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10002dcc:	46bd      	mov	sp, r7
10002dce:	bd80      	pop	{r7, pc}

10002dd0 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10002dd0:	b580      	push	{r7, lr}
10002dd2:	af00      	add	r7, sp, #0
       /*        SCU Macro definitions     */                  
        //********* Capture/Compare Unit 4 (CAPCOM4) CONFIGURATIONS ************************* 
                       
    // Configuring CCU40_CC40SRS  =  Service Request Selector

    WR_REG(CCU40_CC40->SRS, CCU4_CC4_SRS_POSR_Msk, CCU4_CC4_SRS_POSR_Pos, CCU_SR3);    
10002dd4:	4a09      	ldr	r2, [pc, #36]	; (10002dfc <DAVE_MUX_Init+0x2c>)
10002dd6:	4909      	ldr	r1, [pc, #36]	; (10002dfc <DAVE_MUX_Init+0x2c>)
10002dd8:	23a8      	movs	r3, #168	; 0xa8
10002dda:	58cb      	ldr	r3, [r1, r3]
10002ddc:	2103      	movs	r1, #3
10002dde:	4319      	orrs	r1, r3
10002de0:	23a8      	movs	r3, #168	; 0xa8
10002de2:	50d1      	str	r1, [r2, r3]
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT0->IOCR4, 0xb800U, PORT_IOCR_PC1_PCR_Pos, 0x14U);                /*P0.5 : PORT0_IOCR4_PC5_PCR and PORT0_IOCR4_PC5_OE */					   
10002de4:	4b06      	ldr	r3, [pc, #24]	; (10002e00 <DAVE_MUX_Init+0x30>)
10002de6:	4a06      	ldr	r2, [pc, #24]	; (10002e00 <DAVE_MUX_Init+0x30>)
10002de8:	6951      	ldr	r1, [r2, #20]
10002dea:	4a06      	ldr	r2, [pc, #24]	; (10002e04 <DAVE_MUX_Init+0x34>)
10002dec:	400a      	ands	r2, r1
10002dee:	21a0      	movs	r1, #160	; 0xa0
10002df0:	0209      	lsls	r1, r1, #8
10002df2:	430a      	orrs	r2, r1
10002df4:	615a      	str	r2, [r3, #20]
					      
   	 
            	         
                                                     
}
10002df6:	46bd      	mov	sp, r7
10002df8:	bd80      	pop	{r7, pc}
10002dfa:	46c0      	nop			; (mov r8, r8)
10002dfc:	48040100 	.word	0x48040100
10002e00:	40040000 	.word	0x40040000
10002e04:	ffff47ff 	.word	0xffff47ff

10002e08 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{        
10002e08:	b580      	push	{r7, lr}
10002e0a:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                       
}
10002e0c:	46bd      	mov	sp, r7
10002e0e:	bd80      	pop	{r7, pc}

10002e10 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10002e10:	b580      	push	{r7, lr}
10002e12:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10002e14:	4b0a      	ldr	r3, [pc, #40]	; (10002e40 <CLK002_Init+0x30>)
10002e16:	22c0      	movs	r2, #192	; 0xc0
10002e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10002e1a:	46c0      	nop			; (mov r8, r8)
10002e1c:	4b08      	ldr	r3, [pc, #32]	; (10002e40 <CLK002_Init+0x30>)
10002e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002e20:	2304      	movs	r3, #4
10002e22:	4013      	ands	r3, r2
10002e24:	d1fa      	bne.n	10002e1c <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10002e26:	4b07      	ldr	r3, [pc, #28]	; (10002e44 <CLK002_Init+0x34>)
10002e28:	4a06      	ldr	r2, [pc, #24]	; (10002e44 <CLK002_Init+0x34>)
10002e2a:	6812      	ldr	r2, [r2, #0]
10002e2c:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10002e2e:	f000 f811 	bl	10002e54 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10002e32:	4b03      	ldr	r3, [pc, #12]	; (10002e40 <CLK002_Init+0x30>)
10002e34:	22c3      	movs	r2, #195	; 0xc3
10002e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10002e38:	f7fe f96a 	bl	10001110 <SystemCoreClockUpdate>
}
10002e3c:	46bd      	mov	sp, r7
10002e3e:	bd80      	pop	{r7, pc}
10002e40:	40010000 	.word	0x40010000
10002e44:	40010300 	.word	0x40010300

10002e48 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
10002e48:	b580      	push	{r7, lr}
10002e4a:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10002e4c:	2300      	movs	r3, #0
}
10002e4e:	1c18      	adds	r0, r3, #0
10002e50:	46bd      	mov	sp, r7
10002e52:	bd80      	pop	{r7, pc}

10002e54 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10002e54:	b580      	push	{r7, lr}
10002e56:	b084      	sub	sp, #16
10002e58:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
10002e5a:	2300      	movs	r3, #0
10002e5c:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10002e5e:	2300      	movs	r3, #0
10002e60:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002e62:	4b18      	ldr	r3, [pc, #96]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e64:	681a      	ldr	r2, [r3, #0]
10002e66:	23ff      	movs	r3, #255	; 0xff
10002e68:	021b      	lsls	r3, r3, #8
10002e6a:	4013      	ands	r3, r2
10002e6c:	0a1b      	lsrs	r3, r3, #8
10002e6e:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10002e70:	2301      	movs	r3, #1
10002e72:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10002e74:	4b13      	ldr	r3, [pc, #76]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e76:	681b      	ldr	r3, [r3, #0]
10002e78:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10002e7a:	687b      	ldr	r3, [r7, #4]
10002e7c:	22ff      	movs	r2, #255	; 0xff
10002e7e:	4393      	bics	r3, r2
10002e80:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10002e82:	4b10      	ldr	r3, [pc, #64]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e84:	687a      	ldr	r2, [r7, #4]
10002e86:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002e88:	4b0e      	ldr	r3, [pc, #56]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e8a:	4a0e      	ldr	r2, [pc, #56]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e8c:	6812      	ldr	r2, [r2, #0]
10002e8e:	490e      	ldr	r1, [pc, #56]	; (10002ec8 <CLK002_lDivUpdate+0x74>)
10002e90:	430a      	orrs	r2, r1
10002e92:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002e94:	46c0      	nop			; (mov r8, r8)
10002e96:	4b0b      	ldr	r3, [pc, #44]	; (10002ec4 <CLK002_lDivUpdate+0x70>)
10002e98:	681a      	ldr	r2, [r3, #0]
10002e9a:	2380      	movs	r3, #128	; 0x80
10002e9c:	05db      	lsls	r3, r3, #23
10002e9e:	4013      	ands	r3, r2
10002ea0:	d1f9      	bne.n	10002e96 <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
10002ea2:	68fa      	ldr	r2, [r7, #12]
10002ea4:	68bb      	ldr	r3, [r7, #8]
10002ea6:	429a      	cmp	r2, r3
10002ea8:	d008      	beq.n	10002ebc <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10002eaa:	68fa      	ldr	r2, [r7, #12]
10002eac:	68bb      	ldr	r3, [r7, #8]
10002eae:	429a      	cmp	r2, r3
10002eb0:	d202      	bcs.n	10002eb8 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
10002eb2:	f000 f869 	bl	10002f88 <CLK002_lFrequencyDownScaling>
10002eb6:	e001      	b.n	10002ebc <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10002eb8:	f000 f808 	bl	10002ecc <CLK002_lFrequencyUpScaling>
   }

}
10002ebc:	46bd      	mov	sp, r7
10002ebe:	b004      	add	sp, #16
10002ec0:	bd80      	pop	{r7, pc}
10002ec2:	46c0      	nop			; (mov r8, r8)
10002ec4:	40010300 	.word	0x40010300
10002ec8:	3ff00000 	.word	0x3ff00000

10002ecc <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10002ecc:	b580      	push	{r7, lr}
10002ece:	b084      	sub	sp, #16
10002ed0:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002ed2:	4b2a      	ldr	r3, [pc, #168]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002ed4:	681a      	ldr	r2, [r3, #0]
10002ed6:	23ff      	movs	r3, #255	; 0xff
10002ed8:	021b      	lsls	r3, r3, #8
10002eda:	4013      	ands	r3, r2
10002edc:	0a1b      	lsrs	r3, r3, #8
10002ede:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10002ee0:	2301      	movs	r3, #1
10002ee2:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10002ee4:	68bb      	ldr	r3, [r7, #8]
10002ee6:	009a      	lsls	r2, r3, #2
10002ee8:	68fb      	ldr	r3, [r7, #12]
10002eea:	429a      	cmp	r2, r3
10002eec:	d224      	bcs.n	10002f38 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10002eee:	68fb      	ldr	r3, [r7, #12]
10002ef0:	2203      	movs	r2, #3
10002ef2:	4393      	bics	r3, r2
10002ef4:	3304      	adds	r3, #4
10002ef6:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10002ef8:	68fb      	ldr	r3, [r7, #12]
10002efa:	089b      	lsrs	r3, r3, #2
10002efc:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10002efe:	4b1f      	ldr	r3, [pc, #124]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f00:	681b      	ldr	r3, [r3, #0]
10002f02:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10002f04:	68fb      	ldr	r3, [r7, #12]
10002f06:	021b      	lsls	r3, r3, #8
10002f08:	041b      	lsls	r3, r3, #16
10002f0a:	0c1a      	lsrs	r2, r3, #16
10002f0c:	6879      	ldr	r1, [r7, #4]
10002f0e:	4b1c      	ldr	r3, [pc, #112]	; (10002f80 <CLK002_lFrequencyUpScaling+0xb4>)
10002f10:	400b      	ands	r3, r1
10002f12:	4313      	orrs	r3, r2
10002f14:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10002f16:	4b19      	ldr	r3, [pc, #100]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f18:	687a      	ldr	r2, [r7, #4]
10002f1a:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002f1c:	4b17      	ldr	r3, [pc, #92]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f1e:	4a17      	ldr	r2, [pc, #92]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f20:	6812      	ldr	r2, [r2, #0]
10002f22:	4918      	ldr	r1, [pc, #96]	; (10002f84 <CLK002_lFrequencyUpScaling+0xb8>)
10002f24:	430a      	orrs	r2, r1
10002f26:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002f28:	46c0      	nop			; (mov r8, r8)
10002f2a:	4b14      	ldr	r3, [pc, #80]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f2c:	681a      	ldr	r2, [r3, #0]
10002f2e:	2380      	movs	r3, #128	; 0x80
10002f30:	05db      	lsls	r3, r3, #23
10002f32:	4013      	ands	r3, r2
10002f34:	d1f9      	bne.n	10002f2a <CLK002_lFrequencyUpScaling+0x5e>
10002f36:	e01c      	b.n	10002f72 <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
10002f38:	4b10      	ldr	r3, [pc, #64]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f3a:	681b      	ldr	r3, [r3, #0]
10002f3c:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10002f3e:	68bb      	ldr	r3, [r7, #8]
10002f40:	021b      	lsls	r3, r3, #8
10002f42:	041b      	lsls	r3, r3, #16
10002f44:	0c1a      	lsrs	r2, r3, #16
10002f46:	6879      	ldr	r1, [r7, #4]
10002f48:	4b0d      	ldr	r3, [pc, #52]	; (10002f80 <CLK002_lFrequencyUpScaling+0xb4>)
10002f4a:	400b      	ands	r3, r1
10002f4c:	4313      	orrs	r3, r2
10002f4e:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10002f50:	4b0a      	ldr	r3, [pc, #40]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f52:	687a      	ldr	r2, [r7, #4]
10002f54:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002f56:	4b09      	ldr	r3, [pc, #36]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f58:	4a08      	ldr	r2, [pc, #32]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f5a:	6812      	ldr	r2, [r2, #0]
10002f5c:	4909      	ldr	r1, [pc, #36]	; (10002f84 <CLK002_lFrequencyUpScaling+0xb8>)
10002f5e:	430a      	orrs	r2, r1
10002f60:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002f62:	46c0      	nop			; (mov r8, r8)
10002f64:	4b05      	ldr	r3, [pc, #20]	; (10002f7c <CLK002_lFrequencyUpScaling+0xb0>)
10002f66:	681a      	ldr	r2, [r3, #0]
10002f68:	2380      	movs	r3, #128	; 0x80
10002f6a:	05db      	lsls	r3, r3, #23
10002f6c:	4013      	ands	r3, r2
10002f6e:	d1f9      	bne.n	10002f64 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10002f70:	e000      	b.n	10002f74 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
10002f72:	e7b7      	b.n	10002ee4 <CLK002_lFrequencyUpScaling+0x18>

}
10002f74:	46bd      	mov	sp, r7
10002f76:	b004      	add	sp, #16
10002f78:	bd80      	pop	{r7, pc}
10002f7a:	46c0      	nop			; (mov r8, r8)
10002f7c:	40010300 	.word	0x40010300
10002f80:	ffff00ff 	.word	0xffff00ff
10002f84:	3ff00000 	.word	0x3ff00000

10002f88 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10002f88:	b580      	push	{r7, lr}
10002f8a:	b084      	sub	sp, #16
10002f8c:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002f8e:	4b27      	ldr	r3, [pc, #156]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002f90:	681a      	ldr	r2, [r3, #0]
10002f92:	23ff      	movs	r3, #255	; 0xff
10002f94:	021b      	lsls	r3, r3, #8
10002f96:	4013      	ands	r3, r2
10002f98:	0a1b      	lsrs	r3, r3, #8
10002f9a:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
10002f9c:	2301      	movs	r3, #1
10002f9e:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10002fa0:	68fb      	ldr	r3, [r7, #12]
10002fa2:	009a      	lsls	r2, r3, #2
10002fa4:	68bb      	ldr	r3, [r7, #8]
10002fa6:	429a      	cmp	r2, r3
10002fa8:	d21f      	bcs.n	10002fea <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10002faa:	68fb      	ldr	r3, [r7, #12]
10002fac:	009b      	lsls	r3, r3, #2
10002fae:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10002fb0:	4b1e      	ldr	r3, [pc, #120]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fb2:	681b      	ldr	r3, [r3, #0]
10002fb4:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10002fb6:	68fb      	ldr	r3, [r7, #12]
10002fb8:	021b      	lsls	r3, r3, #8
10002fba:	041b      	lsls	r3, r3, #16
10002fbc:	0c1a      	lsrs	r2, r3, #16
10002fbe:	6879      	ldr	r1, [r7, #4]
10002fc0:	4b1b      	ldr	r3, [pc, #108]	; (10003030 <CLK002_lFrequencyDownScaling+0xa8>)
10002fc2:	400b      	ands	r3, r1
10002fc4:	4313      	orrs	r3, r2
10002fc6:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10002fc8:	4b18      	ldr	r3, [pc, #96]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fca:	687a      	ldr	r2, [r7, #4]
10002fcc:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002fce:	4b17      	ldr	r3, [pc, #92]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fd0:	4a16      	ldr	r2, [pc, #88]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fd2:	6812      	ldr	r2, [r2, #0]
10002fd4:	4917      	ldr	r1, [pc, #92]	; (10003034 <CLK002_lFrequencyDownScaling+0xac>)
10002fd6:	430a      	orrs	r2, r1
10002fd8:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002fda:	46c0      	nop			; (mov r8, r8)
10002fdc:	4b13      	ldr	r3, [pc, #76]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fde:	681a      	ldr	r2, [r3, #0]
10002fe0:	2380      	movs	r3, #128	; 0x80
10002fe2:	05db      	lsls	r3, r3, #23
10002fe4:	4013      	ands	r3, r2
10002fe6:	d1f9      	bne.n	10002fdc <CLK002_lFrequencyDownScaling+0x54>
10002fe8:	e01c      	b.n	10003024 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10002fea:	4b10      	ldr	r3, [pc, #64]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10002fec:	681b      	ldr	r3, [r3, #0]
10002fee:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10002ff0:	68bb      	ldr	r3, [r7, #8]
10002ff2:	021b      	lsls	r3, r3, #8
10002ff4:	041b      	lsls	r3, r3, #16
10002ff6:	0c1a      	lsrs	r2, r3, #16
10002ff8:	6879      	ldr	r1, [r7, #4]
10002ffa:	4b0d      	ldr	r3, [pc, #52]	; (10003030 <CLK002_lFrequencyDownScaling+0xa8>)
10002ffc:	400b      	ands	r3, r1
10002ffe:	4313      	orrs	r3, r2
10003000:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10003002:	4b0a      	ldr	r3, [pc, #40]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10003004:	687a      	ldr	r2, [r7, #4]
10003006:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003008:	4b08      	ldr	r3, [pc, #32]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
1000300a:	4a08      	ldr	r2, [pc, #32]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
1000300c:	6812      	ldr	r2, [r2, #0]
1000300e:	4909      	ldr	r1, [pc, #36]	; (10003034 <CLK002_lFrequencyDownScaling+0xac>)
10003010:	430a      	orrs	r2, r1
10003012:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003014:	46c0      	nop			; (mov r8, r8)
10003016:	4b05      	ldr	r3, [pc, #20]	; (1000302c <CLK002_lFrequencyDownScaling+0xa4>)
10003018:	681a      	ldr	r2, [r3, #0]
1000301a:	2380      	movs	r3, #128	; 0x80
1000301c:	05db      	lsls	r3, r3, #23
1000301e:	4013      	ands	r3, r2
10003020:	d1f9      	bne.n	10003016 <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
10003022:	e000      	b.n	10003026 <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
10003024:	e7bc      	b.n	10002fa0 <CLK002_lFrequencyDownScaling+0x18>
}
10003026:	46bd      	mov	sp, r7
10003028:	b004      	add	sp, #16
1000302a:	bd80      	pop	{r7, pc}
1000302c:	40010300 	.word	0x40010300
10003030:	ffff00ff 	.word	0xffff00ff
10003034:	3ff00000 	.word	0x3ff00000

10003038 <CCU4GLOBAL_Init>:
/**
 * @cond INTERNAL_DOCS
 */

void CCU4GLOBAL_Init(void)
{
10003038:	b580      	push	{r7, lr}
1000303a:	b082      	sub	sp, #8
1000303c:	af00      	add	r7, sp, #0
  static uint32_t CCU4InitCalled = (uint32_t)0U;
  uint32_t Count = 0U;
1000303e:	2300      	movs	r3, #0
10003040:	607b      	str	r3, [r7, #4]
  
  if(CCU4InitCalled == (uint32_t)0U)
10003042:	4b0e      	ldr	r3, [pc, #56]	; (1000307c <CCU4GLOBAL_Init+0x44>)
10003044:	681b      	ldr	r3, [r3, #0]
10003046:	2b00      	cmp	r3, #0
10003048:	d114      	bne.n	10003074 <CCU4GLOBAL_Init+0x3c>
	#if (UC_FAMILY == XMC4)     
		CLK001_Init();     
	#endif		
	
	#if (UC_FAMILY == XMC1)    
		CLK002_Init();
1000304a:	f7ff fee1 	bl	10002e10 <CLK002_Init>
	#endif
    
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
1000304e:	2300      	movs	r3, #0
10003050:	607b      	str	r3, [r7, #4]
10003052:	e009      	b.n	10003068 <CCU4GLOBAL_Init+0x30>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
10003054:	4b0a      	ldr	r3, [pc, #40]	; (10003080 <CCU4GLOBAL_Init+0x48>)
10003056:	687a      	ldr	r2, [r7, #4]
10003058:	0092      	lsls	r2, r2, #2
1000305a:	58d3      	ldr	r3, [r2, r3]
1000305c:	1c18      	adds	r0, r3, #0
1000305e:	f000 f811 	bl	10003084 <CCU4Global_lInit>
	
	#if (UC_FAMILY == XMC1)    
		CLK002_Init();
	#endif
    
    for (Count = 0U; Count<(uint32_t)CCU4GLOBAL_NUM_INSTANCES; Count++)
10003062:	687b      	ldr	r3, [r7, #4]
10003064:	3301      	adds	r3, #1
10003066:	607b      	str	r3, [r7, #4]
10003068:	687b      	ldr	r3, [r7, #4]
1000306a:	2b00      	cmp	r3, #0
1000306c:	d0f2      	beq.n	10003054 <CCU4GLOBAL_Init+0x1c>
    {
  	  CCU4Global_lInit(CCU4Global_HandleArray[Count]);
    }

    CCU4InitCalled = (uint32_t)1;
1000306e:	4b03      	ldr	r3, [pc, #12]	; (1000307c <CCU4GLOBAL_Init+0x44>)
10003070:	2201      	movs	r2, #1
10003072:	601a      	str	r2, [r3, #0]
  }
}
10003074:	46bd      	mov	sp, r7
10003076:	b002      	add	sp, #8
10003078:	bd80      	pop	{r7, pc}
1000307a:	46c0      	nop			; (mov r8, r8)
1000307c:	20000934 	.word	0x20000934
10003080:	20000944 	.word	0x20000944

10003084 <CCU4Global_lInit>:

static void CCU4Global_lInit(const CCU4Global_HandleType * Handle)
{
10003084:	b590      	push	{r4, r7, lr}
10003086:	b083      	sub	sp, #12
10003088:	af00      	add	r7, sp, #0
1000308a:	6078      	str	r0, [r7, #4]
    if( Handle->KernelNumber <= 2 )
1000308c:	687b      	ldr	r3, [r7, #4]
1000308e:	685b      	ldr	r3, [r3, #4]
10003090:	2b02      	cmp	r3, #2
10003092:	d823      	bhi.n	100030dc <CCU4Global_lInit+0x58>
	{
		/* Disables the gating for CCU4 kernel */      
		/*This is applicable for XMC4400,XMC4200 and XMC1xxx Devices*/
		#if (UC_FAMILY == XMC1 )
			if (!((uint32_t)SCU_CLK->CGATCLR0 & Handle->ClockGating))
10003094:	4b17      	ldr	r3, [pc, #92]	; (100030f4 <CCU4Global_lInit+0x70>)
10003096:	691a      	ldr	r2, [r3, #16]
10003098:	687b      	ldr	r3, [r7, #4]
1000309a:	689b      	ldr	r3, [r3, #8]
1000309c:	4013      	ands	r3, r2
1000309e:	d11d      	bne.n	100030dc <CCU4Global_lInit+0x58>
			{ 
				SCU_GENERAL->PASSWD = 0x000000C0UL;
100030a0:	4b15      	ldr	r3, [pc, #84]	; (100030f8 <CCU4Global_lInit+0x74>)
100030a2:	22c0      	movs	r2, #192	; 0xc0
100030a4:	625a      	str	r2, [r3, #36]	; 0x24
				WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, 
100030a6:	4b13      	ldr	r3, [pc, #76]	; (100030f4 <CCU4Global_lInit+0x70>)
100030a8:	4a12      	ldr	r2, [pc, #72]	; (100030f4 <CCU4Global_lInit+0x70>)
100030aa:	6812      	ldr	r2, [r2, #0]
100030ac:	4913      	ldr	r1, [pc, #76]	; (100030fc <CCU4Global_lInit+0x78>)
100030ae:	430a      	orrs	r2, r1
100030b0:	601a      	str	r2, [r3, #0]
					   SCU_CLK_CLKCR_CNTADJ_Pos,CCU4GLOBAL_DELAYCNT);
				
				SET_BIT(SCU_CLK->CGATCLR0, Handle->ClockGating);
100030b2:	4b10      	ldr	r3, [pc, #64]	; (100030f4 <CCU4Global_lInit+0x70>)
100030b4:	4a0f      	ldr	r2, [pc, #60]	; (100030f4 <CCU4Global_lInit+0x70>)
100030b6:	6911      	ldr	r1, [r2, #16]
100030b8:	687a      	ldr	r2, [r7, #4]
100030ba:	6892      	ldr	r2, [r2, #8]
100030bc:	2001      	movs	r0, #1
100030be:	1c04      	adds	r4, r0, #0
100030c0:	4094      	lsls	r4, r2
100030c2:	1c22      	adds	r2, r4, #0
100030c4:	430a      	orrs	r2, r1
100030c6:	611a      	str	r2, [r3, #16]
				while ((uint32_t)SCU_CLK->CLKCR & 
100030c8:	46c0      	nop			; (mov r8, r8)
100030ca:	4b0a      	ldr	r3, [pc, #40]	; (100030f4 <CCU4Global_lInit+0x70>)
100030cc:	681a      	ldr	r2, [r3, #0]
100030ce:	2380      	movs	r3, #128	; 0x80
100030d0:	05db      	lsls	r3, r3, #23
100030d2:	4013      	ands	r3, r2
100030d4:	d1f9      	bne.n	100030ca <CCU4Global_lInit+0x46>
					   (uint32_t)SCU_CLK_CLKCR_VDDC2LOW_Msk)
				{
					;
				}
				SCU_GENERAL->PASSWD = 0x000000C3UL;
100030d6:	4b08      	ldr	r3, [pc, #32]	; (100030f8 <CCU4Global_lInit+0x74>)
100030d8:	22c3      	movs	r2, #195	; 0xc3
100030da:	625a      	str	r2, [r3, #36]	; 0x24
		RESET001_DeassertReset(Handle->PeripheralReset);
	#endif    

		
    /* Sets Run bit of the Prescalar */
    SET_BIT(Handle->CC4yKernRegsPtr->GIDLC,CCU4_GIDLC_SPRB_Pos);
100030dc:	687b      	ldr	r3, [r7, #4]
100030de:	681b      	ldr	r3, [r3, #0]
100030e0:	687a      	ldr	r2, [r7, #4]
100030e2:	6812      	ldr	r2, [r2, #0]
100030e4:	68d2      	ldr	r2, [r2, #12]
100030e6:	2180      	movs	r1, #128	; 0x80
100030e8:	0049      	lsls	r1, r1, #1
100030ea:	430a      	orrs	r2, r1
100030ec:	60da      	str	r2, [r3, #12]

}
100030ee:	46bd      	mov	sp, r7
100030f0:	b003      	add	sp, #12
100030f2:	bd90      	pop	{r4, r7, pc}
100030f4:	40010300 	.word	0x40010300
100030f8:	40010000 	.word	0x40010000
100030fc:	3ff00000 	.word	0x3ff00000

10003100 <__aeabi_uidiv>:
10003100:	2900      	cmp	r1, #0
10003102:	d034      	beq.n	1000316e <.udivsi3_skip_div0_test+0x6a>

10003104 <.udivsi3_skip_div0_test>:
10003104:	2301      	movs	r3, #1
10003106:	2200      	movs	r2, #0
10003108:	b410      	push	{r4}
1000310a:	4288      	cmp	r0, r1
1000310c:	d32c      	bcc.n	10003168 <.udivsi3_skip_div0_test+0x64>
1000310e:	2401      	movs	r4, #1
10003110:	0724      	lsls	r4, r4, #28
10003112:	42a1      	cmp	r1, r4
10003114:	d204      	bcs.n	10003120 <.udivsi3_skip_div0_test+0x1c>
10003116:	4281      	cmp	r1, r0
10003118:	d202      	bcs.n	10003120 <.udivsi3_skip_div0_test+0x1c>
1000311a:	0109      	lsls	r1, r1, #4
1000311c:	011b      	lsls	r3, r3, #4
1000311e:	e7f8      	b.n	10003112 <.udivsi3_skip_div0_test+0xe>
10003120:	00e4      	lsls	r4, r4, #3
10003122:	42a1      	cmp	r1, r4
10003124:	d204      	bcs.n	10003130 <.udivsi3_skip_div0_test+0x2c>
10003126:	4281      	cmp	r1, r0
10003128:	d202      	bcs.n	10003130 <.udivsi3_skip_div0_test+0x2c>
1000312a:	0049      	lsls	r1, r1, #1
1000312c:	005b      	lsls	r3, r3, #1
1000312e:	e7f8      	b.n	10003122 <.udivsi3_skip_div0_test+0x1e>
10003130:	4288      	cmp	r0, r1
10003132:	d301      	bcc.n	10003138 <.udivsi3_skip_div0_test+0x34>
10003134:	1a40      	subs	r0, r0, r1
10003136:	431a      	orrs	r2, r3
10003138:	084c      	lsrs	r4, r1, #1
1000313a:	42a0      	cmp	r0, r4
1000313c:	d302      	bcc.n	10003144 <.udivsi3_skip_div0_test+0x40>
1000313e:	1b00      	subs	r0, r0, r4
10003140:	085c      	lsrs	r4, r3, #1
10003142:	4322      	orrs	r2, r4
10003144:	088c      	lsrs	r4, r1, #2
10003146:	42a0      	cmp	r0, r4
10003148:	d302      	bcc.n	10003150 <.udivsi3_skip_div0_test+0x4c>
1000314a:	1b00      	subs	r0, r0, r4
1000314c:	089c      	lsrs	r4, r3, #2
1000314e:	4322      	orrs	r2, r4
10003150:	08cc      	lsrs	r4, r1, #3
10003152:	42a0      	cmp	r0, r4
10003154:	d302      	bcc.n	1000315c <.udivsi3_skip_div0_test+0x58>
10003156:	1b00      	subs	r0, r0, r4
10003158:	08dc      	lsrs	r4, r3, #3
1000315a:	4322      	orrs	r2, r4
1000315c:	2800      	cmp	r0, #0
1000315e:	d003      	beq.n	10003168 <.udivsi3_skip_div0_test+0x64>
10003160:	091b      	lsrs	r3, r3, #4
10003162:	d001      	beq.n	10003168 <.udivsi3_skip_div0_test+0x64>
10003164:	0909      	lsrs	r1, r1, #4
10003166:	e7e3      	b.n	10003130 <.udivsi3_skip_div0_test+0x2c>
10003168:	1c10      	adds	r0, r2, #0
1000316a:	bc10      	pop	{r4}
1000316c:	4770      	bx	lr
1000316e:	2800      	cmp	r0, #0
10003170:	d001      	beq.n	10003176 <.udivsi3_skip_div0_test+0x72>
10003172:	2000      	movs	r0, #0
10003174:	43c0      	mvns	r0, r0
10003176:	b407      	push	{r0, r1, r2}
10003178:	4802      	ldr	r0, [pc, #8]	; (10003184 <.udivsi3_skip_div0_test+0x80>)
1000317a:	a102      	add	r1, pc, #8	; (adr r1, 10003184 <.udivsi3_skip_div0_test+0x80>)
1000317c:	1840      	adds	r0, r0, r1
1000317e:	9002      	str	r0, [sp, #8]
10003180:	bd03      	pop	{r0, r1, pc}
10003182:	46c0      	nop			; (mov r8, r8)
10003184:	000000d9 	.word	0x000000d9

10003188 <__aeabi_uidivmod>:
10003188:	2900      	cmp	r1, #0
1000318a:	d0f0      	beq.n	1000316e <.udivsi3_skip_div0_test+0x6a>
1000318c:	b503      	push	{r0, r1, lr}
1000318e:	f7ff ffb9 	bl	10003104 <.udivsi3_skip_div0_test>
10003192:	bc0e      	pop	{r1, r2, r3}
10003194:	4342      	muls	r2, r0
10003196:	1a89      	subs	r1, r1, r2
10003198:	4718      	bx	r3
1000319a:	46c0      	nop			; (mov r8, r8)

1000319c <__aeabi_idiv>:
1000319c:	2900      	cmp	r1, #0
1000319e:	d041      	beq.n	10003224 <.divsi3_skip_div0_test+0x84>

100031a0 <.divsi3_skip_div0_test>:
100031a0:	b410      	push	{r4}
100031a2:	1c04      	adds	r4, r0, #0
100031a4:	404c      	eors	r4, r1
100031a6:	46a4      	mov	ip, r4
100031a8:	2301      	movs	r3, #1
100031aa:	2200      	movs	r2, #0
100031ac:	2900      	cmp	r1, #0
100031ae:	d500      	bpl.n	100031b2 <.divsi3_skip_div0_test+0x12>
100031b0:	4249      	negs	r1, r1
100031b2:	2800      	cmp	r0, #0
100031b4:	d500      	bpl.n	100031b8 <.divsi3_skip_div0_test+0x18>
100031b6:	4240      	negs	r0, r0
100031b8:	4288      	cmp	r0, r1
100031ba:	d32c      	bcc.n	10003216 <.divsi3_skip_div0_test+0x76>
100031bc:	2401      	movs	r4, #1
100031be:	0724      	lsls	r4, r4, #28
100031c0:	42a1      	cmp	r1, r4
100031c2:	d204      	bcs.n	100031ce <.divsi3_skip_div0_test+0x2e>
100031c4:	4281      	cmp	r1, r0
100031c6:	d202      	bcs.n	100031ce <.divsi3_skip_div0_test+0x2e>
100031c8:	0109      	lsls	r1, r1, #4
100031ca:	011b      	lsls	r3, r3, #4
100031cc:	e7f8      	b.n	100031c0 <.divsi3_skip_div0_test+0x20>
100031ce:	00e4      	lsls	r4, r4, #3
100031d0:	42a1      	cmp	r1, r4
100031d2:	d204      	bcs.n	100031de <.divsi3_skip_div0_test+0x3e>
100031d4:	4281      	cmp	r1, r0
100031d6:	d202      	bcs.n	100031de <.divsi3_skip_div0_test+0x3e>
100031d8:	0049      	lsls	r1, r1, #1
100031da:	005b      	lsls	r3, r3, #1
100031dc:	e7f8      	b.n	100031d0 <.divsi3_skip_div0_test+0x30>
100031de:	4288      	cmp	r0, r1
100031e0:	d301      	bcc.n	100031e6 <.divsi3_skip_div0_test+0x46>
100031e2:	1a40      	subs	r0, r0, r1
100031e4:	431a      	orrs	r2, r3
100031e6:	084c      	lsrs	r4, r1, #1
100031e8:	42a0      	cmp	r0, r4
100031ea:	d302      	bcc.n	100031f2 <.divsi3_skip_div0_test+0x52>
100031ec:	1b00      	subs	r0, r0, r4
100031ee:	085c      	lsrs	r4, r3, #1
100031f0:	4322      	orrs	r2, r4
100031f2:	088c      	lsrs	r4, r1, #2
100031f4:	42a0      	cmp	r0, r4
100031f6:	d302      	bcc.n	100031fe <.divsi3_skip_div0_test+0x5e>
100031f8:	1b00      	subs	r0, r0, r4
100031fa:	089c      	lsrs	r4, r3, #2
100031fc:	4322      	orrs	r2, r4
100031fe:	08cc      	lsrs	r4, r1, #3
10003200:	42a0      	cmp	r0, r4
10003202:	d302      	bcc.n	1000320a <.divsi3_skip_div0_test+0x6a>
10003204:	1b00      	subs	r0, r0, r4
10003206:	08dc      	lsrs	r4, r3, #3
10003208:	4322      	orrs	r2, r4
1000320a:	2800      	cmp	r0, #0
1000320c:	d003      	beq.n	10003216 <.divsi3_skip_div0_test+0x76>
1000320e:	091b      	lsrs	r3, r3, #4
10003210:	d001      	beq.n	10003216 <.divsi3_skip_div0_test+0x76>
10003212:	0909      	lsrs	r1, r1, #4
10003214:	e7e3      	b.n	100031de <.divsi3_skip_div0_test+0x3e>
10003216:	1c10      	adds	r0, r2, #0
10003218:	4664      	mov	r4, ip
1000321a:	2c00      	cmp	r4, #0
1000321c:	d500      	bpl.n	10003220 <.divsi3_skip_div0_test+0x80>
1000321e:	4240      	negs	r0, r0
10003220:	bc10      	pop	{r4}
10003222:	4770      	bx	lr
10003224:	2800      	cmp	r0, #0
10003226:	d006      	beq.n	10003236 <.divsi3_skip_div0_test+0x96>
10003228:	db03      	blt.n	10003232 <.divsi3_skip_div0_test+0x92>
1000322a:	2000      	movs	r0, #0
1000322c:	43c0      	mvns	r0, r0
1000322e:	0840      	lsrs	r0, r0, #1
10003230:	e001      	b.n	10003236 <.divsi3_skip_div0_test+0x96>
10003232:	2080      	movs	r0, #128	; 0x80
10003234:	0600      	lsls	r0, r0, #24
10003236:	b407      	push	{r0, r1, r2}
10003238:	4802      	ldr	r0, [pc, #8]	; (10003244 <.divsi3_skip_div0_test+0xa4>)
1000323a:	a102      	add	r1, pc, #8	; (adr r1, 10003244 <.divsi3_skip_div0_test+0xa4>)
1000323c:	1840      	adds	r0, r0, r1
1000323e:	9002      	str	r0, [sp, #8]
10003240:	bd03      	pop	{r0, r1, pc}
10003242:	46c0      	nop			; (mov r8, r8)
10003244:	00000019 	.word	0x00000019

10003248 <__aeabi_idivmod>:
10003248:	2900      	cmp	r1, #0
1000324a:	d0eb      	beq.n	10003224 <.divsi3_skip_div0_test+0x84>
1000324c:	b503      	push	{r0, r1, lr}
1000324e:	f7ff ffa7 	bl	100031a0 <.divsi3_skip_div0_test>
10003252:	bc0e      	pop	{r1, r2, r3}
10003254:	4342      	muls	r2, r0
10003256:	1a89      	subs	r1, r1, r2
10003258:	4718      	bx	r3
1000325a:	46c0      	nop			; (mov r8, r8)

1000325c <__aeabi_idiv0>:
1000325c:	4770      	bx	lr
1000325e:	46c0      	nop			; (mov r8, r8)

10003260 <__aeabi_cfrcmple>:
10003260:	4684      	mov	ip, r0
10003262:	1c08      	adds	r0, r1, #0
10003264:	4661      	mov	r1, ip
10003266:	e7ff      	b.n	10003268 <__aeabi_cfcmpeq>

10003268 <__aeabi_cfcmpeq>:
10003268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000326a:	f000 f9f5 	bl	10003658 <__lesf2>
1000326e:	2800      	cmp	r0, #0
10003270:	d401      	bmi.n	10003276 <__aeabi_cfcmpeq+0xe>
10003272:	2100      	movs	r1, #0
10003274:	42c8      	cmn	r0, r1
10003276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10003278 <__aeabi_fcmpeq>:
10003278:	b510      	push	{r4, lr}
1000327a:	f000 f97d 	bl	10003578 <__eqsf2>
1000327e:	4240      	negs	r0, r0
10003280:	3001      	adds	r0, #1
10003282:	bd10      	pop	{r4, pc}

10003284 <__aeabi_fcmplt>:
10003284:	b510      	push	{r4, lr}
10003286:	f000 f9e7 	bl	10003658 <__lesf2>
1000328a:	2800      	cmp	r0, #0
1000328c:	db01      	blt.n	10003292 <__aeabi_fcmplt+0xe>
1000328e:	2000      	movs	r0, #0
10003290:	bd10      	pop	{r4, pc}
10003292:	2001      	movs	r0, #1
10003294:	bd10      	pop	{r4, pc}
10003296:	46c0      	nop			; (mov r8, r8)

10003298 <__aeabi_fcmple>:
10003298:	b510      	push	{r4, lr}
1000329a:	f000 f9dd 	bl	10003658 <__lesf2>
1000329e:	2800      	cmp	r0, #0
100032a0:	dd01      	ble.n	100032a6 <__aeabi_fcmple+0xe>
100032a2:	2000      	movs	r0, #0
100032a4:	bd10      	pop	{r4, pc}
100032a6:	2001      	movs	r0, #1
100032a8:	bd10      	pop	{r4, pc}
100032aa:	46c0      	nop			; (mov r8, r8)

100032ac <__aeabi_fcmpgt>:
100032ac:	b510      	push	{r4, lr}
100032ae:	f000 f98b 	bl	100035c8 <__gesf2>
100032b2:	2800      	cmp	r0, #0
100032b4:	dc01      	bgt.n	100032ba <__aeabi_fcmpgt+0xe>
100032b6:	2000      	movs	r0, #0
100032b8:	bd10      	pop	{r4, pc}
100032ba:	2001      	movs	r0, #1
100032bc:	bd10      	pop	{r4, pc}
100032be:	46c0      	nop			; (mov r8, r8)

100032c0 <__aeabi_fcmpge>:
100032c0:	b510      	push	{r4, lr}
100032c2:	f000 f981 	bl	100035c8 <__gesf2>
100032c6:	2800      	cmp	r0, #0
100032c8:	da01      	bge.n	100032ce <__aeabi_fcmpge+0xe>
100032ca:	2000      	movs	r0, #0
100032cc:	bd10      	pop	{r4, pc}
100032ce:	2001      	movs	r0, #1
100032d0:	bd10      	pop	{r4, pc}
100032d2:	46c0      	nop			; (mov r8, r8)

100032d4 <__aeabi_f2uiz>:
100032d4:	219e      	movs	r1, #158	; 0x9e
100032d6:	b510      	push	{r4, lr}
100032d8:	05c9      	lsls	r1, r1, #23
100032da:	1c04      	adds	r4, r0, #0
100032dc:	f7ff fff0 	bl	100032c0 <__aeabi_fcmpge>
100032e0:	2800      	cmp	r0, #0
100032e2:	d103      	bne.n	100032ec <__aeabi_f2uiz+0x18>
100032e4:	1c20      	adds	r0, r4, #0
100032e6:	f000 fd09 	bl	10003cfc <__aeabi_f2iz>
100032ea:	bd10      	pop	{r4, pc}
100032ec:	229e      	movs	r2, #158	; 0x9e
100032ee:	1c20      	adds	r0, r4, #0
100032f0:	05d1      	lsls	r1, r2, #23
100032f2:	f000 fb29 	bl	10003948 <__aeabi_fsub>
100032f6:	f000 fd01 	bl	10003cfc <__aeabi_f2iz>
100032fa:	2380      	movs	r3, #128	; 0x80
100032fc:	061c      	lsls	r4, r3, #24
100032fe:	1900      	adds	r0, r0, r4
10003300:	e7f3      	b.n	100032ea <__aeabi_f2uiz+0x16>
10003302:	46c0      	nop			; (mov r8, r8)

10003304 <__aeabi_fdiv>:
10003304:	b5f0      	push	{r4, r5, r6, r7, lr}
10003306:	465f      	mov	r7, fp
10003308:	4656      	mov	r6, sl
1000330a:	464d      	mov	r5, r9
1000330c:	4644      	mov	r4, r8
1000330e:	b4f0      	push	{r4, r5, r6, r7}
10003310:	0245      	lsls	r5, r0, #9
10003312:	0044      	lsls	r4, r0, #1
10003314:	b083      	sub	sp, #12
10003316:	1c0e      	adds	r6, r1, #0
10003318:	0a6d      	lsrs	r5, r5, #9
1000331a:	0e24      	lsrs	r4, r4, #24
1000331c:	0fc7      	lsrs	r7, r0, #31
1000331e:	2c00      	cmp	r4, #0
10003320:	d107      	bne.n	10003332 <__aeabi_fdiv+0x2e>
10003322:	2d00      	cmp	r5, #0
10003324:	d000      	beq.n	10003328 <__aeabi_fdiv+0x24>
10003326:	e091      	b.n	1000344c <__aeabi_fdiv+0x148>
10003328:	2104      	movs	r1, #4
1000332a:	2201      	movs	r2, #1
1000332c:	4688      	mov	r8, r1
1000332e:	4692      	mov	sl, r2
10003330:	e009      	b.n	10003346 <__aeabi_fdiv+0x42>
10003332:	2cff      	cmp	r4, #255	; 0xff
10003334:	d055      	beq.n	100033e2 <__aeabi_fdiv+0xde>
10003336:	2380      	movs	r3, #128	; 0x80
10003338:	0418      	lsls	r0, r3, #16
1000333a:	2100      	movs	r1, #0
1000333c:	4305      	orrs	r5, r0
1000333e:	00ed      	lsls	r5, r5, #3
10003340:	3c7f      	subs	r4, #127	; 0x7f
10003342:	4688      	mov	r8, r1
10003344:	468a      	mov	sl, r1
10003346:	1c33      	adds	r3, r6, #0
10003348:	0058      	lsls	r0, r3, #1
1000334a:	0276      	lsls	r6, r6, #9
1000334c:	0fd9      	lsrs	r1, r3, #31
1000334e:	0a76      	lsrs	r6, r6, #9
10003350:	0e00      	lsrs	r0, r0, #24
10003352:	468b      	mov	fp, r1
10003354:	d14c      	bne.n	100033f0 <__aeabi_fdiv+0xec>
10003356:	2201      	movs	r2, #1
10003358:	4694      	mov	ip, r2
1000335a:	2e00      	cmp	r6, #0
1000335c:	d000      	beq.n	10003360 <__aeabi_fdiv+0x5c>
1000335e:	e081      	b.n	10003464 <__aeabi_fdiv+0x160>
10003360:	465b      	mov	r3, fp
10003362:	407b      	eors	r3, r7
10003364:	4662      	mov	r2, ip
10003366:	4641      	mov	r1, r8
10003368:	9301      	str	r3, [sp, #4]
1000336a:	430a      	orrs	r2, r1
1000336c:	2a0f      	cmp	r2, #15
1000336e:	d950      	bls.n	10003412 <__aeabi_fdiv+0x10e>
10003370:	1a20      	subs	r0, r4, r0
10003372:	0169      	lsls	r1, r5, #5
10003374:	4681      	mov	r9, r0
10003376:	0175      	lsls	r5, r6, #5
10003378:	42a9      	cmp	r1, r5
1000337a:	d300      	bcc.n	1000337e <__aeabi_fdiv+0x7a>
1000337c:	e0b3      	b.n	100034e6 <__aeabi_fdiv+0x1e2>
1000337e:	2201      	movs	r2, #1
10003380:	4253      	negs	r3, r2
10003382:	4499      	add	r9, r3
10003384:	241b      	movs	r4, #27
10003386:	2600      	movs	r6, #0
10003388:	2701      	movs	r7, #1
1000338a:	1e62      	subs	r2, r4, #1
1000338c:	1c38      	adds	r0, r7, #0
1000338e:	4010      	ands	r0, r2
10003390:	004b      	lsls	r3, r1, #1
10003392:	0076      	lsls	r6, r6, #1
10003394:	2900      	cmp	r1, #0
10003396:	da00      	bge.n	1000339a <__aeabi_fdiv+0x96>
10003398:	e0a9      	b.n	100034ee <__aeabi_fdiv+0x1ea>
1000339a:	429d      	cmp	r5, r3
1000339c:	d800      	bhi.n	100033a0 <__aeabi_fdiv+0x9c>
1000339e:	e0a6      	b.n	100034ee <__aeabi_fdiv+0x1ea>
100033a0:	3c01      	subs	r4, #1
100033a2:	2c00      	cmp	r4, #0
100033a4:	dc00      	bgt.n	100033a8 <__aeabi_fdiv+0xa4>
100033a6:	e0ab      	b.n	10003500 <__aeabi_fdiv+0x1fc>
100033a8:	2800      	cmp	r0, #0
100033aa:	d00c      	beq.n	100033c6 <__aeabi_fdiv+0xc2>
100033ac:	1c19      	adds	r1, r3, #0
100033ae:	0076      	lsls	r6, r6, #1
100033b0:	005b      	lsls	r3, r3, #1
100033b2:	2900      	cmp	r1, #0
100033b4:	db01      	blt.n	100033ba <__aeabi_fdiv+0xb6>
100033b6:	429d      	cmp	r5, r3
100033b8:	d801      	bhi.n	100033be <__aeabi_fdiv+0xba>
100033ba:	1b5b      	subs	r3, r3, r5
100033bc:	433e      	orrs	r6, r7
100033be:	3c01      	subs	r4, #1
100033c0:	2c00      	cmp	r4, #0
100033c2:	dc00      	bgt.n	100033c6 <__aeabi_fdiv+0xc2>
100033c4:	e09c      	b.n	10003500 <__aeabi_fdiv+0x1fc>
100033c6:	0059      	lsls	r1, r3, #1
100033c8:	0072      	lsls	r2, r6, #1
100033ca:	2b00      	cmp	r3, #0
100033cc:	db01      	blt.n	100033d2 <__aeabi_fdiv+0xce>
100033ce:	428d      	cmp	r5, r1
100033d0:	d801      	bhi.n	100033d6 <__aeabi_fdiv+0xd2>
100033d2:	1b49      	subs	r1, r1, r5
100033d4:	433a      	orrs	r2, r7
100033d6:	3c01      	subs	r4, #1
100033d8:	004b      	lsls	r3, r1, #1
100033da:	0056      	lsls	r6, r2, #1
100033dc:	2900      	cmp	r1, #0
100033de:	daea      	bge.n	100033b6 <__aeabi_fdiv+0xb2>
100033e0:	e7eb      	b.n	100033ba <__aeabi_fdiv+0xb6>
100033e2:	2d00      	cmp	r5, #0
100033e4:	d12d      	bne.n	10003442 <__aeabi_fdiv+0x13e>
100033e6:	2008      	movs	r0, #8
100033e8:	2102      	movs	r1, #2
100033ea:	4680      	mov	r8, r0
100033ec:	468a      	mov	sl, r1
100033ee:	e7aa      	b.n	10003346 <__aeabi_fdiv+0x42>
100033f0:	28ff      	cmp	r0, #255	; 0xff
100033f2:	d020      	beq.n	10003436 <__aeabi_fdiv+0x132>
100033f4:	2280      	movs	r2, #128	; 0x80
100033f6:	0413      	lsls	r3, r2, #16
100033f8:	2100      	movs	r1, #0
100033fa:	431e      	orrs	r6, r3
100033fc:	468c      	mov	ip, r1
100033fe:	465b      	mov	r3, fp
10003400:	407b      	eors	r3, r7
10003402:	4662      	mov	r2, ip
10003404:	4641      	mov	r1, r8
10003406:	00f6      	lsls	r6, r6, #3
10003408:	387f      	subs	r0, #127	; 0x7f
1000340a:	9301      	str	r3, [sp, #4]
1000340c:	430a      	orrs	r2, r1
1000340e:	2a0f      	cmp	r2, #15
10003410:	d8ae      	bhi.n	10003370 <__aeabi_fdiv+0x6c>
10003412:	4956      	ldr	r1, [pc, #344]	; (1000356c <__aeabi_fdiv+0x268>)
10003414:	0092      	lsls	r2, r2, #2
10003416:	588a      	ldr	r2, [r1, r2]
10003418:	4697      	mov	pc, r2
1000341a:	9b01      	ldr	r3, [sp, #4]
1000341c:	26ff      	movs	r6, #255	; 0xff
1000341e:	2500      	movs	r5, #0
10003420:	05f0      	lsls	r0, r6, #23
10003422:	4328      	orrs	r0, r5
10003424:	07de      	lsls	r6, r3, #31
10003426:	4330      	orrs	r0, r6
10003428:	b003      	add	sp, #12
1000342a:	bc3c      	pop	{r2, r3, r4, r5}
1000342c:	4690      	mov	r8, r2
1000342e:	4699      	mov	r9, r3
10003430:	46a2      	mov	sl, r4
10003432:	46ab      	mov	fp, r5
10003434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003436:	1c33      	adds	r3, r6, #0
10003438:	1e5a      	subs	r2, r3, #1
1000343a:	4193      	sbcs	r3, r2
1000343c:	3302      	adds	r3, #2
1000343e:	469c      	mov	ip, r3
10003440:	e78e      	b.n	10003360 <__aeabi_fdiv+0x5c>
10003442:	220c      	movs	r2, #12
10003444:	2303      	movs	r3, #3
10003446:	4690      	mov	r8, r2
10003448:	469a      	mov	sl, r3
1000344a:	e77c      	b.n	10003346 <__aeabi_fdiv+0x42>
1000344c:	1c28      	adds	r0, r5, #0
1000344e:	f000 fcc9 	bl	10003de4 <__clzsi2>
10003452:	2276      	movs	r2, #118	; 0x76
10003454:	1f44      	subs	r4, r0, #5
10003456:	4253      	negs	r3, r2
10003458:	40a5      	lsls	r5, r4
1000345a:	1a1c      	subs	r4, r3, r0
1000345c:	2000      	movs	r0, #0
1000345e:	4680      	mov	r8, r0
10003460:	4682      	mov	sl, r0
10003462:	e770      	b.n	10003346 <__aeabi_fdiv+0x42>
10003464:	1c30      	adds	r0, r6, #0
10003466:	f000 fcbd 	bl	10003de4 <__clzsi2>
1000346a:	2376      	movs	r3, #118	; 0x76
1000346c:	1f41      	subs	r1, r0, #5
1000346e:	408e      	lsls	r6, r1
10003470:	425a      	negs	r2, r3
10003472:	2100      	movs	r1, #0
10003474:	1a10      	subs	r0, r2, r0
10003476:	468c      	mov	ip, r1
10003478:	e772      	b.n	10003360 <__aeabi_fdiv+0x5c>
1000347a:	2300      	movs	r3, #0
1000347c:	4d3c      	ldr	r5, [pc, #240]	; (10003570 <__aeabi_fdiv+0x26c>)
1000347e:	26ff      	movs	r6, #255	; 0xff
10003480:	e7ce      	b.n	10003420 <__aeabi_fdiv+0x11c>
10003482:	465f      	mov	r7, fp
10003484:	1c35      	adds	r5, r6, #0
10003486:	9701      	str	r7, [sp, #4]
10003488:	4663      	mov	r3, ip
1000348a:	2b02      	cmp	r3, #2
1000348c:	d0c5      	beq.n	1000341a <__aeabi_fdiv+0x116>
1000348e:	2b03      	cmp	r3, #3
10003490:	d063      	beq.n	1000355a <__aeabi_fdiv+0x256>
10003492:	2b01      	cmp	r3, #1
10003494:	d043      	beq.n	1000351e <__aeabi_fdiv+0x21a>
10003496:	4649      	mov	r1, r9
10003498:	317f      	adds	r1, #127	; 0x7f
1000349a:	2900      	cmp	r1, #0
1000349c:	dd35      	ble.n	1000350a <__aeabi_fdiv+0x206>
1000349e:	270f      	movs	r7, #15
100034a0:	402f      	ands	r7, r5
100034a2:	2f04      	cmp	r7, #4
100034a4:	d000      	beq.n	100034a8 <__aeabi_fdiv+0x1a4>
100034a6:	3504      	adds	r5, #4
100034a8:	012b      	lsls	r3, r5, #4
100034aa:	d503      	bpl.n	100034b4 <__aeabi_fdiv+0x1b0>
100034ac:	4a31      	ldr	r2, [pc, #196]	; (10003574 <__aeabi_fdiv+0x270>)
100034ae:	4649      	mov	r1, r9
100034b0:	4015      	ands	r5, r2
100034b2:	3180      	adds	r1, #128	; 0x80
100034b4:	29fe      	cmp	r1, #254	; 0xfe
100034b6:	dcb0      	bgt.n	1000341a <__aeabi_fdiv+0x116>
100034b8:	01a8      	lsls	r0, r5, #6
100034ba:	0a45      	lsrs	r5, r0, #9
100034bc:	b2ce      	uxtb	r6, r1
100034be:	9b01      	ldr	r3, [sp, #4]
100034c0:	e7ae      	b.n	10003420 <__aeabi_fdiv+0x11c>
100034c2:	2600      	movs	r6, #0
100034c4:	2500      	movs	r5, #0
100034c6:	e7ab      	b.n	10003420 <__aeabi_fdiv+0x11c>
100034c8:	2080      	movs	r0, #128	; 0x80
100034ca:	03c1      	lsls	r1, r0, #15
100034cc:	420d      	tst	r5, r1
100034ce:	d011      	beq.n	100034f4 <__aeabi_fdiv+0x1f0>
100034d0:	420e      	tst	r6, r1
100034d2:	d10f      	bne.n	100034f4 <__aeabi_fdiv+0x1f0>
100034d4:	430e      	orrs	r6, r1
100034d6:	0273      	lsls	r3, r6, #9
100034d8:	0a5d      	lsrs	r5, r3, #9
100034da:	26ff      	movs	r6, #255	; 0xff
100034dc:	465b      	mov	r3, fp
100034de:	e79f      	b.n	10003420 <__aeabi_fdiv+0x11c>
100034e0:	9701      	str	r7, [sp, #4]
100034e2:	4653      	mov	r3, sl
100034e4:	e7d1      	b.n	1000348a <__aeabi_fdiv+0x186>
100034e6:	1b49      	subs	r1, r1, r5
100034e8:	241a      	movs	r4, #26
100034ea:	2601      	movs	r6, #1
100034ec:	e74c      	b.n	10003388 <__aeabi_fdiv+0x84>
100034ee:	1b5b      	subs	r3, r3, r5
100034f0:	433e      	orrs	r6, r7
100034f2:	e755      	b.n	100033a0 <__aeabi_fdiv+0x9c>
100034f4:	430d      	orrs	r5, r1
100034f6:	026a      	lsls	r2, r5, #9
100034f8:	0a55      	lsrs	r5, r2, #9
100034fa:	1c3b      	adds	r3, r7, #0
100034fc:	26ff      	movs	r6, #255	; 0xff
100034fe:	e78f      	b.n	10003420 <__aeabi_fdiv+0x11c>
10003500:	1c1d      	adds	r5, r3, #0
10003502:	1e6b      	subs	r3, r5, #1
10003504:	419d      	sbcs	r5, r3
10003506:	4335      	orrs	r5, r6
10003508:	e7c5      	b.n	10003496 <__aeabi_fdiv+0x192>
1000350a:	247e      	movs	r4, #126	; 0x7e
1000350c:	4267      	negs	r7, r4
1000350e:	464a      	mov	r2, r9
10003510:	1ab9      	subs	r1, r7, r2
10003512:	291b      	cmp	r1, #27
10003514:	dd08      	ble.n	10003528 <__aeabi_fdiv+0x224>
10003516:	9b01      	ldr	r3, [sp, #4]
10003518:	2600      	movs	r6, #0
1000351a:	2500      	movs	r5, #0
1000351c:	e780      	b.n	10003420 <__aeabi_fdiv+0x11c>
1000351e:	9d01      	ldr	r5, [sp, #4]
10003520:	2600      	movs	r6, #0
10003522:	402b      	ands	r3, r5
10003524:	2500      	movs	r5, #0
10003526:	e77b      	b.n	10003420 <__aeabi_fdiv+0x11c>
10003528:	464e      	mov	r6, r9
1000352a:	369e      	adds	r6, #158	; 0x9e
1000352c:	1c28      	adds	r0, r5, #0
1000352e:	40b5      	lsls	r5, r6
10003530:	1c2b      	adds	r3, r5, #0
10003532:	1e5d      	subs	r5, r3, #1
10003534:	41ab      	sbcs	r3, r5
10003536:	40c8      	lsrs	r0, r1
10003538:	4303      	orrs	r3, r0
1000353a:	250f      	movs	r5, #15
1000353c:	401d      	ands	r5, r3
1000353e:	2d04      	cmp	r5, #4
10003540:	d000      	beq.n	10003544 <__aeabi_fdiv+0x240>
10003542:	3304      	adds	r3, #4
10003544:	015a      	lsls	r2, r3, #5
10003546:	d503      	bpl.n	10003550 <__aeabi_fdiv+0x24c>
10003548:	9b01      	ldr	r3, [sp, #4]
1000354a:	2601      	movs	r6, #1
1000354c:	2500      	movs	r5, #0
1000354e:	e767      	b.n	10003420 <__aeabi_fdiv+0x11c>
10003550:	019c      	lsls	r4, r3, #6
10003552:	0a65      	lsrs	r5, r4, #9
10003554:	9b01      	ldr	r3, [sp, #4]
10003556:	2600      	movs	r6, #0
10003558:	e762      	b.n	10003420 <__aeabi_fdiv+0x11c>
1000355a:	2780      	movs	r7, #128	; 0x80
1000355c:	03fc      	lsls	r4, r7, #15
1000355e:	4325      	orrs	r5, r4
10003560:	026e      	lsls	r6, r5, #9
10003562:	0a75      	lsrs	r5, r6, #9
10003564:	9b01      	ldr	r3, [sp, #4]
10003566:	26ff      	movs	r6, #255	; 0xff
10003568:	e75a      	b.n	10003420 <__aeabi_fdiv+0x11c>
1000356a:	46c0      	nop			; (mov r8, r8)
1000356c:	10003e88 	.word	0x10003e88
10003570:	007fffff 	.word	0x007fffff
10003574:	f7ffffff 	.word	0xf7ffffff

10003578 <__eqsf2>:
10003578:	0243      	lsls	r3, r0, #9
1000357a:	0042      	lsls	r2, r0, #1
1000357c:	b570      	push	{r4, r5, r6, lr}
1000357e:	0a5c      	lsrs	r4, r3, #9
10003580:	0fc6      	lsrs	r6, r0, #31
10003582:	0e13      	lsrs	r3, r2, #24
10003584:	0248      	lsls	r0, r1, #9
10003586:	004a      	lsls	r2, r1, #1
10003588:	0a45      	lsrs	r5, r0, #9
1000358a:	0e12      	lsrs	r2, r2, #24
1000358c:	0fc9      	lsrs	r1, r1, #31
1000358e:	2bff      	cmp	r3, #255	; 0xff
10003590:	d005      	beq.n	1000359e <__eqsf2+0x26>
10003592:	2aff      	cmp	r2, #255	; 0xff
10003594:	d008      	beq.n	100035a8 <__eqsf2+0x30>
10003596:	2001      	movs	r0, #1
10003598:	4293      	cmp	r3, r2
1000359a:	d00b      	beq.n	100035b4 <__eqsf2+0x3c>
1000359c:	bd70      	pop	{r4, r5, r6, pc}
1000359e:	2001      	movs	r0, #1
100035a0:	2c00      	cmp	r4, #0
100035a2:	d1fb      	bne.n	1000359c <__eqsf2+0x24>
100035a4:	2aff      	cmp	r2, #255	; 0xff
100035a6:	d1f6      	bne.n	10003596 <__eqsf2+0x1e>
100035a8:	2001      	movs	r0, #1
100035aa:	2d00      	cmp	r5, #0
100035ac:	d1f6      	bne.n	1000359c <__eqsf2+0x24>
100035ae:	2001      	movs	r0, #1
100035b0:	4293      	cmp	r3, r2
100035b2:	d1f3      	bne.n	1000359c <__eqsf2+0x24>
100035b4:	42ac      	cmp	r4, r5
100035b6:	d1f1      	bne.n	1000359c <__eqsf2+0x24>
100035b8:	428e      	cmp	r6, r1
100035ba:	d003      	beq.n	100035c4 <__eqsf2+0x4c>
100035bc:	2b00      	cmp	r3, #0
100035be:	d1ed      	bne.n	1000359c <__eqsf2+0x24>
100035c0:	2c00      	cmp	r4, #0
100035c2:	d1eb      	bne.n	1000359c <__eqsf2+0x24>
100035c4:	2000      	movs	r0, #0
100035c6:	e7e9      	b.n	1000359c <__eqsf2+0x24>

100035c8 <__gesf2>:
100035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100035ca:	0243      	lsls	r3, r0, #9
100035cc:	0042      	lsls	r2, r0, #1
100035ce:	004f      	lsls	r7, r1, #1
100035d0:	0fc6      	lsrs	r6, r0, #31
100035d2:	0248      	lsls	r0, r1, #9
100035d4:	0a5c      	lsrs	r4, r3, #9
100035d6:	0a45      	lsrs	r5, r0, #9
100035d8:	0e13      	lsrs	r3, r2, #24
100035da:	0fc9      	lsrs	r1, r1, #31
100035dc:	0e3a      	lsrs	r2, r7, #24
100035de:	2bff      	cmp	r3, #255	; 0xff
100035e0:	d026      	beq.n	10003630 <__gesf2+0x68>
100035e2:	2aff      	cmp	r2, #255	; 0xff
100035e4:	d029      	beq.n	1000363a <__gesf2+0x72>
100035e6:	2b00      	cmp	r3, #0
100035e8:	d10c      	bne.n	10003604 <__gesf2+0x3c>
100035ea:	4260      	negs	r0, r4
100035ec:	4160      	adcs	r0, r4
100035ee:	4684      	mov	ip, r0
100035f0:	2a00      	cmp	r2, #0
100035f2:	d00a      	beq.n	1000360a <__gesf2+0x42>
100035f4:	2800      	cmp	r0, #0
100035f6:	d116      	bne.n	10003626 <__gesf2+0x5e>
100035f8:	428e      	cmp	r6, r1
100035fa:	d021      	beq.n	10003640 <__gesf2+0x78>
100035fc:	2e00      	cmp	r6, #0
100035fe:	d114      	bne.n	1000362a <__gesf2+0x62>
10003600:	2001      	movs	r0, #1
10003602:	e014      	b.n	1000362e <__gesf2+0x66>
10003604:	2a00      	cmp	r2, #0
10003606:	d1f7      	bne.n	100035f8 <__gesf2+0x30>
10003608:	4694      	mov	ip, r2
1000360a:	426f      	negs	r7, r5
1000360c:	416f      	adcs	r7, r5
1000360e:	4660      	mov	r0, ip
10003610:	2800      	cmp	r0, #0
10003612:	d105      	bne.n	10003620 <__gesf2+0x58>
10003614:	2f00      	cmp	r7, #0
10003616:	d0ef      	beq.n	100035f8 <__gesf2+0x30>
10003618:	2001      	movs	r0, #1
1000361a:	2e00      	cmp	r6, #0
1000361c:	d007      	beq.n	1000362e <__gesf2+0x66>
1000361e:	e004      	b.n	1000362a <__gesf2+0x62>
10003620:	2000      	movs	r0, #0
10003622:	2f00      	cmp	r7, #0
10003624:	d103      	bne.n	1000362e <__gesf2+0x66>
10003626:	2900      	cmp	r1, #0
10003628:	d1ea      	bne.n	10003600 <__gesf2+0x38>
1000362a:	2101      	movs	r1, #1
1000362c:	4248      	negs	r0, r1
1000362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003630:	2c00      	cmp	r4, #0
10003632:	d0d6      	beq.n	100035e2 <__gesf2+0x1a>
10003634:	2202      	movs	r2, #2
10003636:	4250      	negs	r0, r2
10003638:	e7f9      	b.n	1000362e <__gesf2+0x66>
1000363a:	2d00      	cmp	r5, #0
1000363c:	d0d3      	beq.n	100035e6 <__gesf2+0x1e>
1000363e:	e7f9      	b.n	10003634 <__gesf2+0x6c>
10003640:	4293      	cmp	r3, r2
10003642:	dcdb      	bgt.n	100035fc <__gesf2+0x34>
10003644:	db04      	blt.n	10003650 <__gesf2+0x88>
10003646:	42ac      	cmp	r4, r5
10003648:	d8d8      	bhi.n	100035fc <__gesf2+0x34>
1000364a:	2000      	movs	r0, #0
1000364c:	42ac      	cmp	r4, r5
1000364e:	d2ee      	bcs.n	1000362e <__gesf2+0x66>
10003650:	2e00      	cmp	r6, #0
10003652:	d0ea      	beq.n	1000362a <__gesf2+0x62>
10003654:	2001      	movs	r0, #1
10003656:	e7ea      	b.n	1000362e <__gesf2+0x66>

10003658 <__lesf2>:
10003658:	b5f0      	push	{r4, r5, r6, r7, lr}
1000365a:	0243      	lsls	r3, r0, #9
1000365c:	0042      	lsls	r2, r0, #1
1000365e:	004f      	lsls	r7, r1, #1
10003660:	0fc6      	lsrs	r6, r0, #31
10003662:	0248      	lsls	r0, r1, #9
10003664:	0a5c      	lsrs	r4, r3, #9
10003666:	0a45      	lsrs	r5, r0, #9
10003668:	0e13      	lsrs	r3, r2, #24
1000366a:	0fc9      	lsrs	r1, r1, #31
1000366c:	0e3a      	lsrs	r2, r7, #24
1000366e:	2bff      	cmp	r3, #255	; 0xff
10003670:	d026      	beq.n	100036c0 <__lesf2+0x68>
10003672:	2aff      	cmp	r2, #255	; 0xff
10003674:	d028      	beq.n	100036c8 <__lesf2+0x70>
10003676:	2b00      	cmp	r3, #0
10003678:	d00f      	beq.n	1000369a <__lesf2+0x42>
1000367a:	2a00      	cmp	r2, #0
1000367c:	d114      	bne.n	100036a8 <__lesf2+0x50>
1000367e:	4694      	mov	ip, r2
10003680:	426f      	negs	r7, r5
10003682:	416f      	adcs	r7, r5
10003684:	4660      	mov	r0, ip
10003686:	2800      	cmp	r0, #0
10003688:	d014      	beq.n	100036b4 <__lesf2+0x5c>
1000368a:	2000      	movs	r0, #0
1000368c:	2f00      	cmp	r7, #0
1000368e:	d103      	bne.n	10003698 <__lesf2+0x40>
10003690:	2900      	cmp	r1, #0
10003692:	d10d      	bne.n	100036b0 <__lesf2+0x58>
10003694:	2101      	movs	r1, #1
10003696:	4248      	negs	r0, r1
10003698:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000369a:	4260      	negs	r0, r4
1000369c:	4160      	adcs	r0, r4
1000369e:	4684      	mov	ip, r0
100036a0:	2a00      	cmp	r2, #0
100036a2:	d0ed      	beq.n	10003680 <__lesf2+0x28>
100036a4:	2800      	cmp	r0, #0
100036a6:	d1f3      	bne.n	10003690 <__lesf2+0x38>
100036a8:	428e      	cmp	r6, r1
100036aa:	d011      	beq.n	100036d0 <__lesf2+0x78>
100036ac:	2e00      	cmp	r6, #0
100036ae:	d1f1      	bne.n	10003694 <__lesf2+0x3c>
100036b0:	2001      	movs	r0, #1
100036b2:	e7f1      	b.n	10003698 <__lesf2+0x40>
100036b4:	2f00      	cmp	r7, #0
100036b6:	d0f7      	beq.n	100036a8 <__lesf2+0x50>
100036b8:	2001      	movs	r0, #1
100036ba:	2e00      	cmp	r6, #0
100036bc:	d0ec      	beq.n	10003698 <__lesf2+0x40>
100036be:	e7e9      	b.n	10003694 <__lesf2+0x3c>
100036c0:	2002      	movs	r0, #2
100036c2:	2c00      	cmp	r4, #0
100036c4:	d1e8      	bne.n	10003698 <__lesf2+0x40>
100036c6:	e7d4      	b.n	10003672 <__lesf2+0x1a>
100036c8:	2002      	movs	r0, #2
100036ca:	2d00      	cmp	r5, #0
100036cc:	d1e4      	bne.n	10003698 <__lesf2+0x40>
100036ce:	e7d2      	b.n	10003676 <__lesf2+0x1e>
100036d0:	4293      	cmp	r3, r2
100036d2:	dceb      	bgt.n	100036ac <__lesf2+0x54>
100036d4:	db04      	blt.n	100036e0 <__lesf2+0x88>
100036d6:	42ac      	cmp	r4, r5
100036d8:	d8e8      	bhi.n	100036ac <__lesf2+0x54>
100036da:	2000      	movs	r0, #0
100036dc:	42ac      	cmp	r4, r5
100036de:	d2db      	bcs.n	10003698 <__lesf2+0x40>
100036e0:	2e00      	cmp	r6, #0
100036e2:	d0d7      	beq.n	10003694 <__lesf2+0x3c>
100036e4:	2001      	movs	r0, #1
100036e6:	e7d7      	b.n	10003698 <__lesf2+0x40>

100036e8 <__aeabi_fmul>:
100036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100036ea:	465f      	mov	r7, fp
100036ec:	4656      	mov	r6, sl
100036ee:	464d      	mov	r5, r9
100036f0:	4644      	mov	r4, r8
100036f2:	b4f0      	push	{r4, r5, r6, r7}
100036f4:	0245      	lsls	r5, r0, #9
100036f6:	0046      	lsls	r6, r0, #1
100036f8:	b083      	sub	sp, #12
100036fa:	1c0f      	adds	r7, r1, #0
100036fc:	0a6d      	lsrs	r5, r5, #9
100036fe:	0e36      	lsrs	r6, r6, #24
10003700:	0fc4      	lsrs	r4, r0, #31
10003702:	2e00      	cmp	r6, #0
10003704:	d106      	bne.n	10003714 <__aeabi_fmul+0x2c>
10003706:	2d00      	cmp	r5, #0
10003708:	d170      	bne.n	100037ec <__aeabi_fmul+0x104>
1000370a:	2104      	movs	r1, #4
1000370c:	2201      	movs	r2, #1
1000370e:	4688      	mov	r8, r1
10003710:	4692      	mov	sl, r2
10003712:	e009      	b.n	10003728 <__aeabi_fmul+0x40>
10003714:	2eff      	cmp	r6, #255	; 0xff
10003716:	d043      	beq.n	100037a0 <__aeabi_fmul+0xb8>
10003718:	2380      	movs	r3, #128	; 0x80
1000371a:	0418      	lsls	r0, r3, #16
1000371c:	2100      	movs	r1, #0
1000371e:	4305      	orrs	r5, r0
10003720:	00ed      	lsls	r5, r5, #3
10003722:	3e7f      	subs	r6, #127	; 0x7f
10003724:	4688      	mov	r8, r1
10003726:	468a      	mov	sl, r1
10003728:	1c38      	adds	r0, r7, #0
1000372a:	0043      	lsls	r3, r0, #1
1000372c:	027f      	lsls	r7, r7, #9
1000372e:	0fc1      	lsrs	r1, r0, #31
10003730:	0a7f      	lsrs	r7, r7, #9
10003732:	0e1b      	lsrs	r3, r3, #24
10003734:	468b      	mov	fp, r1
10003736:	d13a      	bne.n	100037ae <__aeabi_fmul+0xc6>
10003738:	2101      	movs	r1, #1
1000373a:	2f00      	cmp	r7, #0
1000373c:	d162      	bne.n	10003804 <__aeabi_fmul+0x11c>
1000373e:	4658      	mov	r0, fp
10003740:	4060      	eors	r0, r4
10003742:	4642      	mov	r2, r8
10003744:	9001      	str	r0, [sp, #4]
10003746:	430a      	orrs	r2, r1
10003748:	2a0f      	cmp	r2, #15
1000374a:	d93f      	bls.n	100037cc <__aeabi_fmul+0xe4>
1000374c:	042c      	lsls	r4, r5, #16
1000374e:	18f0      	adds	r0, r6, r3
10003750:	0c26      	lsrs	r6, r4, #16
10003752:	043b      	lsls	r3, r7, #16
10003754:	0c1a      	lsrs	r2, r3, #16
10003756:	1c31      	adds	r1, r6, #0
10003758:	4351      	muls	r1, r2
1000375a:	0c3f      	lsrs	r7, r7, #16
1000375c:	0c2d      	lsrs	r5, r5, #16
1000375e:	437e      	muls	r6, r7
10003760:	436a      	muls	r2, r5
10003762:	4681      	mov	r9, r0
10003764:	0c08      	lsrs	r0, r1, #16
10003766:	1836      	adds	r6, r6, r0
10003768:	1c2c      	adds	r4, r5, #0
1000376a:	18b3      	adds	r3, r6, r2
1000376c:	437c      	muls	r4, r7
1000376e:	429a      	cmp	r2, r3
10003770:	d900      	bls.n	10003774 <__aeabi_fmul+0x8c>
10003772:	e09a      	b.n	100038aa <__aeabi_fmul+0x1c2>
10003774:	0409      	lsls	r1, r1, #16
10003776:	041d      	lsls	r5, r3, #16
10003778:	0c08      	lsrs	r0, r1, #16
1000377a:	182e      	adds	r6, r5, r0
1000377c:	01b5      	lsls	r5, r6, #6
1000377e:	0c1b      	lsrs	r3, r3, #16
10003780:	1e69      	subs	r1, r5, #1
10003782:	418d      	sbcs	r5, r1
10003784:	0eb2      	lsrs	r2, r6, #26
10003786:	18e7      	adds	r7, r4, r3
10003788:	4315      	orrs	r5, r2
1000378a:	01bc      	lsls	r4, r7, #6
1000378c:	4325      	orrs	r5, r4
1000378e:	012b      	lsls	r3, r5, #4
10003790:	d54b      	bpl.n	1000382a <__aeabi_fmul+0x142>
10003792:	2001      	movs	r0, #1
10003794:	4028      	ands	r0, r5
10003796:	2101      	movs	r1, #1
10003798:	086d      	lsrs	r5, r5, #1
1000379a:	4489      	add	r9, r1
1000379c:	4305      	orrs	r5, r0
1000379e:	e044      	b.n	1000382a <__aeabi_fmul+0x142>
100037a0:	2d00      	cmp	r5, #0
100037a2:	d11e      	bne.n	100037e2 <__aeabi_fmul+0xfa>
100037a4:	2008      	movs	r0, #8
100037a6:	2102      	movs	r1, #2
100037a8:	4680      	mov	r8, r0
100037aa:	468a      	mov	sl, r1
100037ac:	e7bc      	b.n	10003728 <__aeabi_fmul+0x40>
100037ae:	2bff      	cmp	r3, #255	; 0xff
100037b0:	d012      	beq.n	100037d8 <__aeabi_fmul+0xf0>
100037b2:	2280      	movs	r2, #128	; 0x80
100037b4:	0410      	lsls	r0, r2, #16
100037b6:	4307      	orrs	r7, r0
100037b8:	4658      	mov	r0, fp
100037ba:	2100      	movs	r1, #0
100037bc:	4060      	eors	r0, r4
100037be:	4642      	mov	r2, r8
100037c0:	00ff      	lsls	r7, r7, #3
100037c2:	3b7f      	subs	r3, #127	; 0x7f
100037c4:	9001      	str	r0, [sp, #4]
100037c6:	430a      	orrs	r2, r1
100037c8:	2a0f      	cmp	r2, #15
100037ca:	d8bf      	bhi.n	1000374c <__aeabi_fmul+0x64>
100037cc:	0090      	lsls	r0, r2, #2
100037ce:	4a5b      	ldr	r2, [pc, #364]	; (1000393c <__aeabi_fmul+0x254>)
100037d0:	4684      	mov	ip, r0
100037d2:	4462      	add	r2, ip
100037d4:	6810      	ldr	r0, [r2, #0]
100037d6:	4687      	mov	pc, r0
100037d8:	1c39      	adds	r1, r7, #0
100037da:	1e4a      	subs	r2, r1, #1
100037dc:	4191      	sbcs	r1, r2
100037de:	3102      	adds	r1, #2
100037e0:	e7ad      	b.n	1000373e <__aeabi_fmul+0x56>
100037e2:	220c      	movs	r2, #12
100037e4:	2303      	movs	r3, #3
100037e6:	4690      	mov	r8, r2
100037e8:	469a      	mov	sl, r3
100037ea:	e79d      	b.n	10003728 <__aeabi_fmul+0x40>
100037ec:	1c28      	adds	r0, r5, #0
100037ee:	f000 faf9 	bl	10003de4 <__clzsi2>
100037f2:	2276      	movs	r2, #118	; 0x76
100037f4:	1f46      	subs	r6, r0, #5
100037f6:	4253      	negs	r3, r2
100037f8:	40b5      	lsls	r5, r6
100037fa:	1a1e      	subs	r6, r3, r0
100037fc:	2000      	movs	r0, #0
100037fe:	4680      	mov	r8, r0
10003800:	4682      	mov	sl, r0
10003802:	e791      	b.n	10003728 <__aeabi_fmul+0x40>
10003804:	1c38      	adds	r0, r7, #0
10003806:	f000 faed 	bl	10003de4 <__clzsi2>
1000380a:	2176      	movs	r1, #118	; 0x76
1000380c:	1f43      	subs	r3, r0, #5
1000380e:	424a      	negs	r2, r1
10003810:	409f      	lsls	r7, r3
10003812:	2100      	movs	r1, #0
10003814:	1a13      	subs	r3, r2, r0
10003816:	e792      	b.n	1000373e <__aeabi_fmul+0x56>
10003818:	9401      	str	r4, [sp, #4]
1000381a:	4651      	mov	r1, sl
1000381c:	2902      	cmp	r1, #2
1000381e:	d02c      	beq.n	1000387a <__aeabi_fmul+0x192>
10003820:	2903      	cmp	r1, #3
10003822:	d100      	bne.n	10003826 <__aeabi_fmul+0x13e>
10003824:	e080      	b.n	10003928 <__aeabi_fmul+0x240>
10003826:	2901      	cmp	r1, #1
10003828:	d048      	beq.n	100038bc <__aeabi_fmul+0x1d4>
1000382a:	464e      	mov	r6, r9
1000382c:	367f      	adds	r6, #127	; 0x7f
1000382e:	2e00      	cmp	r6, #0
10003830:	dd51      	ble.n	100038d6 <__aeabi_fmul+0x1ee>
10003832:	240f      	movs	r4, #15
10003834:	402c      	ands	r4, r5
10003836:	2c04      	cmp	r4, #4
10003838:	d000      	beq.n	1000383c <__aeabi_fmul+0x154>
1000383a:	3504      	adds	r5, #4
1000383c:	012a      	lsls	r2, r5, #4
1000383e:	d503      	bpl.n	10003848 <__aeabi_fmul+0x160>
10003840:	493f      	ldr	r1, [pc, #252]	; (10003940 <__aeabi_fmul+0x258>)
10003842:	464e      	mov	r6, r9
10003844:	400d      	ands	r5, r1
10003846:	3680      	adds	r6, #128	; 0x80
10003848:	2efe      	cmp	r6, #254	; 0xfe
1000384a:	dd3d      	ble.n	100038c8 <__aeabi_fmul+0x1e0>
1000384c:	9b01      	ldr	r3, [sp, #4]
1000384e:	2401      	movs	r4, #1
10003850:	401c      	ands	r4, r3
10003852:	21ff      	movs	r1, #255	; 0xff
10003854:	2500      	movs	r5, #0
10003856:	05c8      	lsls	r0, r1, #23
10003858:	07e2      	lsls	r2, r4, #31
1000385a:	4328      	orrs	r0, r5
1000385c:	4310      	orrs	r0, r2
1000385e:	b003      	add	sp, #12
10003860:	bc3c      	pop	{r2, r3, r4, r5}
10003862:	4690      	mov	r8, r2
10003864:	4699      	mov	r9, r3
10003866:	46a2      	mov	sl, r4
10003868:	46ab      	mov	fp, r5
1000386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000386c:	2400      	movs	r4, #0
1000386e:	4d35      	ldr	r5, [pc, #212]	; (10003944 <__aeabi_fmul+0x25c>)
10003870:	21ff      	movs	r1, #255	; 0xff
10003872:	e7f0      	b.n	10003856 <__aeabi_fmul+0x16e>
10003874:	4651      	mov	r1, sl
10003876:	2902      	cmp	r1, #2
10003878:	d1d2      	bne.n	10003820 <__aeabi_fmul+0x138>
1000387a:	9d01      	ldr	r5, [sp, #4]
1000387c:	2401      	movs	r4, #1
1000387e:	402c      	ands	r4, r5
10003880:	21ff      	movs	r1, #255	; 0xff
10003882:	2500      	movs	r5, #0
10003884:	e7e7      	b.n	10003856 <__aeabi_fmul+0x16e>
10003886:	465e      	mov	r6, fp
10003888:	1c3d      	adds	r5, r7, #0
1000388a:	9601      	str	r6, [sp, #4]
1000388c:	e7c6      	b.n	1000381c <__aeabi_fmul+0x134>
1000388e:	1c3d      	adds	r5, r7, #0
10003890:	e7c4      	b.n	1000381c <__aeabi_fmul+0x134>
10003892:	2680      	movs	r6, #128	; 0x80
10003894:	03f3      	lsls	r3, r6, #15
10003896:	421d      	tst	r5, r3
10003898:	d00b      	beq.n	100038b2 <__aeabi_fmul+0x1ca>
1000389a:	421f      	tst	r7, r3
1000389c:	d109      	bne.n	100038b2 <__aeabi_fmul+0x1ca>
1000389e:	431f      	orrs	r7, r3
100038a0:	027a      	lsls	r2, r7, #9
100038a2:	0a55      	lsrs	r5, r2, #9
100038a4:	465c      	mov	r4, fp
100038a6:	21ff      	movs	r1, #255	; 0xff
100038a8:	e7d5      	b.n	10003856 <__aeabi_fmul+0x16e>
100038aa:	2280      	movs	r2, #128	; 0x80
100038ac:	0257      	lsls	r7, r2, #9
100038ae:	19e4      	adds	r4, r4, r7
100038b0:	e760      	b.n	10003774 <__aeabi_fmul+0x8c>
100038b2:	431d      	orrs	r5, r3
100038b4:	026f      	lsls	r7, r5, #9
100038b6:	0a7d      	lsrs	r5, r7, #9
100038b8:	21ff      	movs	r1, #255	; 0xff
100038ba:	e7cc      	b.n	10003856 <__aeabi_fmul+0x16e>
100038bc:	9b01      	ldr	r3, [sp, #4]
100038be:	2500      	movs	r5, #0
100038c0:	4019      	ands	r1, r3
100038c2:	b2cc      	uxtb	r4, r1
100038c4:	2100      	movs	r1, #0
100038c6:	e7c6      	b.n	10003856 <__aeabi_fmul+0x16e>
100038c8:	9801      	ldr	r0, [sp, #4]
100038ca:	01ad      	lsls	r5, r5, #6
100038cc:	2401      	movs	r4, #1
100038ce:	0a6d      	lsrs	r5, r5, #9
100038d0:	b2f1      	uxtb	r1, r6
100038d2:	4004      	ands	r4, r0
100038d4:	e7bf      	b.n	10003856 <__aeabi_fmul+0x16e>
100038d6:	267e      	movs	r6, #126	; 0x7e
100038d8:	4273      	negs	r3, r6
100038da:	464a      	mov	r2, r9
100038dc:	1a9f      	subs	r7, r3, r2
100038de:	2f1b      	cmp	r7, #27
100038e0:	dd05      	ble.n	100038ee <__aeabi_fmul+0x206>
100038e2:	9d01      	ldr	r5, [sp, #4]
100038e4:	2401      	movs	r4, #1
100038e6:	402c      	ands	r4, r5
100038e8:	2100      	movs	r1, #0
100038ea:	2500      	movs	r5, #0
100038ec:	e7b3      	b.n	10003856 <__aeabi_fmul+0x16e>
100038ee:	4649      	mov	r1, r9
100038f0:	319e      	adds	r1, #158	; 0x9e
100038f2:	1c2c      	adds	r4, r5, #0
100038f4:	408d      	lsls	r5, r1
100038f6:	1c2e      	adds	r6, r5, #0
100038f8:	40fc      	lsrs	r4, r7
100038fa:	1e75      	subs	r5, r6, #1
100038fc:	41ae      	sbcs	r6, r5
100038fe:	4326      	orrs	r6, r4
10003900:	200f      	movs	r0, #15
10003902:	4030      	ands	r0, r6
10003904:	2804      	cmp	r0, #4
10003906:	d000      	beq.n	1000390a <__aeabi_fmul+0x222>
10003908:	3604      	adds	r6, #4
1000390a:	0170      	lsls	r0, r6, #5
1000390c:	d505      	bpl.n	1000391a <__aeabi_fmul+0x232>
1000390e:	9f01      	ldr	r7, [sp, #4]
10003910:	2401      	movs	r4, #1
10003912:	403c      	ands	r4, r7
10003914:	2101      	movs	r1, #1
10003916:	2500      	movs	r5, #0
10003918:	e79d      	b.n	10003856 <__aeabi_fmul+0x16e>
1000391a:	9a01      	ldr	r2, [sp, #4]
1000391c:	01b3      	lsls	r3, r6, #6
1000391e:	2401      	movs	r4, #1
10003920:	0a5d      	lsrs	r5, r3, #9
10003922:	4014      	ands	r4, r2
10003924:	2100      	movs	r1, #0
10003926:	e796      	b.n	10003856 <__aeabi_fmul+0x16e>
10003928:	2280      	movs	r2, #128	; 0x80
1000392a:	03d0      	lsls	r0, r2, #15
1000392c:	4305      	orrs	r5, r0
1000392e:	026c      	lsls	r4, r5, #9
10003930:	9901      	ldr	r1, [sp, #4]
10003932:	0a65      	lsrs	r5, r4, #9
10003934:	2401      	movs	r4, #1
10003936:	400c      	ands	r4, r1
10003938:	21ff      	movs	r1, #255	; 0xff
1000393a:	e78c      	b.n	10003856 <__aeabi_fmul+0x16e>
1000393c:	10003ec8 	.word	0x10003ec8
10003940:	f7ffffff 	.word	0xf7ffffff
10003944:	007fffff 	.word	0x007fffff

10003948 <__aeabi_fsub>:
10003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000394a:	0243      	lsls	r3, r0, #9
1000394c:	0045      	lsls	r5, r0, #1
1000394e:	024f      	lsls	r7, r1, #9
10003950:	004c      	lsls	r4, r1, #1
10003952:	0fc2      	lsrs	r2, r0, #31
10003954:	0998      	lsrs	r0, r3, #6
10003956:	4684      	mov	ip, r0
10003958:	0e2d      	lsrs	r5, r5, #24
1000395a:	0e20      	lsrs	r0, r4, #24
1000395c:	0fc9      	lsrs	r1, r1, #31
1000395e:	09bf      	lsrs	r7, r7, #6
10003960:	28ff      	cmp	r0, #255	; 0xff
10003962:	d054      	beq.n	10003a0e <__aeabi_fsub+0xc6>
10003964:	2601      	movs	r6, #1
10003966:	4071      	eors	r1, r6
10003968:	428a      	cmp	r2, r1
1000396a:	d03b      	beq.n	100039e4 <__aeabi_fsub+0x9c>
1000396c:	1a2c      	subs	r4, r5, r0
1000396e:	2c00      	cmp	r4, #0
10003970:	dc00      	bgt.n	10003974 <__aeabi_fsub+0x2c>
10003972:	e089      	b.n	10003a88 <__aeabi_fsub+0x140>
10003974:	2800      	cmp	r0, #0
10003976:	d125      	bne.n	100039c4 <__aeabi_fsub+0x7c>
10003978:	2f00      	cmp	r7, #0
1000397a:	d14b      	bne.n	10003a14 <__aeabi_fsub+0xcc>
1000397c:	1c6e      	adds	r6, r5, #1
1000397e:	1c2c      	adds	r4, r5, #0
10003980:	4663      	mov	r3, ip
10003982:	1c15      	adds	r5, r2, #0
10003984:	220f      	movs	r2, #15
10003986:	401a      	ands	r2, r3
10003988:	2a04      	cmp	r2, #4
1000398a:	d000      	beq.n	1000398e <__aeabi_fsub+0x46>
1000398c:	3304      	adds	r3, #4
1000398e:	2780      	movs	r7, #128	; 0x80
10003990:	04f9      	lsls	r1, r7, #19
10003992:	2201      	movs	r2, #1
10003994:	4019      	ands	r1, r3
10003996:	402a      	ands	r2, r5
10003998:	2900      	cmp	r1, #0
1000399a:	d006      	beq.n	100039aa <__aeabi_fsub+0x62>
1000399c:	2eff      	cmp	r6, #255	; 0xff
1000399e:	d100      	bne.n	100039a2 <__aeabi_fsub+0x5a>
100039a0:	e081      	b.n	10003aa6 <__aeabi_fsub+0x15e>
100039a2:	4db1      	ldr	r5, [pc, #708]	; (10003c68 <__aeabi_fsub+0x320>)
100039a4:	1c34      	adds	r4, r6, #0
100039a6:	402b      	ands	r3, r5
100039a8:	3601      	adds	r6, #1
100039aa:	b2f6      	uxtb	r6, r6
100039ac:	08dd      	lsrs	r5, r3, #3
100039ae:	2e01      	cmp	r6, #1
100039b0:	dd62      	ble.n	10003a78 <__aeabi_fsub+0x130>
100039b2:	026b      	lsls	r3, r5, #9
100039b4:	0a5d      	lsrs	r5, r3, #9
100039b6:	b2e4      	uxtb	r4, r4
100039b8:	05e4      	lsls	r4, r4, #23
100039ba:	4325      	orrs	r5, r4
100039bc:	1c28      	adds	r0, r5, #0
100039be:	07d2      	lsls	r2, r2, #31
100039c0:	4310      	orrs	r0, r2
100039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100039c4:	2dff      	cmp	r5, #255	; 0xff
100039c6:	d051      	beq.n	10003a6c <__aeabi_fsub+0x124>
100039c8:	2180      	movs	r1, #128	; 0x80
100039ca:	04cb      	lsls	r3, r1, #19
100039cc:	431f      	orrs	r7, r3
100039ce:	2601      	movs	r6, #1
100039d0:	2c1b      	cmp	r4, #27
100039d2:	dd70      	ble.n	10003ab6 <__aeabi_fsub+0x16e>
100039d4:	4667      	mov	r7, ip
100039d6:	1c2c      	adds	r4, r5, #0
100039d8:	1bbb      	subs	r3, r7, r6
100039da:	1c15      	adds	r5, r2, #0
100039dc:	0158      	lsls	r0, r3, #5
100039de:	d422      	bmi.n	10003a26 <__aeabi_fsub+0xde>
100039e0:	1c66      	adds	r6, r4, #1
100039e2:	e7cf      	b.n	10003984 <__aeabi_fsub+0x3c>
100039e4:	1a2e      	subs	r6, r5, r0
100039e6:	2e00      	cmp	r6, #0
100039e8:	dd76      	ble.n	10003ad8 <__aeabi_fsub+0x190>
100039ea:	2800      	cmp	r0, #0
100039ec:	d032      	beq.n	10003a54 <__aeabi_fsub+0x10c>
100039ee:	2dff      	cmp	r5, #255	; 0xff
100039f0:	d03c      	beq.n	10003a6c <__aeabi_fsub+0x124>
100039f2:	2480      	movs	r4, #128	; 0x80
100039f4:	04e1      	lsls	r1, r4, #19
100039f6:	430f      	orrs	r7, r1
100039f8:	2301      	movs	r3, #1
100039fa:	2e1b      	cmp	r6, #27
100039fc:	dc00      	bgt.n	10003a00 <__aeabi_fsub+0xb8>
100039fe:	e0d1      	b.n	10003ba4 <__aeabi_fsub+0x25c>
10003a00:	4463      	add	r3, ip
10003a02:	1c2c      	adds	r4, r5, #0
10003a04:	0158      	lsls	r0, r3, #5
10003a06:	d47a      	bmi.n	10003afe <__aeabi_fsub+0x1b6>
10003a08:	1c66      	adds	r6, r4, #1
10003a0a:	1c15      	adds	r5, r2, #0
10003a0c:	e7ba      	b.n	10003984 <__aeabi_fsub+0x3c>
10003a0e:	2f00      	cmp	r7, #0
10003a10:	d1aa      	bne.n	10003968 <__aeabi_fsub+0x20>
10003a12:	e7a7      	b.n	10003964 <__aeabi_fsub+0x1c>
10003a14:	3c01      	subs	r4, #1
10003a16:	2c00      	cmp	r4, #0
10003a18:	d16d      	bne.n	10003af6 <__aeabi_fsub+0x1ae>
10003a1a:	4663      	mov	r3, ip
10003a1c:	1c2c      	adds	r4, r5, #0
10003a1e:	1bdb      	subs	r3, r3, r7
10003a20:	1c15      	adds	r5, r2, #0
10003a22:	0158      	lsls	r0, r3, #5
10003a24:	d5dc      	bpl.n	100039e0 <__aeabi_fsub+0x98>
10003a26:	019a      	lsls	r2, r3, #6
10003a28:	0996      	lsrs	r6, r2, #6
10003a2a:	1c30      	adds	r0, r6, #0
10003a2c:	f000 f9da 	bl	10003de4 <__clzsi2>
10003a30:	3805      	subs	r0, #5
10003a32:	4086      	lsls	r6, r0
10003a34:	4284      	cmp	r4, r0
10003a36:	dc39      	bgt.n	10003aac <__aeabi_fsub+0x164>
10003a38:	1b00      	subs	r0, r0, r4
10003a3a:	231f      	movs	r3, #31
10003a3c:	1a1a      	subs	r2, r3, r0
10003a3e:	1c33      	adds	r3, r6, #0
10003a40:	1c31      	adds	r1, r6, #0
10003a42:	1c44      	adds	r4, r0, #1
10003a44:	4093      	lsls	r3, r2
10003a46:	40e1      	lsrs	r1, r4
10003a48:	1e5e      	subs	r6, r3, #1
10003a4a:	41b3      	sbcs	r3, r6
10003a4c:	430b      	orrs	r3, r1
10003a4e:	2601      	movs	r6, #1
10003a50:	2400      	movs	r4, #0
10003a52:	e797      	b.n	10003984 <__aeabi_fsub+0x3c>
10003a54:	2f00      	cmp	r7, #0
10003a56:	d100      	bne.n	10003a5a <__aeabi_fsub+0x112>
10003a58:	e790      	b.n	1000397c <__aeabi_fsub+0x34>
10003a5a:	3e01      	subs	r6, #1
10003a5c:	2e00      	cmp	r6, #0
10003a5e:	d103      	bne.n	10003a68 <__aeabi_fsub+0x120>
10003a60:	4664      	mov	r4, ip
10003a62:	193b      	adds	r3, r7, r4
10003a64:	1c2c      	adds	r4, r5, #0
10003a66:	e7cd      	b.n	10003a04 <__aeabi_fsub+0xbc>
10003a68:	2dff      	cmp	r5, #255	; 0xff
10003a6a:	d1c5      	bne.n	100039f8 <__aeabi_fsub+0xb0>
10003a6c:	1c15      	adds	r5, r2, #0
10003a6e:	2280      	movs	r2, #128	; 0x80
10003a70:	4663      	mov	r3, ip
10003a72:	0056      	lsls	r6, r2, #1
10003a74:	24ff      	movs	r4, #255	; 0xff
10003a76:	e785      	b.n	10003984 <__aeabi_fsub+0x3c>
10003a78:	2d00      	cmp	r5, #0
10003a7a:	d09c      	beq.n	100039b6 <__aeabi_fsub+0x6e>
10003a7c:	2c00      	cmp	r4, #0
10003a7e:	d028      	beq.n	10003ad2 <__aeabi_fsub+0x18a>
10003a80:	2080      	movs	r0, #128	; 0x80
10003a82:	03c7      	lsls	r7, r0, #15
10003a84:	433d      	orrs	r5, r7
10003a86:	e794      	b.n	100039b2 <__aeabi_fsub+0x6a>
10003a88:	2c00      	cmp	r4, #0
10003a8a:	d145      	bne.n	10003b18 <__aeabi_fsub+0x1d0>
10003a8c:	1c6b      	adds	r3, r5, #1
10003a8e:	b2d8      	uxtb	r0, r3
10003a90:	2801      	cmp	r0, #1
10003a92:	dc00      	bgt.n	10003a96 <__aeabi_fsub+0x14e>
10003a94:	e090      	b.n	10003bb8 <__aeabi_fsub+0x270>
10003a96:	4664      	mov	r4, ip
10003a98:	1be6      	subs	r6, r4, r7
10003a9a:	0173      	lsls	r3, r6, #5
10003a9c:	d557      	bpl.n	10003b4e <__aeabi_fsub+0x206>
10003a9e:	1b3e      	subs	r6, r7, r4
10003aa0:	1c2c      	adds	r4, r5, #0
10003aa2:	1c0d      	adds	r5, r1, #0
10003aa4:	e7c1      	b.n	10003a2a <__aeabi_fsub+0xe2>
10003aa6:	24ff      	movs	r4, #255	; 0xff
10003aa8:	2500      	movs	r5, #0
10003aaa:	e785      	b.n	100039b8 <__aeabi_fsub+0x70>
10003aac:	4b6e      	ldr	r3, [pc, #440]	; (10003c68 <__aeabi_fsub+0x320>)
10003aae:	1a24      	subs	r4, r4, r0
10003ab0:	4033      	ands	r3, r6
10003ab2:	1c66      	adds	r6, r4, #1
10003ab4:	e766      	b.n	10003984 <__aeabi_fsub+0x3c>
10003ab6:	1c38      	adds	r0, r7, #0
10003ab8:	2120      	movs	r1, #32
10003aba:	40e0      	lsrs	r0, r4
10003abc:	1b0c      	subs	r4, r1, r4
10003abe:	40a7      	lsls	r7, r4
10003ac0:	1c3e      	adds	r6, r7, #0
10003ac2:	1e77      	subs	r7, r6, #1
10003ac4:	41be      	sbcs	r6, r7
10003ac6:	4306      	orrs	r6, r0
10003ac8:	4667      	mov	r7, ip
10003aca:	1c2c      	adds	r4, r5, #0
10003acc:	1bbb      	subs	r3, r7, r6
10003ace:	1c15      	adds	r5, r2, #0
10003ad0:	e784      	b.n	100039dc <__aeabi_fsub+0x94>
10003ad2:	0269      	lsls	r1, r5, #9
10003ad4:	0a4d      	lsrs	r5, r1, #9
10003ad6:	e76f      	b.n	100039b8 <__aeabi_fsub+0x70>
10003ad8:	2e00      	cmp	r6, #0
10003ada:	d179      	bne.n	10003bd0 <__aeabi_fsub+0x288>
10003adc:	1c6c      	adds	r4, r5, #1
10003ade:	b2e0      	uxtb	r0, r4
10003ae0:	2801      	cmp	r0, #1
10003ae2:	dd4b      	ble.n	10003b7c <__aeabi_fsub+0x234>
10003ae4:	2cff      	cmp	r4, #255	; 0xff
10003ae6:	d100      	bne.n	10003aea <__aeabi_fsub+0x1a2>
10003ae8:	e098      	b.n	10003c1c <__aeabi_fsub+0x2d4>
10003aea:	4661      	mov	r1, ip
10003aec:	187f      	adds	r7, r7, r1
10003aee:	1cae      	adds	r6, r5, #2
10003af0:	087b      	lsrs	r3, r7, #1
10003af2:	1c15      	adds	r5, r2, #0
10003af4:	e746      	b.n	10003984 <__aeabi_fsub+0x3c>
10003af6:	2dff      	cmp	r5, #255	; 0xff
10003af8:	d000      	beq.n	10003afc <__aeabi_fsub+0x1b4>
10003afa:	e768      	b.n	100039ce <__aeabi_fsub+0x86>
10003afc:	e7b6      	b.n	10003a6c <__aeabi_fsub+0x124>
10003afe:	1c67      	adds	r7, r4, #1
10003b00:	2fff      	cmp	r7, #255	; 0xff
10003b02:	d036      	beq.n	10003b72 <__aeabi_fsub+0x22a>
10003b04:	4858      	ldr	r0, [pc, #352]	; (10003c68 <__aeabi_fsub+0x320>)
10003b06:	2101      	movs	r1, #1
10003b08:	4019      	ands	r1, r3
10003b0a:	4003      	ands	r3, r0
10003b0c:	085b      	lsrs	r3, r3, #1
10003b0e:	1ca6      	adds	r6, r4, #2
10003b10:	430b      	orrs	r3, r1
10003b12:	1c3c      	adds	r4, r7, #0
10003b14:	1c15      	adds	r5, r2, #0
10003b16:	e735      	b.n	10003984 <__aeabi_fsub+0x3c>
10003b18:	4266      	negs	r6, r4
10003b1a:	2d00      	cmp	r5, #0
10003b1c:	d01e      	beq.n	10003b5c <__aeabi_fsub+0x214>
10003b1e:	28ff      	cmp	r0, #255	; 0xff
10003b20:	d06f      	beq.n	10003c02 <__aeabi_fsub+0x2ba>
10003b22:	2580      	movs	r5, #128	; 0x80
10003b24:	4662      	mov	r2, ip
10003b26:	04eb      	lsls	r3, r5, #19
10003b28:	431a      	orrs	r2, r3
10003b2a:	4694      	mov	ip, r2
10003b2c:	2501      	movs	r5, #1
10003b2e:	2e1b      	cmp	r6, #27
10003b30:	dc09      	bgt.n	10003b46 <__aeabi_fsub+0x1fe>
10003b32:	4662      	mov	r2, ip
10003b34:	2320      	movs	r3, #32
10003b36:	40f2      	lsrs	r2, r6
10003b38:	4664      	mov	r4, ip
10003b3a:	1b9e      	subs	r6, r3, r6
10003b3c:	40b4      	lsls	r4, r6
10003b3e:	1c25      	adds	r5, r4, #0
10003b40:	1e6c      	subs	r4, r5, #1
10003b42:	41a5      	sbcs	r5, r4
10003b44:	4315      	orrs	r5, r2
10003b46:	1b7b      	subs	r3, r7, r5
10003b48:	1c04      	adds	r4, r0, #0
10003b4a:	1c0d      	adds	r5, r1, #0
10003b4c:	e769      	b.n	10003a22 <__aeabi_fsub+0xda>
10003b4e:	2e00      	cmp	r6, #0
10003b50:	d10c      	bne.n	10003b6c <__aeabi_fsub+0x224>
10003b52:	2200      	movs	r2, #0
10003b54:	2601      	movs	r6, #1
10003b56:	2304      	movs	r3, #4
10003b58:	2400      	movs	r4, #0
10003b5a:	e726      	b.n	100039aa <__aeabi_fsub+0x62>
10003b5c:	4664      	mov	r4, ip
10003b5e:	2c00      	cmp	r4, #0
10003b60:	d155      	bne.n	10003c0e <__aeabi_fsub+0x2c6>
10003b62:	1c46      	adds	r6, r0, #1
10003b64:	1c3b      	adds	r3, r7, #0
10003b66:	1c04      	adds	r4, r0, #0
10003b68:	1c0d      	adds	r5, r1, #0
10003b6a:	e70b      	b.n	10003984 <__aeabi_fsub+0x3c>
10003b6c:	1c2c      	adds	r4, r5, #0
10003b6e:	1c15      	adds	r5, r2, #0
10003b70:	e75b      	b.n	10003a2a <__aeabi_fsub+0xe2>
10003b72:	2380      	movs	r3, #128	; 0x80
10003b74:	005e      	lsls	r6, r3, #1
10003b76:	24ff      	movs	r4, #255	; 0xff
10003b78:	2304      	movs	r3, #4
10003b7a:	e716      	b.n	100039aa <__aeabi_fsub+0x62>
10003b7c:	2d00      	cmp	r5, #0
10003b7e:	d000      	beq.n	10003b82 <__aeabi_fsub+0x23a>
10003b80:	e08d      	b.n	10003c9e <__aeabi_fsub+0x356>
10003b82:	4665      	mov	r5, ip
10003b84:	2d00      	cmp	r5, #0
10003b86:	d100      	bne.n	10003b8a <__aeabi_fsub+0x242>
10003b88:	e0ad      	b.n	10003ce6 <__aeabi_fsub+0x39e>
10003b8a:	2f00      	cmp	r7, #0
10003b8c:	d100      	bne.n	10003b90 <__aeabi_fsub+0x248>
10003b8e:	e081      	b.n	10003c94 <__aeabi_fsub+0x34c>
10003b90:	197b      	adds	r3, r7, r5
10003b92:	015c      	lsls	r4, r3, #5
10003b94:	d400      	bmi.n	10003b98 <__aeabi_fsub+0x250>
10003b96:	e07e      	b.n	10003c96 <__aeabi_fsub+0x34e>
10003b98:	4f33      	ldr	r7, [pc, #204]	; (10003c68 <__aeabi_fsub+0x320>)
10003b9a:	1c15      	adds	r5, r2, #0
10003b9c:	403b      	ands	r3, r7
10003b9e:	2602      	movs	r6, #2
10003ba0:	2401      	movs	r4, #1
10003ba2:	e6ef      	b.n	10003984 <__aeabi_fsub+0x3c>
10003ba4:	1c38      	adds	r0, r7, #0
10003ba6:	2320      	movs	r3, #32
10003ba8:	40f0      	lsrs	r0, r6
10003baa:	1b9e      	subs	r6, r3, r6
10003bac:	40b7      	lsls	r7, r6
10003bae:	1c3b      	adds	r3, r7, #0
10003bb0:	1e5f      	subs	r7, r3, #1
10003bb2:	41bb      	sbcs	r3, r7
10003bb4:	4303      	orrs	r3, r0
10003bb6:	e723      	b.n	10003a00 <__aeabi_fsub+0xb8>
10003bb8:	2d00      	cmp	r5, #0
10003bba:	d115      	bne.n	10003be8 <__aeabi_fsub+0x2a0>
10003bbc:	4665      	mov	r5, ip
10003bbe:	2d00      	cmp	r5, #0
10003bc0:	d147      	bne.n	10003c52 <__aeabi_fsub+0x30a>
10003bc2:	2f00      	cmp	r7, #0
10003bc4:	d0c5      	beq.n	10003b52 <__aeabi_fsub+0x20a>
10003bc6:	1c3b      	adds	r3, r7, #0
10003bc8:	1c0d      	adds	r5, r1, #0
10003bca:	2601      	movs	r6, #1
10003bcc:	2400      	movs	r4, #0
10003bce:	e6d9      	b.n	10003984 <__aeabi_fsub+0x3c>
10003bd0:	4276      	negs	r6, r6
10003bd2:	2d00      	cmp	r5, #0
10003bd4:	d126      	bne.n	10003c24 <__aeabi_fsub+0x2dc>
10003bd6:	4665      	mov	r5, ip
10003bd8:	2d00      	cmp	r5, #0
10003bda:	d000      	beq.n	10003bde <__aeabi_fsub+0x296>
10003bdc:	e07d      	b.n	10003cda <__aeabi_fsub+0x392>
10003bde:	1c46      	adds	r6, r0, #1
10003be0:	1c3b      	adds	r3, r7, #0
10003be2:	1c04      	adds	r4, r0, #0
10003be4:	1c15      	adds	r5, r2, #0
10003be6:	e6cd      	b.n	10003984 <__aeabi_fsub+0x3c>
10003be8:	4665      	mov	r5, ip
10003bea:	2d00      	cmp	r5, #0
10003bec:	d140      	bne.n	10003c70 <__aeabi_fsub+0x328>
10003bee:	2f00      	cmp	r7, #0
10003bf0:	d107      	bne.n	10003c02 <__aeabi_fsub+0x2ba>
10003bf2:	2180      	movs	r1, #128	; 0x80
10003bf4:	2200      	movs	r2, #0
10003bf6:	004e      	lsls	r6, r1, #1
10003bf8:	4b1c      	ldr	r3, [pc, #112]	; (10003c6c <__aeabi_fsub+0x324>)
10003bfa:	24ff      	movs	r4, #255	; 0xff
10003bfc:	e6d5      	b.n	100039aa <__aeabi_fsub+0x62>
10003bfe:	28ff      	cmp	r0, #255	; 0xff
10003c00:	d194      	bne.n	10003b2c <__aeabi_fsub+0x1e4>
10003c02:	2080      	movs	r0, #128	; 0x80
10003c04:	1c3b      	adds	r3, r7, #0
10003c06:	1c0d      	adds	r5, r1, #0
10003c08:	0046      	lsls	r6, r0, #1
10003c0a:	24ff      	movs	r4, #255	; 0xff
10003c0c:	e6ba      	b.n	10003984 <__aeabi_fsub+0x3c>
10003c0e:	3e01      	subs	r6, #1
10003c10:	2e00      	cmp	r6, #0
10003c12:	d1f4      	bne.n	10003bfe <__aeabi_fsub+0x2b6>
10003c14:	1b3b      	subs	r3, r7, r4
10003c16:	1c0d      	adds	r5, r1, #0
10003c18:	1c04      	adds	r4, r0, #0
10003c1a:	e702      	b.n	10003a22 <__aeabi_fsub+0xda>
10003c1c:	2580      	movs	r5, #128	; 0x80
10003c1e:	006e      	lsls	r6, r5, #1
10003c20:	2304      	movs	r3, #4
10003c22:	e6c2      	b.n	100039aa <__aeabi_fsub+0x62>
10003c24:	28ff      	cmp	r0, #255	; 0xff
10003c26:	d052      	beq.n	10003cce <__aeabi_fsub+0x386>
10003c28:	2480      	movs	r4, #128	; 0x80
10003c2a:	4661      	mov	r1, ip
10003c2c:	04e3      	lsls	r3, r4, #19
10003c2e:	4319      	orrs	r1, r3
10003c30:	468c      	mov	ip, r1
10003c32:	2301      	movs	r3, #1
10003c34:	2e1b      	cmp	r6, #27
10003c36:	dc09      	bgt.n	10003c4c <__aeabi_fsub+0x304>
10003c38:	2120      	movs	r1, #32
10003c3a:	4664      	mov	r4, ip
10003c3c:	40f4      	lsrs	r4, r6
10003c3e:	4665      	mov	r5, ip
10003c40:	1b8e      	subs	r6, r1, r6
10003c42:	40b5      	lsls	r5, r6
10003c44:	1c2b      	adds	r3, r5, #0
10003c46:	1e59      	subs	r1, r3, #1
10003c48:	418b      	sbcs	r3, r1
10003c4a:	4323      	orrs	r3, r4
10003c4c:	19db      	adds	r3, r3, r7
10003c4e:	1c04      	adds	r4, r0, #0
10003c50:	e6d8      	b.n	10003a04 <__aeabi_fsub+0xbc>
10003c52:	2f00      	cmp	r7, #0
10003c54:	d01e      	beq.n	10003c94 <__aeabi_fsub+0x34c>
10003c56:	1beb      	subs	r3, r5, r7
10003c58:	0158      	lsls	r0, r3, #5
10003c5a:	d54b      	bpl.n	10003cf4 <__aeabi_fsub+0x3ac>
10003c5c:	1b7b      	subs	r3, r7, r5
10003c5e:	2601      	movs	r6, #1
10003c60:	1c0d      	adds	r5, r1, #0
10003c62:	2400      	movs	r4, #0
10003c64:	e68e      	b.n	10003984 <__aeabi_fsub+0x3c>
10003c66:	46c0      	nop			; (mov r8, r8)
10003c68:	fbffffff 	.word	0xfbffffff
10003c6c:	03fffffc 	.word	0x03fffffc
10003c70:	2f00      	cmp	r7, #0
10003c72:	d100      	bne.n	10003c76 <__aeabi_fsub+0x32e>
10003c74:	e6fa      	b.n	10003a6c <__aeabi_fsub+0x124>
10003c76:	2080      	movs	r0, #128	; 0x80
10003c78:	08eb      	lsrs	r3, r5, #3
10003c7a:	03c4      	lsls	r4, r0, #15
10003c7c:	4223      	tst	r3, r4
10003c7e:	d037      	beq.n	10003cf0 <__aeabi_fsub+0x3a8>
10003c80:	08ff      	lsrs	r7, r7, #3
10003c82:	4227      	tst	r7, r4
10003c84:	d134      	bne.n	10003cf0 <__aeabi_fsub+0x3a8>
10003c86:	1c3b      	adds	r3, r7, #0
10003c88:	1c0d      	adds	r5, r1, #0
10003c8a:	2280      	movs	r2, #128	; 0x80
10003c8c:	00db      	lsls	r3, r3, #3
10003c8e:	0056      	lsls	r6, r2, #1
10003c90:	24ff      	movs	r4, #255	; 0xff
10003c92:	e677      	b.n	10003984 <__aeabi_fsub+0x3c>
10003c94:	4663      	mov	r3, ip
10003c96:	1c15      	adds	r5, r2, #0
10003c98:	2601      	movs	r6, #1
10003c9a:	2400      	movs	r4, #0
10003c9c:	e672      	b.n	10003984 <__aeabi_fsub+0x3c>
10003c9e:	4664      	mov	r4, ip
10003ca0:	2c00      	cmp	r4, #0
10003ca2:	d014      	beq.n	10003cce <__aeabi_fsub+0x386>
10003ca4:	2f00      	cmp	r7, #0
10003ca6:	d100      	bne.n	10003caa <__aeabi_fsub+0x362>
10003ca8:	e6e0      	b.n	10003a6c <__aeabi_fsub+0x124>
10003caa:	2380      	movs	r3, #128	; 0x80
10003cac:	08e6      	lsrs	r6, r4, #3
10003cae:	03d8      	lsls	r0, r3, #15
10003cb0:	1c31      	adds	r1, r6, #0
10003cb2:	4206      	tst	r6, r0
10003cb4:	d003      	beq.n	10003cbe <__aeabi_fsub+0x376>
10003cb6:	08f9      	lsrs	r1, r7, #3
10003cb8:	4201      	tst	r1, r0
10003cba:	d000      	beq.n	10003cbe <__aeabi_fsub+0x376>
10003cbc:	1c31      	adds	r1, r6, #0
10003cbe:	1c15      	adds	r5, r2, #0
10003cc0:	2280      	movs	r2, #128	; 0x80
10003cc2:	00cb      	lsls	r3, r1, #3
10003cc4:	0056      	lsls	r6, r2, #1
10003cc6:	24ff      	movs	r4, #255	; 0xff
10003cc8:	e65c      	b.n	10003984 <__aeabi_fsub+0x3c>
10003cca:	28ff      	cmp	r0, #255	; 0xff
10003ccc:	d1b1      	bne.n	10003c32 <__aeabi_fsub+0x2ea>
10003cce:	2080      	movs	r0, #128	; 0x80
10003cd0:	1c3b      	adds	r3, r7, #0
10003cd2:	1c15      	adds	r5, r2, #0
10003cd4:	0046      	lsls	r6, r0, #1
10003cd6:	24ff      	movs	r4, #255	; 0xff
10003cd8:	e654      	b.n	10003984 <__aeabi_fsub+0x3c>
10003cda:	3e01      	subs	r6, #1
10003cdc:	2e00      	cmp	r6, #0
10003cde:	d1f4      	bne.n	10003cca <__aeabi_fsub+0x382>
10003ce0:	197b      	adds	r3, r7, r5
10003ce2:	1c04      	adds	r4, r0, #0
10003ce4:	e68e      	b.n	10003a04 <__aeabi_fsub+0xbc>
10003ce6:	1c3b      	adds	r3, r7, #0
10003ce8:	1c15      	adds	r5, r2, #0
10003cea:	2601      	movs	r6, #1
10003cec:	2400      	movs	r4, #0
10003cee:	e649      	b.n	10003984 <__aeabi_fsub+0x3c>
10003cf0:	1c15      	adds	r5, r2, #0
10003cf2:	e7ca      	b.n	10003c8a <__aeabi_fsub+0x342>
10003cf4:	2b00      	cmp	r3, #0
10003cf6:	d100      	bne.n	10003cfa <__aeabi_fsub+0x3b2>
10003cf8:	e72b      	b.n	10003b52 <__aeabi_fsub+0x20a>
10003cfa:	e7cc      	b.n	10003c96 <__aeabi_fsub+0x34e>

10003cfc <__aeabi_f2iz>:
10003cfc:	0243      	lsls	r3, r0, #9
10003cfe:	0042      	lsls	r2, r0, #1
10003d00:	0a59      	lsrs	r1, r3, #9
10003d02:	0e13      	lsrs	r3, r2, #24
10003d04:	0fc2      	lsrs	r2, r0, #31
10003d06:	2000      	movs	r0, #0
10003d08:	2b7e      	cmp	r3, #126	; 0x7e
10003d0a:	dd0d      	ble.n	10003d28 <__aeabi_f2iz+0x2c>
10003d0c:	2b9d      	cmp	r3, #157	; 0x9d
10003d0e:	dc0c      	bgt.n	10003d2a <__aeabi_f2iz+0x2e>
10003d10:	2080      	movs	r0, #128	; 0x80
10003d12:	0400      	lsls	r0, r0, #16
10003d14:	4301      	orrs	r1, r0
10003d16:	2b95      	cmp	r3, #149	; 0x95
10003d18:	dc0a      	bgt.n	10003d30 <__aeabi_f2iz+0x34>
10003d1a:	2096      	movs	r0, #150	; 0x96
10003d1c:	1ac3      	subs	r3, r0, r3
10003d1e:	40d9      	lsrs	r1, r3
10003d20:	4248      	negs	r0, r1
10003d22:	2a00      	cmp	r2, #0
10003d24:	d100      	bne.n	10003d28 <__aeabi_f2iz+0x2c>
10003d26:	1c08      	adds	r0, r1, #0
10003d28:	4770      	bx	lr
10003d2a:	4903      	ldr	r1, [pc, #12]	; (10003d38 <__aeabi_f2iz+0x3c>)
10003d2c:	1850      	adds	r0, r2, r1
10003d2e:	e7fb      	b.n	10003d28 <__aeabi_f2iz+0x2c>
10003d30:	3b96      	subs	r3, #150	; 0x96
10003d32:	4099      	lsls	r1, r3
10003d34:	e7f4      	b.n	10003d20 <__aeabi_f2iz+0x24>
10003d36:	46c0      	nop			; (mov r8, r8)
10003d38:	7fffffff 	.word	0x7fffffff

10003d3c <__aeabi_ui2f>:
10003d3c:	b510      	push	{r4, lr}
10003d3e:	1e04      	subs	r4, r0, #0
10003d40:	d034      	beq.n	10003dac <__aeabi_ui2f+0x70>
10003d42:	f000 f84f 	bl	10003de4 <__clzsi2>
10003d46:	239e      	movs	r3, #158	; 0x9e
10003d48:	1a1b      	subs	r3, r3, r0
10003d4a:	2b96      	cmp	r3, #150	; 0x96
10003d4c:	dc07      	bgt.n	10003d5e <__aeabi_ui2f+0x22>
10003d4e:	3808      	subs	r0, #8
10003d50:	4084      	lsls	r4, r0
10003d52:	0264      	lsls	r4, r4, #9
10003d54:	0a61      	lsrs	r1, r4, #9
10003d56:	b2db      	uxtb	r3, r3
10003d58:	05d8      	lsls	r0, r3, #23
10003d5a:	4308      	orrs	r0, r1
10003d5c:	bd10      	pop	{r4, pc}
10003d5e:	2b99      	cmp	r3, #153	; 0x99
10003d60:	dd0a      	ble.n	10003d78 <__aeabi_ui2f+0x3c>
10003d62:	1c02      	adds	r2, r0, #0
10003d64:	321b      	adds	r2, #27
10003d66:	1c21      	adds	r1, r4, #0
10003d68:	4091      	lsls	r1, r2
10003d6a:	1c0a      	adds	r2, r1, #0
10003d6c:	1e51      	subs	r1, r2, #1
10003d6e:	418a      	sbcs	r2, r1
10003d70:	2105      	movs	r1, #5
10003d72:	1a09      	subs	r1, r1, r0
10003d74:	40cc      	lsrs	r4, r1
10003d76:	4314      	orrs	r4, r2
10003d78:	2805      	cmp	r0, #5
10003d7a:	dc1a      	bgt.n	10003db2 <__aeabi_ui2f+0x76>
10003d7c:	4a18      	ldr	r2, [pc, #96]	; (10003de0 <__aeabi_ui2f+0xa4>)
10003d7e:	210f      	movs	r1, #15
10003d80:	4022      	ands	r2, r4
10003d82:	400c      	ands	r4, r1
10003d84:	2c04      	cmp	r4, #4
10003d86:	d000      	beq.n	10003d8a <__aeabi_ui2f+0x4e>
10003d88:	3204      	adds	r2, #4
10003d8a:	0151      	lsls	r1, r2, #5
10003d8c:	d505      	bpl.n	10003d9a <__aeabi_ui2f+0x5e>
10003d8e:	249f      	movs	r4, #159	; 0x9f
10003d90:	1a23      	subs	r3, r4, r0
10003d92:	2bff      	cmp	r3, #255	; 0xff
10003d94:	d021      	beq.n	10003dda <__aeabi_ui2f+0x9e>
10003d96:	4812      	ldr	r0, [pc, #72]	; (10003de0 <__aeabi_ui2f+0xa4>)
10003d98:	4002      	ands	r2, r0
10003d9a:	1c59      	adds	r1, r3, #1
10003d9c:	b2cc      	uxtb	r4, r1
10003d9e:	08d2      	lsrs	r2, r2, #3
10003da0:	2c01      	cmp	r4, #1
10003da2:	dd09      	ble.n	10003db8 <__aeabi_ui2f+0x7c>
10003da4:	0250      	lsls	r0, r2, #9
10003da6:	0a41      	lsrs	r1, r0, #9
10003da8:	b2db      	uxtb	r3, r3
10003daa:	e7d5      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003dac:	2300      	movs	r3, #0
10003dae:	2100      	movs	r1, #0
10003db0:	e7d2      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003db2:	1f42      	subs	r2, r0, #5
10003db4:	4094      	lsls	r4, r2
10003db6:	e7e1      	b.n	10003d7c <__aeabi_ui2f+0x40>
10003db8:	2a00      	cmp	r2, #0
10003dba:	d00b      	beq.n	10003dd4 <__aeabi_ui2f+0x98>
10003dbc:	2b00      	cmp	r3, #0
10003dbe:	d006      	beq.n	10003dce <__aeabi_ui2f+0x92>
10003dc0:	2180      	movs	r1, #128	; 0x80
10003dc2:	03cc      	lsls	r4, r1, #15
10003dc4:	4322      	orrs	r2, r4
10003dc6:	0252      	lsls	r2, r2, #9
10003dc8:	0a51      	lsrs	r1, r2, #9
10003dca:	b2db      	uxtb	r3, r3
10003dcc:	e7c4      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003dce:	0250      	lsls	r0, r2, #9
10003dd0:	0a41      	lsrs	r1, r0, #9
10003dd2:	e7c1      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003dd4:	b2db      	uxtb	r3, r3
10003dd6:	2100      	movs	r1, #0
10003dd8:	e7be      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003dda:	23ff      	movs	r3, #255	; 0xff
10003ddc:	2100      	movs	r1, #0
10003dde:	e7bb      	b.n	10003d58 <__aeabi_ui2f+0x1c>
10003de0:	fbffffff 	.word	0xfbffffff

10003de4 <__clzsi2>:
10003de4:	211c      	movs	r1, #28
10003de6:	2301      	movs	r3, #1
10003de8:	041b      	lsls	r3, r3, #16
10003dea:	4298      	cmp	r0, r3
10003dec:	d301      	bcc.n	10003df2 <__clzsi2+0xe>
10003dee:	0c00      	lsrs	r0, r0, #16
10003df0:	3910      	subs	r1, #16
10003df2:	0a1b      	lsrs	r3, r3, #8
10003df4:	4298      	cmp	r0, r3
10003df6:	d301      	bcc.n	10003dfc <__clzsi2+0x18>
10003df8:	0a00      	lsrs	r0, r0, #8
10003dfa:	3908      	subs	r1, #8
10003dfc:	091b      	lsrs	r3, r3, #4
10003dfe:	4298      	cmp	r0, r3
10003e00:	d301      	bcc.n	10003e06 <__clzsi2+0x22>
10003e02:	0900      	lsrs	r0, r0, #4
10003e04:	3904      	subs	r1, #4
10003e06:	a202      	add	r2, pc, #8	; (adr r2, 10003e10 <__clzsi2+0x2c>)
10003e08:	5c10      	ldrb	r0, [r2, r0]
10003e0a:	1840      	adds	r0, r0, r1
10003e0c:	4770      	bx	lr
10003e0e:	46c0      	nop			; (mov r8, r8)
10003e10:	02020304 	.word	0x02020304
10003e14:	01010101 	.word	0x01010101
	...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100010d7 	.word	0x100010d7
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100010d9 	.word	0x100010d9
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100010db 	.word	0x100010db
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100010dd 	.word	0x100010dd
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100010df 	.word	0x100010df
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100010e1 	.word	0x100010e1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100010e3 	.word	0x100010e3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100010e5 	.word	0x100010e5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100010e7 	.word	0x100010e7
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100010e9 	.word	0x100010e9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100010eb 	.word	0x100010eb
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	100010f9 	.word	0x100010f9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	100010fb 	.word	0x100010fb
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	100010fd 	.word	0x100010fd
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	100010ff 	.word	0x100010ff
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001101 	.word	0x10001101
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	10001103 	.word	0x10001103
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	100010ed 	.word	0x100010ed
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	100010ef 	.word	0x100010ef
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	100010f1 	.word	0x100010f1
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	100010f3 	.word	0x100010f3
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	100010f5 	.word	0x100010f5
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	1000132d 	.word	0x1000132d
